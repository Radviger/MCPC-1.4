Index: Block.java
===================================================================
--- Block.java	(revision 3)
+++ Block.java	(working copy)
@@ -1,10 +1,25 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+import net.minecraft.server.Block$1;
+import net.minecraftforge.common.EnumPlantType;
+import net.minecraftforge.common.ForgeDirection;
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.IPlantable;
+import net.minecraftforge.common.MinecraftForge;
 
 public class Block
 {
+    protected static int[] blockFireSpreadSpeed = new int[4096];
+    protected static int[] blockFlammability = new int[4096];
+    protected String currentTexture;
+    public boolean isDefaultTexture;
+
     /**
      * used as foreach item, if item.tab = current tab, display it on the screen
      */
@@ -267,8 +282,10 @@
     public float frictionFactor;
     private String name;
 
-    protected Block(int var1, Material var2)
+    public Block(int var1, Material var2)
     {
+        this.currentTexture = "/terrain.png";
+        this.isDefaultTexture = true;
         this.cp = true;
         this.cq = true;
         this.stepSound = d;
@@ -288,6 +305,7 @@
             q[var1] = this.c();
             lightBlock[var1] = this.c() ? 255 : 0;
             s[var1] = !var2.blocksLight();
+            this.isDefaultTexture = this.getTextureFile() != null && this.getTextureFile().equalsIgnoreCase("/terrain.png");
         }
     }
 
@@ -295,7 +313,7 @@
      * Blocks with this attribute will not notify all near blocks when it's metadata change. The default behavior is
      * always notify every neightbor block when anything changes.
      */
-    protected Block r()
+    public Block r()
     {
         u[this.id] = true;
         return this;
@@ -307,7 +325,7 @@
      */
     protected void t_() {}
 
-    protected Block(int var1, int var2, Material var3)
+    public Block(int var1, int var2, Material var3)
     {
         this(var1, var3);
         this.textureId = var2;
@@ -316,7 +334,7 @@
     /**
      * Sets the footstep sound for the block. Returns the object for convenience in constructing.
      */
-    protected Block a(StepSound var1)
+    public Block a(StepSound var1)
     {
         this.stepSound = var1;
         return this;
@@ -325,7 +343,7 @@
     /**
      * Sets how much light is blocked going through this block. Returns the object for convenience in constructing.
      */
-    protected Block h(int var1)
+    public Block h(int var1)
     {
         lightBlock[this.id] = var1;
         return this;
@@ -335,7 +353,7 @@
      * Sets the amount of light emitted by a block from 0.0f to 1.0f (converts internally to 0-15). Returns the object
      * for convenience in constructing.
      */
-    protected Block a(float var1)
+    public Block a(float var1)
     {
         lightEmission[this.id] = (int)(15.0F * var1);
         return this;
@@ -344,7 +362,7 @@
     /**
      * Sets the the blocks resistance to explosions. Returns the object for convenience in constructing.
      */
-    protected Block b(float var1)
+    public Block b(float var1)
     {
         this.durability = var1 * 3.0F;
         return this;
@@ -380,7 +398,7 @@
     /**
      * Sets how many hits it takes to break a block.
      */
-    protected Block c(float var1)
+    public Block c(float var1)
     {
         this.strength = var1;
 
@@ -395,7 +413,7 @@
     /**
      * This method will make the hardness of the block equals to -1, and the block is indestructible.
      */
-    protected Block s()
+    public Block s()
     {
         this.c(-1.0F);
         return this;
@@ -412,7 +430,7 @@
     /**
      * Sets whether this block type will receive random update ticks
      */
-    protected Block b(boolean var1)
+    public Block b(boolean var1)
     {
         this.cr = var1;
         return this;
@@ -427,15 +445,16 @@
         return this.cr;
     }
 
+    @Deprecated
     public boolean u()
     {
-        return this.isTileEntity;
+        return this.hasTileEntity(0);
     }
 
     /**
      * Sets the bounds of the block.  minX, minY, minZ, maxX, maxY, maxZ
      */
-    protected final void a(float var1, float var2, float var3, float var4, float var5, float var6)
+    public final void a(float var1, float var2, float var3, float var4, float var5, float var6)
     {
         this.minX = (double)var1;
         this.minY = (double)var2;
@@ -445,6 +464,24 @@
         this.maxZ = (double)var6;
     }
 
+    @SideOnly(Side.CLIENT)
+    public float f(IBlockAccess var1, int var2, int var3, int var4)
+    {
+        return var1.j(var2, var3, var4, this.getLightValue(var1, var2, var3, var4));
+    }
+
+    @SideOnly(Side.CLIENT)
+    public int e(IBlockAccess var1, int var2, int var3, int var4)
+    {
+        return var1.i(var2, var3, var4, this.getLightValue(var1, var2, var3, var4));
+    }
+
+    @SideOnly(Side.CLIENT)
+    public boolean a(IBlockAccess var1, int var2, int var3, int var4, int var5)
+    {
+        return var5 == 0 && this.minY > 0.0D ? true : (var5 == 1 && this.maxY < 1.0D ? true : (var5 == 2 && this.minZ > 0.0D ? true : (var5 == 3 && this.maxZ < 1.0D ? true : (var5 == 4 && this.minX > 0.0D ? true : (var5 == 5 && this.maxX < 1.0D ? true : !var1.r(var2, var3, var4))))));
+    }
+
     /**
      * Returns Returns true if the given side of this block type should be rendered (if it's solid or not), if the
      * adjacent block is at the given coordinates. Args: blockAccess, x, y, z, side
@@ -454,6 +491,12 @@
         return var1.getMaterial(var2, var3, var4).isBuildable();
     }
 
+    @SideOnly(Side.CLIENT)
+    public int d(IBlockAccess var1, int var2, int var3, int var4, int var5)
+    {
+        return this.a(var5, var1.getData(var2, var3, var4));
+    }
+
     /**
      * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
      */
@@ -483,6 +526,12 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public AxisAlignedBB b_(World var1, int var2, int var3, int var4)
+    {
+        return AxisAlignedBB.a().a((double)var2 + this.minX, (double)var3 + this.minY, (double)var4 + this.minZ, (double)var2 + this.maxX, (double)var3 + this.maxY, (double)var4 + this.maxZ);
+    }
+
     /**
      * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been
      * cleared to be reused)
@@ -522,6 +571,9 @@
      */
     public void b(World var1, int var2, int var3, int var4, Random var5) {}
 
+    @SideOnly(Side.CLIENT)
+    public void a(World var1, int var2, int var3, int var4, Random var5) {}
+
     /**
      * Called right before the block is destroyed by a player.  Args: world, x, y, z, metaData
      */
@@ -573,8 +625,7 @@
      */
     public float getDamage(EntityHuman var1, World var2, int var3, int var4, int var5)
     {
-        float var6 = this.m(var2, var3, var4, var5);
-        return var6 < 0.0F ? 0.0F : (!var1.b(this) ? 1.0F / var6 / 100.0F : var1.a(this) / var6 / 30.0F);
+        return ForgeHooks.blockStrength(this, var1, var2, var3, var4, var5);
     }
 
     /**
@@ -592,22 +643,20 @@
     {
         if (!var1.isStatic)
         {
-            int var8 = this.getDropCount(var7, var1.random);
+            ArrayList var8 = this.getBlockDropped(var1, var2, var3, var4, var5, var7);
+            Iterator var9 = var8.iterator();
 
-            for (int var9 = 0; var9 < var8; ++var9)
+            while (var9.hasNext())
             {
+                ItemStack var10 = (ItemStack)var9.next();
+
                 if (var1.random.nextFloat() <= var6)
                 {
-                    int var10 = this.getDropType(var5, var1.random, var7);
-
-                    if (var10 > 0)
-                    {
-                        this.a(var1, var2, var3, var4, new ItemStack(var10, 1, this.getDropData(var5)));
+                    this.a(var1, var2, var3, var4, var10);
                     }
                 }
             }
         }
-    }
 
     /**
      * Spawns EntityItem in the world for the given ItemStack if the world is not remote.
@@ -807,6 +856,12 @@
      */
     public void wasExploded(World var1, int var2, int var3, int var4) {}
 
+    @SideOnly(Side.CLIENT)
+    public int n()
+    {
+        return 0;
+    }
+
     /**
      * checks to see if you can place this block can be placed on that side of a block: BlockLever overrides
      */
@@ -887,6 +942,24 @@
         return this.maxZ;
     }
 
+    @SideOnly(Side.CLIENT)
+    public int o()
+    {
+        return 16777215;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public int g_(int var1)
+    {
+        return 16777215;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public int b(IBlockAccess var1, int var2, int var3, int var4)
+    {
+        return 16777215;
+    }
+
     /**
      * Is this block powering the block on the specified side
      */
@@ -930,7 +1003,7 @@
         var2.a(StatisticList.C[this.id], 1);
         var2.j(0.025F);
 
-        if (this.s_() && EnchantmentManager.hasSilkTouchEnchantment(var2))
+        if (this.canSilkHarvest(var1, var2, var3, var4, var5, var6) && EnchantmentManager.hasSilkTouchEnchantment(var2))
         {
             ItemStack var8 = this.f_(var6);
 
@@ -1046,16 +1119,34 @@
         return this.material.getPushReaction();
     }
 
+    @SideOnly(Side.CLIENT)
+    public float j(IBlockAccess var1, int var2, int var3, int var4)
+    {
+        return var1.s(var2, var3, var4) ? 0.2F : 1.0F;
+    }
+
     /**
      * Block's chance to react to an entity falling on it.
      */
     public void a(World var1, int var2, int var3, int var4, Entity var5, float var6) {}
 
+    @SideOnly(Side.CLIENT)
+    public int a(World var1, int var2, int var3, int var4)
+    {
+        return this.id;
+    }
+
     public int func_71873_h(World var1, int var2, int var3, int var4)
     {
         return this.getDropData(var1.getData(var2, var3, var4));
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a(int var1, CreativeModeTab var2, List var3)
+    {
+        var3.add(new ItemStack(var1, 1, 0));
+    }
+
     /**
      * sets the CreativeTab to display this block on
      */
@@ -1070,6 +1161,12 @@
      */
     public void a(World var1, int var2, int var3, int var4, int var5, EntityHuman var6) {}
 
+    @SideOnly(Side.CLIENT)
+    public CreativeModeTab E()
+    {
+        return this.creativeTab;
+    }
+
     /**
      * Called when this block is set (with meta data).
      */
@@ -1080,11 +1177,340 @@
      */
     public void f(World var1, int var2, int var3, int var4) {}
 
+    @SideOnly(Side.CLIENT)
+    public boolean u_()
+    {
+        return false;
+    }
+
     public boolean func_82506_l()
     {
         return true;
     }
 
+    public int getLightValue(IBlockAccess var1, int var2, int var3, int var4)
+    {
+        return lightEmission[this.id];
+    }
+
+    public boolean isLadder(World var1, int var2, int var3, int var4)
+    {
+        return false;
+    }
+
+    public boolean isBlockNormalCube(World var1, int var2, int var3, int var4)
+    {
+        return this.material.k() && this.b();
+    }
+
+    public boolean isBlockSolidOnSide(World var1, int var2, int var3, int var4, ForgeDirection var5)
+    {
+        int var6 = var1.getData(var2, var3, var4);
+
+        if (this instanceof BlockStepAbstract)
+        {
+            return (var6 & 8) == 8 && var5 == ForgeDirection.UP || this.c();
+        }
+        else if (this instanceof BlockSoil)
+        {
+            return var5 != ForgeDirection.DOWN && var5 != ForgeDirection.UP;
+        }
+        else if (this instanceof BlockStairs)
+        {
+            boolean var7 = (var6 & 4) != 0;
+            return (var6 & 3) + var5.ordinal() == 5 || var5 == ForgeDirection.UP && var7;
+        }
+        else
+        {
+            return this.isBlockNormalCube(var1, var2, var3, var4);
+        }
+    }
+
+    public boolean isBlockReplaceable(World var1, int var2, int var3, int var4)
+    {
+        return false;
+    }
+
+    public boolean isBlockBurning(World var1, int var2, int var3, int var4)
+    {
+        return false;
+    }
+
+    public boolean isAirBlock(World var1, int var2, int var3, int var4)
+    {
+        return false;
+    }
+
+    public boolean canHarvestBlock(EntityHuman var1, int var2)
+    {
+        return ForgeHooks.canHarvestBlock(this, var1, var2);
+    }
+
+    public boolean removeBlockByPlayer(World var1, EntityHuman var2, int var3, int var4, int var5)
+    {
+        return var1.setTypeId(var3, var4, var5, 0);
+    }
+
+    public void addCreativeItems(ArrayList var1) {}
+
+    public int getFlammability(IBlockAccess var1, int var2, int var3, int var4, int var5, ForgeDirection var6)
+    {
+        return blockFlammability[this.id];
+    }
+
+    public boolean isFlammable(IBlockAccess var1, int var2, int var3, int var4, int var5, ForgeDirection var6)
+    {
+        return this.getFlammability(var1, var2, var3, var4, var5, var6) > 0;
+    }
+
+    public int getFireSpreadSpeed(World var1, int var2, int var3, int var4, int var5, ForgeDirection var6)
+    {
+        return blockFireSpreadSpeed[this.id];
+    }
+
+    public boolean isFireSource(World var1, int var2, int var3, int var4, int var5, ForgeDirection var6)
+    {
+        return this.id == NETHERRACK.id && var6 == ForgeDirection.UP ? true : var1.worldProvider instanceof WorldProviderTheEnd && this.id == BEDROCK.id && var6 == ForgeDirection.UP;
+    }
+
+    public static void setBurnProperties(int var0, int var1, int var2)
+    {
+        blockFireSpreadSpeed[var0] = var1;
+        blockFlammability[var0] = var2;
+    }
+
+    public boolean hasTileEntity(int var1)
+    {
+        return this.isTileEntity;
+    }
+
+    public TileEntity createTileEntity(World var1, int var2)
+    {
+        return this instanceof BlockContainer ? ((BlockContainer)this).createNewTileEntity(var1, var2) : null;
+    }
+
+    public int quantityDropped(int var1, int var2, Random var3)
+    {
+        return this.getDropCount(var2, var3);
+    }
+
+    public ArrayList getBlockDropped(World var1, int var2, int var3, int var4, int var5, int var6)
+    {
+        ArrayList var7 = new ArrayList();
+        int var8 = this.quantityDropped(var5, var6, var1.random);
+
+        for (int var9 = 0; var9 < var8; ++var9)
+        {
+            int var10 = this.getDropType(var5, var1.random, 0);
+
+            if (var10 > 0)
+            {
+                var7.add(new ItemStack(var10, 1, this.getDropData(var5)));
+            }
+        }
+
+        return var7;
+    }
+
+    public boolean canSilkHarvest(World var1, EntityHuman var2, int var3, int var4, int var5, int var6)
+    {
+        return !(this instanceof BlockGlass) && !(this instanceof BlockEnderChest) ? this.b() && !this.hasTileEntity(var6) : true;
+    }
+
+    public boolean canCreatureSpawn(EnumCreatureType var1, World var2, int var3, int var4, int var5)
+    {
+        int var6 = var2.getData(var3, var4, var5);
+        return this instanceof BlockStep ? (!MinecraftForge.SPAWNER_ALLOW_ON_INVERTED ? i(this.id) : (var6 & 8) == 8 || this.c()) : (this instanceof BlockStairs ? (MinecraftForge.SPAWNER_ALLOW_ON_INVERTED ? (var6 & 4) != 0 : i(this.id)) : this.isBlockSolidOnSide(var2, var3, var4, var5, ForgeDirection.UP));
+    }
+
+    public boolean isBed(World var1, int var2, int var3, int var4, EntityLiving var5)
+    {
+        return this.id == BED.id;
+    }
+
+    public ChunkCoordinates getBedSpawnPosition(World var1, int var2, int var3, int var4, EntityHuman var5)
+    {
+        return BlockBed.b(var1, var2, var3, var4, 0);
+    }
+
+    public void setBedOccupied(World var1, int var2, int var3, int var4, EntityHuman var5, boolean var6)
+    {
+        BlockBed.a(var1, var2, var3, var4, var6);
+    }
+
+    public int getBedDirection(IBlockAccess var1, int var2, int var3, int var4)
+    {
+        return BlockBed.e(var1.getData(var2, var3, var4));
+    }
+
+    public boolean isBedFoot(IBlockAccess var1, int var2, int var3, int var4)
+    {
+        return BlockBed.b_(var1.getData(var2, var3, var4));
+    }
+
+    public void beginLeavesDecay(World var1, int var2, int var3, int var4) {}
+
+    public boolean canSustainLeaves(World var1, int var2, int var3, int var4)
+    {
+        return false;
+    }
+
+    public boolean isLeaves(World var1, int var2, int var3, int var4)
+    {
+        return false;
+    }
+
+    public boolean canBeReplacedByLeaves(World var1, int var2, int var3, int var4)
+    {
+        return !q[this.id];
+    }
+
+    public boolean isWood(World var1, int var2, int var3, int var4)
+    {
+        return false;
+    }
+
+    public boolean isGenMineableReplaceable(World var1, int var2, int var3, int var4)
+    {
+        return this.id == STONE.id;
+    }
+
+    public String getTextureFile()
+    {
+        return this.currentTexture;
+    }
+
+    public void setTextureFile(String var1)
+    {
+        this.currentTexture = var1;
+        this.isDefaultTexture = false;
+    }
+
+    public float getExplosionResistance(Entity var1, World var2, int var3, int var4, int var5, double var6, double var8, double var10)
+    {
+        return this.a(var1);
+    }
+
+    public boolean canConnectRedstone(IBlockAccess var1, int var2, int var3, int var4, int var5)
+    {
+        return byId[this.id].isPowerSource() && var5 != -1;
+    }
+
+    public boolean canPlaceTorchOnTop(World var1, int var2, int var3, int var4)
+    {
+        if (var1.t(var2, var3, var4))
+        {
+            return true;
+        }
+        else
+        {
+            int var5 = var1.getTypeId(var2, var3, var4);
+            return var5 == FENCE.id || var5 == NETHER_FENCE.id || var5 == GLASS.id || var5 == COBBLE_WALL.id;
+        }
+    }
+
+    public boolean canRenderInPass(int var1)
+    {
+        return var1 == this.n();
+    }
+
+    public ItemStack getPickBlock(MovingObjectPosition var1, World var2, int var3, int var4, int var5)
+    {
+        int var6 = this.a(var2, var3, var4, var5);
+
+        if (var6 == 0)
+        {
+            return null;
+        }
+        else
+        {
+            Item var7 = Item.byId[var6];
+            return var7 == null ? null : new ItemStack(var6, 1, this.func_71873_h(var2, var3, var4, var5));
+        }
+    }
+
+    public boolean isBlockFoliage(World var1, int var2, int var3, int var4)
+    {
+        return false;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public boolean addBlockHitEffects(World var1, MovingObjectPosition var2, axx var3)
+    {
+        return false;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public boolean addBlockDestroyEffects(World var1, int var2, int var3, int var4, int var5, axx var6)
+    {
+        return false;
+    }
+
+    public boolean canSustainPlant(World var1, int var2, int var3, int var4, ForgeDirection var5, IPlantable var6)
+    {
+        int var7 = var6.getPlantID(var1, var2, var3 + 1, var4);
+        EnumPlantType var8 = var6.getPlantType(var1, var2, var3 + 1, var4);
+
+        if (var7 == CACTUS.id && this.id == CACTUS.id)
+        {
+            return true;
+        }
+        else if (var7 == SUGAR_CANE_BLOCK.id && this.id == SUGAR_CANE_BLOCK.id)
+        {
+            return true;
+        }
+        else if (var6 instanceof BlockFlower && ((BlockFlower)var6).d_(this.id))
+        {
+            return true;
+        }
+        else
+        {
+            switch (Block$1.$SwitchMap$net$minecraftforge$common$EnumPlantType[var8.ordinal()])
+            {
+                case 1:
+                    return this.id == SAND.id;
+
+                case 2:
+                    return this.id == SOUL_SAND.id;
+
+                case 3:
+                    return this.id == SOIL.id;
+
+                case 4:
+                    return this.isBlockSolidOnSide(var1, var2, var3, var4, ForgeDirection.UP);
+
+                case 5:
+                    return this.id == GRASS.id || this.id == DIRT.id;
+
+                case 6:
+                    return var1.getMaterial(var2, var3, var4) == Material.WATER && var1.getData(var2, var3, var4) == 0;
+
+                case 7:
+                    boolean var9 = this.id == GRASS.id || this.id == DIRT.id || this.id == SAND.id;
+                    boolean var10 = var1.getMaterial(var2 - 1, var3 - 1, var4) == Material.WATER || var1.getMaterial(var2 + 1, var3 - 1, var4) == Material.WATER || var1.getMaterial(var2, var3 - 1, var4 - 1) == Material.WATER || var1.getMaterial(var2, var3 - 1, var4 + 1) == Material.WATER;
+                    return var9 && var10;
+
+                default:
+                    return false;
+            }
+        }
+    }
+
+    public boolean isFertile(World var1, int var2, int var3, int var4)
+    {
+        return this.id == SOIL.id ? var1.getData(var2, var3, var4) > 0 : false;
+    }
+
+    public int getLightOpacity(World var1, int var2, int var3, int var4)
+    {
+        return lightBlock[this.id];
+    }
+
+    public boolean canDragonDestroy(World var1, int var2, int var3, int var4)
+    {
+        return this.id != OBSIDIAN.id && this.id != WHITESTONE.id && this.id != BEDROCK.id;
+    }
+
     static
     {
         Item.byId[WOOL.id] = (new ItemCloth(WOOL.id - 256)).b("cloth");
Index: BlockButton.java
===================================================================
--- BlockButton.java	(revision 3)
+++ BlockButton.java	(working copy)
@@ -2,6 +2,7 @@
 
 import java.util.List;
 import java.util.Random;
+import net.minecraftforge.common.ForgeDirection;
 
 public class BlockButton extends Block
 {
@@ -55,7 +56,8 @@
      */
     public boolean canPlace(World var1, int var2, int var3, int var4, int var5)
     {
-        return var5 == 2 && var1.s(var2, var3, var4 + 1) ? true : (var5 == 3 && var1.s(var2, var3, var4 - 1) ? true : (var5 == 4 && var1.s(var2 + 1, var3, var4) ? true : var5 == 5 && var1.s(var2 - 1, var3, var4)));
+        ForgeDirection var6 = ForgeDirection.getOrientation(var5);
+        return var6 == ForgeDirection.NORTH && var1.isBlockSolidOnSide(var2, var3, var4 + 1, ForgeDirection.NORTH) || var6 == ForgeDirection.SOUTH && var1.isBlockSolidOnSide(var2, var3, var4 - 1, ForgeDirection.SOUTH) || var6 == ForgeDirection.WEST && var1.isBlockSolidOnSide(var2 + 1, var3, var4, ForgeDirection.WEST) || var6 == ForgeDirection.EAST && var1.isBlockSolidOnSide(var2 - 1, var3, var4, ForgeDirection.EAST);
     }
 
     /**
@@ -63,7 +65,7 @@
      */
     public boolean canPlace(World var1, int var2, int var3, int var4)
     {
-        return var1.s(var2 - 1, var3, var4) ? true : (var1.s(var2 + 1, var3, var4) ? true : (var1.s(var2, var3, var4 - 1) ? true : var1.s(var2, var3, var4 + 1)));
+        return var1.isBlockSolidOnSide(var2 - 1, var3, var4, ForgeDirection.EAST) || var1.isBlockSolidOnSide(var2 + 1, var3, var4, ForgeDirection.WEST) || var1.isBlockSolidOnSide(var2, var3, var4 - 1, ForgeDirection.SOUTH) || var1.isBlockSolidOnSide(var2, var3, var4 + 1, ForgeDirection.NORTH);
     }
 
     /**
@@ -74,20 +76,21 @@
         int var9 = var1.getData(var2, var3, var4);
         int var10 = var9 & 8;
         var9 &= 7;
+        ForgeDirection var11 = ForgeDirection.getOrientation(var5);
 
-        if (var5 == 2 && var1.s(var2, var3, var4 + 1))
+        if (var11 == ForgeDirection.NORTH && var1.isBlockSolidOnSide(var2, var3, var4 + 1, ForgeDirection.NORTH))
         {
             var9 = 4;
         }
-        else if (var5 == 3 && var1.s(var2, var3, var4 - 1))
+        else if (var11 == ForgeDirection.SOUTH && var1.isBlockSolidOnSide(var2, var3, var4 - 1, ForgeDirection.SOUTH))
         {
             var9 = 3;
         }
-        else if (var5 == 4 && var1.s(var2 + 1, var3, var4))
+        else if (var11 == ForgeDirection.WEST && var1.isBlockSolidOnSide(var2 + 1, var3, var4, ForgeDirection.WEST))
         {
             var9 = 2;
         }
-        else if (var5 == 5 && var1.s(var2 - 1, var3, var4))
+        else if (var11 == ForgeDirection.EAST && var1.isBlockSolidOnSide(var2 - 1, var3, var4, ForgeDirection.EAST))
         {
             var9 = 1;
         }
@@ -104,7 +107,7 @@
      */
     private int l(World var1, int var2, int var3, int var4)
     {
-        return var1.s(var2 - 1, var3, var4) ? 1 : (var1.s(var2 + 1, var3, var4) ? 2 : (var1.s(var2, var3, var4 - 1) ? 3 : (var1.s(var2, var3, var4 + 1) ? 4 : 1)));
+        return var1.isBlockSolidOnSide(var2 - 1, var3, var4, ForgeDirection.EAST) ? 1 : (var1.isBlockSolidOnSide(var2 + 1, var3, var4, ForgeDirection.WEST) ? 2 : (var1.isBlockSolidOnSide(var2, var3, var4 - 1, ForgeDirection.SOUTH) ? 3 : (var1.isBlockSolidOnSide(var2, var3, var4 + 1, ForgeDirection.NORTH) ? 4 : 1)));
     }
 
     /**
@@ -118,22 +121,22 @@
             int var6 = var1.getData(var2, var3, var4) & 7;
             boolean var7 = false;
 
-            if (!var1.s(var2 - 1, var3, var4) && var6 == 1)
+            if (!var1.isBlockSolidOnSide(var2 - 1, var3, var4, ForgeDirection.EAST) && var6 == 1)
             {
                 var7 = true;
             }
 
-            if (!var1.s(var2 + 1, var3, var4) && var6 == 2)
+            if (!var1.isBlockSolidOnSide(var2 + 1, var3, var4, ForgeDirection.WEST) && var6 == 2)
             {
                 var7 = true;
             }
 
-            if (!var1.s(var2, var3, var4 - 1) && var6 == 3)
+            if (!var1.isBlockSolidOnSide(var2, var3, var4 - 1, ForgeDirection.SOUTH) && var6 == 3)
             {
                 var7 = true;
             }
 
-            if (!var1.s(var2, var3, var4 + 1) && var6 == 4)
+            if (!var1.isBlockSolidOnSide(var2, var3, var4 + 1, ForgeDirection.NORTH) && var6 == 4)
             {
                 var7 = true;
             }
@@ -324,17 +327,11 @@
      */
     public void a(World var1, int var2, int var3, int var4, Entity var5)
     {
-        if (!var1.isStatic)
+        if (!var1.isStatic && this.a && (var1.getData(var2, var3, var4) & 8) == 0)
         {
-            if (this.a)
-            {
-                if ((var1.getData(var2, var3, var4) & 8) == 0)
-                {
                     this.func_82535_o(var1, var2, var3, var4);
                 }
             }
-        }
-    }
 
     private void func_82535_o(World var1, int var2, int var3, int var4)
     {
@@ -342,10 +339,10 @@
         int var6 = var5 & 7;
         boolean var7 = (var5 & 8) != 0;
         this.func_82534_e(var5);
-        List var9 = var1.a(EntityArrow.class, AxisAlignedBB.a().a((double)var2 + this.minX, (double)var3 + this.minY, (double)var4 + this.minZ, (double)var2 + this.maxX, (double)var3 + this.maxY, (double)var4 + this.maxZ));
-        boolean var8 = !var9.isEmpty();
+        List var8 = var1.a(EntityArrow.class, AxisAlignedBB.a().a((double)var2 + this.minX, (double)var3 + this.minY, (double)var4 + this.minZ, (double)var2 + this.maxX, (double)var3 + this.maxY, (double)var4 + this.maxZ));
+        boolean var9 = !var8.isEmpty();
 
-        if (var8 && !var7)
+        if (var9 && !var7)
         {
             var1.setData(var2, var3, var4, var6 | 8);
             this.func_82536_d(var1, var2, var3, var4, var6);
@@ -353,7 +350,7 @@
             var1.makeSound((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.6F);
         }
 
-        if (!var8 && var7)
+        if (!var9 && var7)
         {
             var1.setData(var2, var3, var4, var6);
             this.func_82536_d(var1, var2, var3, var4, var6);
@@ -361,7 +358,7 @@
             var1.makeSound((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.5F);
         }
 
-        if (var8)
+        if (var9)
         {
             var1.a(var2, var3, var4, this.id, this.r_());
         }
Index: BlockCactus.java
===================================================================
--- BlockCactus.java	(revision 3)
+++ BlockCactus.java	(working copy)
@@ -1,8 +1,13 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.Random;
+import net.minecraftforge.common.EnumPlantType;
+import net.minecraftforge.common.ForgeDirection;
+import net.minecraftforge.common.IPlantable;
 
-public class BlockCactus extends Block
+public class BlockCactus extends Block implements IPlantable
 {
     protected BlockCactus(int var1, int var2)
     {
@@ -52,6 +57,13 @@
         return AxisAlignedBB.a().a((double)((float)var2 + var5), (double)var3, (double)((float)var4 + var5), (double)((float)(var2 + 1) - var5), (double)((float)(var3 + 1) - var5), (double)((float)(var4 + 1) - var5));
     }
 
+    @SideOnly(Side.CLIENT)
+    public AxisAlignedBB b_(World var1, int var2, int var3, int var4)
+    {
+        float var5 = 0.0625F;
+        return AxisAlignedBB.a().a((double)((float)var2 + var5), (double)var3, (double)((float)var4 + var5), (double)((float)(var2 + 1) - var5), (double)(var3 + 1), (double)((float)(var4 + 1) - var5));
+    }
+
     /**
      * Returns the block texture based on the side being looked at.  Args: side
      */
@@ -130,7 +142,7 @@
         else
         {
             int var5 = var1.getTypeId(var2, var3 - 1, var4);
-            return var5 == Block.CACTUS.id || var5 == Block.SAND.id;
+            return byId[var5] != null && byId[var5].canSustainPlant(var1, var2, var3 - 1, var4, ForgeDirection.UP, this);
         }
     }
 
@@ -141,4 +153,19 @@
     {
         var5.damageEntity(DamageSource.CACTUS, 1);
     }
+
+    public EnumPlantType getPlantType(World var1, int var2, int var3, int var4)
+    {
+        return EnumPlantType.Desert;
 }
+
+    public int getPlantID(World var1, int var2, int var3, int var4)
+    {
+        return this.id;
+    }
+
+    public int getPlantMetadata(World var1, int var2, int var3, int var4)
+    {
+        return -1;
+    }
+}
Index: BlockCrops.java
===================================================================
--- BlockCrops.java	(revision 3)
+++ BlockCrops.java	(working copy)
@@ -1,6 +1,10 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import java.util.ArrayList;
 import java.util.Random;
+import net.minecraftforge.common.ForgeDirection;
 
 public class BlockCrops extends BlockFlower
 {
@@ -86,11 +90,11 @@
                 int var19 = var1.getTypeId(var17, var3 - 1, var18);
                 float var20 = 0.0F;
 
-                if (var19 == Block.SOIL.id)
+                if (byId[var19] != null && byId[var19].canSustainPlant(var1, var17, var3 - 1, var18, ForgeDirection.UP, this))
                 {
                     var20 = 1.0F;
 
-                    if (var1.getData(var17, var3 - 1, var18) > 0)
+                    if (byId[var19].isFertile(var1, var17, var3 - 1, var18))
                     {
                         var20 = 3.0F;
                     }
@@ -156,24 +160,42 @@
     public void dropNaturally(World var1, int var2, int var3, int var4, int var5, float var6, int var7)
     {
         super.dropNaturally(var1, var2, var3, var4, var5, var6, 0);
+    }
 
-        if (!var1.isStatic)
+    public ArrayList getBlockDropped(World var1, int var2, int var3, int var4, int var5, int var6)
         {
-            if (var5 >= 7)
+        ArrayList var7 = new ArrayList();
+        int var8;
+
+        if (var5 == 7)
             {
-                int var8 = 3 + var7;
+            var8 = this.quantityDropped(var5, var6, var1.random);
 
                 for (int var9 = 0; var9 < var8; ++var9)
                 {
-                    if (var1.random.nextInt(15) <= var5)
+                int var10 = this.getDropType(var5, var1.random, 0);
+
+                if (var10 > 0)
                     {
-                        this.a(var1, var2, var3, var4, new ItemStack(this.h(), 1, 0));
+                    var7.add(new ItemStack(var10, 1, this.getDropData(var5)));
                     }
                 }
             }
+
+        if (var5 >= 7)
+        {
+            for (var8 = 0; var8 < 3 + var6; ++var8)
+            {
+                if (var1.random.nextInt(15) <= var5)
+                {
+                    var7.add(new ItemStack(this.h(), 1, 0));
         }
     }
+        }
 
+        return var7;
+    }
+
     /**
      * Returns the ID of the items to drop on destruction.
      */
@@ -189,4 +211,10 @@
     {
         return 1;
     }
+
+    @SideOnly(Side.CLIENT)
+    public int a(World var1, int var2, int var3, int var4)
+    {
+        return this.h();
 }
+}
Index: BlockDispenser.java
===================================================================
--- BlockDispenser.java	(revision 3)
+++ BlockDispenser.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.Random;
 
 public class BlockDispenser extends BlockContainer
@@ -78,6 +80,24 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public int d(IBlockAccess var1, int var2, int var3, int var4, int var5)
+    {
+        if (var5 == 1)
+        {
+            return this.textureId + 17;
+        }
+        else if (var5 == 0)
+        {
+            return this.textureId + 17;
+        }
+        else
+        {
+            int var6 = var1.getData(var2, var3, var4);
+            return var5 == var6 ? this.textureId + 1 : this.textureId;
+        }
+    }
+
     /**
      * Returns the block texture based on the side being looked at.  Args: side
      */
Index: BlockDoor.java
===================================================================
--- BlockDoor.java	(revision 3)
+++ BlockDoor.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.Random;
 
 public class BlockDoor extends Block
@@ -19,6 +21,74 @@
         this.a(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var4, 0.5F + var3);
     }
 
+    @SideOnly(Side.CLIENT)
+    public int d(IBlockAccess var1, int var2, int var3, int var4, int var5)
+    {
+        if (var5 != 0 && var5 != 1)
+        {
+            int var6 = this.b_(var1, var2, var3, var4);
+            int var7 = this.textureId;
+
+            if ((var6 & 8) != 0)
+            {
+                var7 -= 16;
+            }
+
+            int var8 = var6 & 3;
+            boolean var9 = (var6 & 4) != 0;
+
+            if (var9)
+            {
+                if (var8 == 0 && var5 == 2)
+                {
+                    var7 = -var7;
+                }
+                else if (var8 == 1 && var5 == 5)
+                {
+                    var7 = -var7;
+                }
+                else if (var8 == 2 && var5 == 3)
+                {
+                    var7 = -var7;
+                }
+                else if (var8 == 3 && var5 == 4)
+                {
+                    var7 = -var7;
+                }
+            }
+            else
+            {
+                if (var8 == 0 && var5 == 5)
+                {
+                    var7 = -var7;
+                }
+                else if (var8 == 1 && var5 == 3)
+                {
+                    var7 = -var7;
+                }
+                else if (var8 == 2 && var5 == 4)
+                {
+                    var7 = -var7;
+                }
+                else if (var8 == 3 && var5 == 2)
+                {
+                    var7 = -var7;
+                }
+
+                if ((var6 & 16) != 0)
+                {
+                    var7 = -var7;
+                }
+            }
+
+            return var7;
+        }
+        else
+        {
+            return this.textureId;
+        }
+    }
+
     /**
      * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
      * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
@@ -50,6 +120,13 @@
         return 7;
     }
 
+    @SideOnly(Side.CLIENT)
+    public AxisAlignedBB b_(World var1, int var2, int var3, int var4)
+    {
+        this.updateShape(var1, var2, var3, var4);
+        return super.b_(var1, var2, var3, var4);
+    }
+
     /**
      * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been
      * cleared to be reused)
@@ -175,7 +252,7 @@
     {
         if (this.material == Material.ORE)
         {
-            return true;
+            return false;
         }
         else
         {
@@ -346,4 +423,10 @@
         boolean var9 = (var8 & 1) != 0;
         return var7 & 7 | (var6 ? 8 : 0) | (var9 ? 16 : 0);
     }
+
+    @SideOnly(Side.CLIENT)
+    public int a(World var1, int var2, int var3, int var4)
+    {
+        return this.material == Material.ORE ? Item.IRON_DOOR.id : Item.WOOD_DOOR.id;
 }
+}
Index: BlockFire.java
===================================================================
--- BlockFire.java	(revision 3)
+++ BlockFire.java	(working copy)
@@ -1,6 +1,9 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.Random;
+import net.minecraftforge.common.ForgeDirection;
 
 public class BlockFire extends Block
 {
@@ -25,6 +28,8 @@
      */
     public void t_()
     {
+        this.b = Block.blockFlammability;
+        this.a = Block.blockFireSpreadSpeed;
         this.a(Block.WOOD.id, 5, 20);
         this.a(Block.WOOD_DOUBLE_STEP.id, 5, 20);
         this.a(Block.WOOD_STEP.id, 5, 20);
@@ -49,8 +54,7 @@
      */
     private void a(int var1, int var2, int var3)
     {
-        this.a[var1] = var2;
-        this.b[var1] = var3;
+        Block.setBurnProperties(var1, var2, var3);
     }
 
     /**
@@ -110,97 +114,93 @@
     {
         if (var1.getGameRules().getBoolean("doFireTick"))
         {
-            boolean var6 = var1.getTypeId(var2, var3 - 1, var4) == Block.NETHERRACK.id;
+            Block var6 = Block.byId[var1.getTypeId(var2, var3 - 1, var4)];
+            boolean var7 = var6 != null && var6.isFireSource(var1, var2, var3 - 1, var4, var1.getData(var2, var3 - 1, var4), ForgeDirection.UP);
 
-            if (var1.worldProvider instanceof WorldProviderTheEnd && var1.getTypeId(var2, var3 - 1, var4) == Block.BEDROCK.id)
-            {
-                var6 = true;
-            }
-
             if (!this.canPlace(var1, var2, var3, var4))
             {
                 var1.setTypeId(var2, var3, var4, 0);
             }
 
-            if (!var6 && var1.M() && (var1.B(var2, var3, var4) || var1.B(var2 - 1, var3, var4) || var1.B(var2 + 1, var3, var4) || var1.B(var2, var3, var4 - 1) || var1.B(var2, var3, var4 + 1)))
+            if (!var7 && var1.M() && (var1.B(var2, var3, var4) || var1.B(var2 - 1, var3, var4) || var1.B(var2 + 1, var3, var4) || var1.B(var2, var3, var4 - 1) || var1.B(var2, var3, var4 + 1)))
             {
                 var1.setTypeId(var2, var3, var4, 0);
             }
             else
             {
-                int var7 = var1.getData(var2, var3, var4);
+                int var8 = var1.getData(var2, var3, var4);
 
-                if (var7 < 15)
+                if (var8 < 15)
                 {
-                    var1.setRawData(var2, var3, var4, var7 + var5.nextInt(3) / 2);
+                    var1.setRawData(var2, var3, var4, var8 + var5.nextInt(3) / 2);
                 }
 
                 var1.a(var2, var3, var4, this.id, this.r_() + var5.nextInt(10));
 
-                if (!var6 && !this.l(var1, var2, var3, var4))
+                if (!var7 && !this.l(var1, var2, var3, var4))
                 {
-                    if (!var1.t(var2, var3 - 1, var4) || var7 > 3)
+                    if (!var1.t(var2, var3 - 1, var4) || var8 > 3)
                     {
                         var1.setTypeId(var2, var3, var4, 0);
                     }
                 }
-                else if (!var6 && !this.d(var1, var2, var3 - 1, var4) && var7 == 15 && var5.nextInt(4) == 0)
+                else if (!var7 && !this.canBlockCatchFire(var1, var2, var3 - 1, var4, ForgeDirection.UP) && var8 == 15 && var5.nextInt(4) == 0)
                 {
                     var1.setTypeId(var2, var3, var4, 0);
                 }
                 else
                 {
-                    boolean var8 = var1.C(var2, var3, var4);
-                    byte var9 = 0;
+                    boolean var9 = var1.C(var2, var3, var4);
+                    byte var10 = 0;
 
-                    if (var8)
+                    if (var9)
                     {
-                        var9 = -50;
+                        var10 = -50;
                     }
 
-                    this.a(var1, var2 + 1, var3, var4, 300 + var9, var5, var7);
-                    this.a(var1, var2 - 1, var3, var4, 300 + var9, var5, var7);
-                    this.a(var1, var2, var3 - 1, var4, 250 + var9, var5, var7);
-                    this.a(var1, var2, var3 + 1, var4, 250 + var9, var5, var7);
-                    this.a(var1, var2, var3, var4 - 1, 300 + var9, var5, var7);
-                    this.a(var1, var2, var3, var4 + 1, 300 + var9, var5, var7);
+                    this.tryToCatchBlockOnFire(var1, var2 + 1, var3, var4, 300 + var10, var5, var8, ForgeDirection.WEST);
+                    this.tryToCatchBlockOnFire(var1, var2 - 1, var3, var4, 300 + var10, var5, var8, ForgeDirection.EAST);
+                    this.tryToCatchBlockOnFire(var1, var2, var3 - 1, var4, 250 + var10, var5, var8, ForgeDirection.UP);
+                    this.tryToCatchBlockOnFire(var1, var2, var3 + 1, var4, 250 + var10, var5, var8, ForgeDirection.DOWN);
+                    this.tryToCatchBlockOnFire(var1, var2, var3, var4 - 1, 300 + var10, var5, var8, ForgeDirection.SOUTH);
+                    this.tryToCatchBlockOnFire(var1, var2, var3, var4 + 1, 300 + var10, var5, var8, ForgeDirection.NORTH);
 
-                    for (int var10 = var2 - 1; var10 <= var2 + 1; ++var10)
+                    for (int var11 = var2 - 1; var11 <= var2 + 1; ++var11)
                     {
-                        for (int var11 = var4 - 1; var11 <= var4 + 1; ++var11)
+                        for (int var12 = var4 - 1; var12 <= var4 + 1; ++var12)
                         {
-                            for (int var12 = var3 - 1; var12 <= var3 + 4; ++var12)
+                            for (int var13 = var3 - 1; var13 <= var3 + 4; ++var13)
                             {
-                                if (var10 != var2 || var12 != var3 || var11 != var4)
+                                if (var11 != var2 || var13 != var3 || var12 != var4)
                                 {
-                                    int var13 = 100;
+                                    int var14 = 100;
 
-                                    if (var12 > var3 + 1)
+                                    if (var13 > var3 + 1)
                                     {
-                                        var13 += (var12 - (var3 + 1)) * 100;
+                                        var14 += (var13 - (var3 + 1)) * 100;
                                     }
 
-                                    int var14 = this.n(var1, var10, var12, var11);
+                                    int var15 = this.n(var1, var11, var13, var12);
 
-                                    if (var14 > 0)
+                                    if (var15 > 0)
                                     {
-                                        int var15 = (var14 + 40 + var1.difficulty * 7) / (var7 + 30);
+                                        int var16 = (var15 + 40 + var1.difficulty * 7) / (var8 + 30);
 
-                                        if (var8)
+                                        if (var9)
                                         {
-                                            var15 /= 2;
+                                            var16 /= 2;
                                         }
 
-                                        if (var15 > 0 && var5.nextInt(var13) <= var15 && (!var1.M() || !var1.B(var10, var12, var11)) && !var1.B(var10 - 1, var12, var4) && !var1.B(var10 + 1, var12, var11) && !var1.B(var10, var12, var11 - 1) && !var1.B(var10, var12, var11 + 1))
+                                        if (var16 > 0 && var5.nextInt(var14) <= var16 && (!var1.M() || !var1.B(var11, var13, var12)) && !var1.B(var11 - 1, var13, var4) && !var1.B(var11 + 1, var13, var12) && !var1.B(var11, var13, var12 - 1) && !var1.B(var11, var13, var12 + 1))
                                         {
-                                            int var16 = var7 + var5.nextInt(5) / 4;
+                                            int var17 = var8 + var5.nextInt(5) / 4;
 
-                                            if (var16 > 15)
+                                            if (var17 > 15)
                                             {
-                                                var16 = 15;
+                                                var17 = 15;
                                             }
 
-                                            var1.setTypeIdAndData(var10, var12, var11, this.id, var16);
+                                            var1.setTypeIdAndData(var11, var13, var12, this.id, var17);
                                         }
                                     }
                                 }
@@ -217,31 +217,43 @@
         return false;
     }
 
+    @Deprecated
     private void a(World var1, int var2, int var3, int var4, int var5, Random var6, int var7)
     {
-        int var8 = this.b[var1.getTypeId(var2, var3, var4)];
+        this.tryToCatchBlockOnFire(var1, var2, var3, var4, var5, var6, var7, ForgeDirection.UP);
+    }
 
-        if (var6.nextInt(var5) < var8)
+    private void tryToCatchBlockOnFire(World var1, int var2, int var3, int var4, int var5, Random var6, int var7, ForgeDirection var8)
         {
-            boolean var9 = var1.getTypeId(var2, var3, var4) == Block.TNT.id;
+        int var9 = 0;
+        Block var10 = Block.byId[var1.getTypeId(var2, var3, var4)];
 
+        if (var10 != null)
+        {
+            var9 = var10.getFlammability(var1, var2, var3, var4, var1.getData(var2, var3, var4), var8);
+        }
+
+        if (var6.nextInt(var5) < var9)
+        {
+            boolean var11 = var1.getTypeId(var2, var3, var4) == Block.TNT.id;
+
             if (var6.nextInt(var7 + 10) < 5 && !var1.B(var2, var3, var4))
             {
-                int var10 = var7 + var6.nextInt(5) / 4;
+                int var12 = var7 + var6.nextInt(5) / 4;
 
-                if (var10 > 15)
+                if (var12 > 15)
                 {
-                    var10 = 15;
+                    var12 = 15;
                 }
 
-                var1.setTypeIdAndData(var2, var3, var4, this.id, var10);
+                var1.setTypeIdAndData(var2, var3, var4, this.id, var12);
             }
             else
             {
                 var1.setTypeId(var2, var3, var4, 0);
             }
 
-            if (var9)
+            if (var11)
             {
                 Block.TNT.postBreak(var1, var2, var3, var4, 1);
             }
@@ -253,7 +265,7 @@
      */
     private boolean l(World var1, int var2, int var3, int var4)
     {
-        return this.d(var1, var2 + 1, var3, var4) ? true : (this.d(var1, var2 - 1, var3, var4) ? true : (this.d(var1, var2, var3 - 1, var4) ? true : (this.d(var1, var2, var3 + 1, var4) ? true : (this.d(var1, var2, var3, var4 - 1) ? true : this.d(var1, var2, var3, var4 + 1)))));
+        return this.canBlockCatchFire(var1, var2 + 1, var3, var4, ForgeDirection.WEST) || this.canBlockCatchFire(var1, var2 - 1, var3, var4, ForgeDirection.EAST) || this.canBlockCatchFire(var1, var2, var3 - 1, var4, ForgeDirection.UP) || this.canBlockCatchFire(var1, var2, var3 + 1, var4, ForgeDirection.DOWN) || this.canBlockCatchFire(var1, var2, var3, var4 - 1, ForgeDirection.SOUTH) || this.canBlockCatchFire(var1, var2, var3, var4 + 1, ForgeDirection.NORTH);
     }
 
     /**
@@ -269,12 +281,12 @@
         }
         else
         {
-            int var6 = this.d(var1, var2 + 1, var3, var4, var5);
-            var6 = this.d(var1, var2 - 1, var3, var4, var6);
-            var6 = this.d(var1, var2, var3 - 1, var4, var6);
-            var6 = this.d(var1, var2, var3 + 1, var4, var6);
-            var6 = this.d(var1, var2, var3, var4 - 1, var6);
-            var6 = this.d(var1, var2, var3, var4 + 1, var6);
+            int var6 = this.getChanceToEncourageFire(var1, var2 + 1, var3, var4, var5, ForgeDirection.WEST);
+            var6 = this.getChanceToEncourageFire(var1, var2 - 1, var3, var4, var6, ForgeDirection.EAST);
+            var6 = this.getChanceToEncourageFire(var1, var2, var3 - 1, var4, var6, ForgeDirection.UP);
+            var6 = this.getChanceToEncourageFire(var1, var2, var3 + 1, var4, var6, ForgeDirection.DOWN);
+            var6 = this.getChanceToEncourageFire(var1, var2, var3, var4 - 1, var6, ForgeDirection.SOUTH);
+            var6 = this.getChanceToEncourageFire(var1, var2, var3, var4 + 1, var6, ForgeDirection.NORTH);
             return var6;
         }
     }
@@ -287,14 +299,18 @@
         return false;
     }
 
+    @Deprecated
+
     /**
      * Checks the specified block coordinate to see if it can catch fire.  Args: blockAccess, x, y, z
      */
     public boolean d(IBlockAccess var1, int var2, int var3, int var4)
     {
-        return this.a[var1.getTypeId(var2, var3, var4)] > 0;
+        return this.canBlockCatchFire(var1, var2, var3, var4, ForgeDirection.UP);
     }
 
+    @Deprecated
+
     /**
      * Retrieves a specified block's chance to encourage their neighbors to burn and if the number is greater than the
      * current number passed in it will return its number instead of the passed in one.  Args: world, x, y, z,
@@ -302,8 +318,7 @@
      */
     public int d(World var1, int var2, int var3, int var4, int var5)
     {
-        int var6 = this.a[var1.getTypeId(var2, var3, var4)];
-        return var6 > var5 ? var6 : var5;
+        return this.getChanceToEncourageFire(var1, var2, var3, var4, var5, ForgeDirection.UP);
     }
 
     /**
@@ -343,4 +358,105 @@
             }
         }
     }
+
+    @SideOnly(Side.CLIENT)
+    public void a(World var1, int var2, int var3, int var4, Random var5)
+    {
+        if (var5.nextInt(24) == 0)
+        {
+            var1.func_72980_b((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "fire.fire", 1.0F + var5.nextFloat(), var5.nextFloat() * 0.7F + 0.3F);
 }
+
+        int var6;
+        float var7;
+        float var8;
+        float var9;
+
+        if (!var1.t(var2, var3 - 1, var4) && !Block.FIRE.canBlockCatchFire(var1, var2, var3 - 1, var4, ForgeDirection.UP))
+        {
+            if (Block.FIRE.canBlockCatchFire(var1, var2 - 1, var3, var4, ForgeDirection.EAST))
+            {
+                for (var6 = 0; var6 < 2; ++var6)
+                {
+                    var7 = (float)var2 + var5.nextFloat() * 0.1F;
+                    var8 = (float)var3 + var5.nextFloat();
+                    var9 = (float)var4 + var5.nextFloat();
+                    var1.addParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+                }
+            }
+
+            if (Block.FIRE.canBlockCatchFire(var1, var2 + 1, var3, var4, ForgeDirection.WEST))
+            {
+                for (var6 = 0; var6 < 2; ++var6)
+                {
+                    var7 = (float)(var2 + 1) - var5.nextFloat() * 0.1F;
+                    var8 = (float)var3 + var5.nextFloat();
+                    var9 = (float)var4 + var5.nextFloat();
+                    var1.addParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+                }
+            }
+
+            if (Block.FIRE.canBlockCatchFire(var1, var2, var3, var4 - 1, ForgeDirection.SOUTH))
+            {
+                for (var6 = 0; var6 < 2; ++var6)
+                {
+                    var7 = (float)var2 + var5.nextFloat();
+                    var8 = (float)var3 + var5.nextFloat();
+                    var9 = (float)var4 + var5.nextFloat() * 0.1F;
+                    var1.addParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+                }
+            }
+
+            if (Block.FIRE.canBlockCatchFire(var1, var2, var3, var4 + 1, ForgeDirection.NORTH))
+            {
+                for (var6 = 0; var6 < 2; ++var6)
+                {
+                    var7 = (float)var2 + var5.nextFloat();
+                    var8 = (float)var3 + var5.nextFloat();
+                    var9 = (float)(var4 + 1) - var5.nextFloat() * 0.1F;
+                    var1.addParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+                }
+            }
+
+            if (Block.FIRE.canBlockCatchFire(var1, var2, var3 + 1, var4, ForgeDirection.DOWN))
+            {
+                for (var6 = 0; var6 < 2; ++var6)
+                {
+                    var7 = (float)var2 + var5.nextFloat();
+                    var8 = (float)(var3 + 1) - var5.nextFloat() * 0.1F;
+                    var9 = (float)var4 + var5.nextFloat();
+                    var1.addParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+                }
+            }
+        }
+        else
+        {
+            for (var6 = 0; var6 < 3; ++var6)
+            {
+                var7 = (float)var2 + var5.nextFloat();
+                var8 = (float)var3 + var5.nextFloat() * 0.5F + 0.5F;
+                var9 = (float)var4 + var5.nextFloat();
+                var1.addParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+            }
+        }
+    }
+
+    public boolean canBlockCatchFire(IBlockAccess var1, int var2, int var3, int var4, ForgeDirection var5)
+    {
+        Block var6 = Block.byId[var1.getTypeId(var2, var3, var4)];
+        return var6 != null ? var6.isFlammable(var1, var2, var3, var4, var1.getData(var2, var3, var4), var5) : false;
+    }
+
+    public int getChanceToEncourageFire(World var1, int var2, int var3, int var4, int var5, ForgeDirection var6)
+    {
+        int var7 = 0;
+        Block var8 = Block.byId[var1.getTypeId(var2, var3, var4)];
+
+        if (var8 != null)
+        {
+            var7 = var8.getFireSpreadSpeed(var1, var2, var3, var4, var1.getData(var2, var3, var4), var6);
+        }
+
+        return var7 > var5 ? var7 : var5;
+    }
+}
Index: BlockGrass.java
===================================================================
--- BlockGrass.java	(revision 3)
+++ BlockGrass.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.Random;
 
 public class BlockGrass extends Block
@@ -20,6 +22,59 @@
         return var1 == 1 ? 0 : (var1 == 0 ? 2 : 3);
     }
 
+    @SideOnly(Side.CLIENT)
+    public int d(IBlockAccess var1, int var2, int var3, int var4, int var5)
+    {
+        if (var5 == 1)
+        {
+            return 0;
+        }
+        else if (var5 == 0)
+        {
+            return 2;
+        }
+        else
+        {
+            Material var6 = var1.getMaterial(var2, var3 + 1, var4);
+            return var6 != Material.SNOW_LAYER && var6 != Material.SNOW_BLOCK ? 3 : 68;
+        }
+    }
+
+    @SideOnly(Side.CLIENT)
+    public int o()
+    {
+        double var1 = 0.5D;
+        double var3 = 1.0D;
+        return xd.a(var1, var3);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public int g_(int var1)
+    {
+        return this.o();
+    }
+
+    @SideOnly(Side.CLIENT)
+    public int b(IBlockAccess var1, int var2, int var3, int var4)
+    {
+        int var5 = 0;
+        int var6 = 0;
+        int var7 = 0;
+
+        for (int var8 = -1; var8 <= 1; ++var8)
+        {
+            for (int var9 = -1; var9 <= 1; ++var9)
+            {
+                int var10 = var1.getBiome(var2 + var9, var4 + var8).k();
+                var5 += (var10 & 16711680) >> 16;
+                var6 += (var10 & 65280) >> 8;
+                var7 += var10 & 255;
+            }
+        }
+
+        return (var5 / 9 & 255) << 16 | (var6 / 9 & 255) << 8 | var7 / 9 & 255;
+    }
+
     /**
      * Ticks the block if it's been scheduled
      */
@@ -27,7 +82,7 @@
     {
         if (!var1.isStatic)
         {
-            if (var1.getLightLevel(var2, var3 + 1, var4) < 4 && Block.lightBlock[var1.getTypeId(var2, var3 + 1, var4)] > 2)
+            if (var1.getLightLevel(var2, var3 + 1, var4) < 4 && var1.b(var2, var3 + 1, var4) > 2)
             {
                 var1.setTypeId(var2, var3, var4, Block.DIRT.id);
             }
@@ -38,9 +93,9 @@
                     int var7 = var2 + var5.nextInt(3) - 1;
                     int var8 = var3 + var5.nextInt(5) - 3;
                     int var9 = var4 + var5.nextInt(3) - 1;
-                    int var10 = var1.getTypeId(var7, var8 + 1, var9);
+                    var1.getTypeId(var7, var8 + 1, var9);
 
-                    if (var1.getTypeId(var7, var8, var9) == Block.DIRT.id && var1.getLightLevel(var7, var8 + 1, var9) >= 4 && Block.lightBlock[var10] <= 2)
+                    if (var1.getTypeId(var7, var8, var9) == Block.DIRT.id && var1.getLightLevel(var7, var8 + 1, var9) >= 4 && var1.b(var7, var8 + 1, var9) <= 2)
                     {
                         var1.setTypeId(var7, var8, var9, Block.GRASS.id);
                     }
Index: BlockLeaves.java
===================================================================
--- BlockLeaves.java	(revision 3)
+++ BlockLeaves.java	(working copy)
@@ -1,8 +1,13 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Random;
+import net.minecraftforge.common.IShearable;
 
-public class BlockLeaves extends BlockTransparant
+public class BlockLeaves extends BlockTransparant implements IShearable
 {
     /**
      * The base index in terrain.png corresponding to the fancy version of the leaf texture. This is stored so we can
@@ -20,6 +25,54 @@
         this.a(CreativeModeTab.c);
     }
 
+    @SideOnly(Side.CLIENT)
+    public int o()
+    {
+        double var1 = 0.5D;
+        double var3 = 1.0D;
+        return xa.a(var1, var3);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public int g_(int var1)
+    {
+        return (var1 & 3) == 1 ? xa.a() : ((var1 & 3) == 2 ? xa.b() : xa.c());
+    }
+
+    @SideOnly(Side.CLIENT)
+    public int b(IBlockAccess var1, int var2, int var3, int var4)
+    {
+        int var5 = var1.getData(var2, var3, var4);
+
+        if ((var5 & 3) == 1)
+        {
+            return xa.a();
+        }
+        else if ((var5 & 3) == 2)
+        {
+            return xa.b();
+        }
+        else
+        {
+            int var6 = 0;
+            int var7 = 0;
+            int var8 = 0;
+
+            for (int var9 = -1; var9 <= 1; ++var9)
+            {
+                for (int var10 = -1; var10 <= 1; ++var10)
+                {
+                    int var11 = var1.getBiome(var2 + var10, var4 + var9).l();
+                    var6 += (var11 & 16711680) >> 16;
+                    var7 += (var11 & 65280) >> 8;
+                    var8 += var11 & 255;
+                }
+            }
+
+            return (var6 / 9 & 255) << 16 | (var7 / 9 & 255) << 8 | var8 / 9 & 255;
+        }
+    }
+
     /**
      * ejects contained items into the world, and notifies neighbours of an update, as appropriate
      */
@@ -38,10 +91,9 @@
                     {
                         int var12 = var1.getTypeId(var2 + var9, var3 + var10, var4 + var11);
 
-                        if (var12 == Block.LEAVES.id)
+                        if (Block.byId[var12] != null)
                         {
-                            int var13 = var1.getData(var2 + var9, var3 + var10, var4 + var11);
-                            var1.setRawData(var2 + var9, var3 + var10, var4 + var11, var13 | 8);
+                            Block.byId[var12].beginLeavesDecay(var1, var2 + var9, var3 + var10, var4 + var11);
                         }
                     }
                 }
@@ -86,12 +138,13 @@
                             for (var14 = -var7; var14 <= var7; ++var14)
                             {
                                 var15 = var1.getTypeId(var2 + var12, var3 + var13, var4 + var14);
+                                Block var16 = Block.byId[var15];
 
-                                if (var15 == Block.LOG.id)
+                                if (var16 != null && var16.canSustainLeaves(var1, var2 + var12, var3 + var13, var4 + var14))
                                 {
                                     this.b[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = 0;
                                 }
-                                else if (var15 == Block.LEAVES.id)
+                                else if (var16 != null && var16.isLeaves(var1, var2 + var12, var3 + var13, var4 + var14))
                                 {
                                     this.b[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = -2;
                                 }
@@ -163,6 +216,18 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a(World var1, int var2, int var3, int var4, Random var5)
+    {
+        if (var1.B(var2, var3 + 1, var4) && !var1.t(var2, var3 - 1, var4) && var5.nextInt(15) == 1)
+        {
+            double var6 = (double)((float)var2 + var5.nextFloat());
+            double var8 = (double)var3 - 0.05D;
+            double var10 = (double)((float)var4 + var5.nextFloat());
+            var1.addParticle("dripWater", var6, var8, var10, 0.0D, 0.0D, 0.0D);
+        }
+    }
+
     private void l(World var1, int var2, int var3, int var4)
     {
         this.c(var1, var2, var3, var4, var1.getData(var2, var3, var4), 0);
@@ -218,16 +283,8 @@
      */
     public void a(World var1, EntityHuman var2, int var3, int var4, int var5, int var6)
     {
-        if (!var1.isStatic && var2.bP() != null && var2.bP().id == Item.SHEARS.id)
-        {
-            var2.a(StatisticList.C[this.id], 1);
-            this.a(var1, var3, var4, var5, new ItemStack(Block.LEAVES.id, 1, var6 & 3));
-        }
-        else
-        {
             super.a(var1, var2, var3, var4, var5, var6);
         }
-    }
 
     /**
      * Determines the damage on the item the block drops. Used in cloth and wood.
@@ -253,4 +310,42 @@
     {
         return (var2 & 3) == 1 ? this.textureId + 80 : ((var2 & 3) == 3 ? this.textureId + 144 : this.textureId);
     }
+
+    @SideOnly(Side.CLIENT)
+    public void a(boolean var1)
+    {
+        this.c = var1;
+        this.textureId = this.cD + (var1 ? 0 : 1);
 }
+
+    @SideOnly(Side.CLIENT)
+    public void a(int var1, CreativeModeTab var2, List var3)
+    {
+        var3.add(new ItemStack(var1, 1, 0));
+        var3.add(new ItemStack(var1, 1, 1));
+        var3.add(new ItemStack(var1, 1, 2));
+        var3.add(new ItemStack(var1, 1, 3));
+    }
+
+    public boolean isShearable(ItemStack var1, World var2, int var3, int var4, int var5)
+    {
+        return true;
+    }
+
+    public ArrayList onSheared(ItemStack var1, World var2, int var3, int var4, int var5, int var6)
+    {
+        ArrayList var7 = new ArrayList();
+        var7.add(new ItemStack(this, 1, var2.getData(var3, var4, var5) & 3));
+        return var7;
+    }
+
+    public void beginLeavesDecay(World var1, int var2, int var3, int var4)
+    {
+        var1.setRawData(var2, var3, var4, var1.getData(var2, var3, var4) | 8);
+    }
+
+    public boolean isLeaves(World var1, int var2, int var3, int var4)
+    {
+        return true;
+    }
+}
Index: BlockLever.java
===================================================================
--- BlockLever.java	(revision 3)
+++ BlockLever.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.minecraftforge.common.ForgeDirection;
+
 public class BlockLever extends Block
 {
     protected BlockLever(int var1, int var2)
@@ -47,7 +49,8 @@
      */
     public boolean canPlace(World var1, int var2, int var3, int var4, int var5)
     {
-        return var5 == 0 && var1.s(var2, var3 + 1, var4) ? true : (var5 == 1 && var1.t(var2, var3 - 1, var4) ? true : (var5 == 2 && var1.s(var2, var3, var4 + 1) ? true : (var5 == 3 && var1.s(var2, var3, var4 - 1) ? true : (var5 == 4 && var1.s(var2 + 1, var3, var4) ? true : var5 == 5 && var1.s(var2 - 1, var3, var4)))));
+        ForgeDirection var6 = ForgeDirection.getOrientation(var5);
+        return var6 == ForgeDirection.DOWN && var1.isBlockSolidOnSide(var2, var3 + 1, var4, ForgeDirection.DOWN) || var6 == ForgeDirection.UP && var1.isBlockSolidOnSide(var2, var3 - 1, var4, ForgeDirection.UP) || var6 == ForgeDirection.NORTH && var1.isBlockSolidOnSide(var2, var3, var4 + 1, ForgeDirection.NORTH) || var6 == ForgeDirection.SOUTH && var1.isBlockSolidOnSide(var2, var3, var4 - 1, ForgeDirection.SOUTH) || var6 == ForgeDirection.WEST && var1.isBlockSolidOnSide(var2 + 1, var3, var4, ForgeDirection.WEST) || var6 == ForgeDirection.EAST && var1.isBlockSolidOnSide(var2 - 1, var3, var4, ForgeDirection.EAST);
     }
 
     /**
@@ -55,7 +58,7 @@
      */
     public boolean canPlace(World var1, int var2, int var3, int var4)
     {
-        return var1.s(var2 - 1, var3, var4) ? true : (var1.s(var2 + 1, var3, var4) ? true : (var1.s(var2, var3, var4 - 1) ? true : (var1.s(var2, var3, var4 + 1) ? true : (var1.t(var2, var3 - 1, var4) ? true : var1.s(var2, var3 + 1, var4)))));
+        return var1.isBlockSolidOnSide(var2 - 1, var3, var4, ForgeDirection.EAST) || var1.isBlockSolidOnSide(var2 + 1, var3, var4, ForgeDirection.WEST) || var1.isBlockSolidOnSide(var2, var3, var4 - 1, ForgeDirection.SOUTH) || var1.isBlockSolidOnSide(var2, var3, var4 + 1, ForgeDirection.NORTH) || var1.isBlockSolidOnSide(var2, var3 - 1, var4, ForgeDirection.UP) || var1.isBlockSolidOnSide(var2, var3 + 1, var4, ForgeDirection.DOWN);
     }
 
     /**
@@ -68,32 +71,32 @@
         var9 &= 7;
         var9 = -1;
 
-        if (var5 == 0 && var1.s(var2, var3 + 1, var4))
+        if (var5 == 0 && var1.isBlockSolidOnSide(var2, var3 + 1, var4, ForgeDirection.DOWN))
         {
             var9 = var1.random.nextBoolean() ? 0 : 7;
         }
 
-        if (var5 == 1 && var1.t(var2, var3 - 1, var4))
+        if (var5 == 1 && var1.isBlockSolidOnSide(var2, var3 - 1, var4, ForgeDirection.UP))
         {
             var9 = 5 + var1.random.nextInt(2);
         }
 
-        if (var5 == 2 && var1.s(var2, var3, var4 + 1))
+        if (var5 == 2 && var1.isBlockSolidOnSide(var2, var3, var4 + 1, ForgeDirection.NORTH))
         {
             var9 = 4;
         }
 
-        if (var5 == 3 && var1.s(var2, var3, var4 - 1))
+        if (var5 == 3 && var1.isBlockSolidOnSide(var2, var3, var4 - 1, ForgeDirection.SOUTH))
         {
             var9 = 3;
         }
 
-        if (var5 == 4 && var1.s(var2 + 1, var3, var4))
+        if (var5 == 4 && var1.isBlockSolidOnSide(var2 + 1, var3, var4, ForgeDirection.WEST))
         {
             var9 = 2;
         }
 
-        if (var5 == 5 && var1.s(var2 - 1, var3, var4))
+        if (var5 == 5 && var1.isBlockSolidOnSide(var2 - 1, var3, var4, ForgeDirection.EAST))
         {
             var9 = 1;
         }
@@ -150,42 +153,42 @@
             int var6 = var1.getData(var2, var3, var4) & 7;
             boolean var7 = false;
 
-            if (!var1.s(var2 - 1, var3, var4) && var6 == 1)
+            if (!var1.isBlockSolidOnSide(var2 - 1, var3, var4, ForgeDirection.EAST) && var6 == 1)
             {
                 var7 = true;
             }
 
-            if (!var1.s(var2 + 1, var3, var4) && var6 == 2)
+            if (!var1.isBlockSolidOnSide(var2 + 1, var3, var4, ForgeDirection.WEST) && var6 == 2)
             {
                 var7 = true;
             }
 
-            if (!var1.s(var2, var3, var4 - 1) && var6 == 3)
+            if (!var1.isBlockSolidOnSide(var2, var3, var4 - 1, ForgeDirection.SOUTH) && var6 == 3)
             {
                 var7 = true;
             }
 
-            if (!var1.s(var2, var3, var4 + 1) && var6 == 4)
+            if (!var1.isBlockSolidOnSide(var2, var3, var4 + 1, ForgeDirection.NORTH) && var6 == 4)
             {
                 var7 = true;
             }
 
-            if (!var1.t(var2, var3 - 1, var4) && var6 == 5)
+            if (!var1.isBlockSolidOnSide(var2, var3 - 1, var4, ForgeDirection.UP) && var6 == 5)
             {
                 var7 = true;
             }
 
-            if (!var1.t(var2, var3 - 1, var4) && var6 == 6)
+            if (!var1.isBlockSolidOnSide(var2, var3 - 1, var4, ForgeDirection.UP) && var6 == 6)
             {
                 var7 = true;
             }
 
-            if (!var1.s(var2, var3 + 1, var4) && var6 == 0)
+            if (!var1.isBlockSolidOnSide(var2, var3 + 1, var4, ForgeDirection.DOWN) && var6 == 0)
             {
                 var7 = true;
             }
 
-            if (!var1.s(var2, var3 + 1, var4) && var6 == 7)
+            if (!var1.isBlockSolidOnSide(var2, var3 + 1, var4, ForgeDirection.DOWN) && var6 == 7)
             {
                 var7 = true;
             }
Index: BlockMushroom.java
===================================================================
--- BlockMushroom.java	(revision 3)
+++ BlockMushroom.java	(working copy)
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import java.util.Random;
+import net.minecraftforge.common.ForgeDirection;
 
 public class BlockMushroom extends BlockFlower
 {
@@ -94,7 +95,8 @@
         if (var3 >= 0 && var3 < 256)
         {
             int var5 = var1.getTypeId(var2, var3 - 1, var4);
-            return var5 == Block.MYCEL.id || var1.k(var2, var3, var4) < 13 && this.d_(var5);
+            Block var6 = Block.byId[var5];
+            return (var5 == Block.MYCEL.id || var1.k(var2, var3, var4) < 13) && var6 != null && var6.canSustainPlant(var1, var2, var3 - 1, var4, ForgeDirection.UP, this);
         }
         else
         {
Index: BlockMycel.java
===================================================================
--- BlockMycel.java	(revision 3)
+++ BlockMycel.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.Random;
 
 public class BlockMycel extends Block
@@ -20,6 +22,24 @@
         return var1 == 1 ? 78 : (var1 == 0 ? 2 : 77);
     }
 
+    @SideOnly(Side.CLIENT)
+    public int d(IBlockAccess var1, int var2, int var3, int var4, int var5)
+    {
+        if (var5 == 1)
+        {
+            return 78;
+        }
+        else if (var5 == 0)
+        {
+            return 2;
+        }
+        else
+        {
+            Material var6 = var1.getMaterial(var2, var3 + 1, var4);
+            return var6 != Material.SNOW_LAYER && var6 != Material.SNOW_BLOCK ? 77 : 68;
+        }
+    }
+
     /**
      * Ticks the block if it's been scheduled
      */
@@ -27,7 +47,7 @@
     {
         if (!var1.isStatic)
         {
-            if (var1.getLightLevel(var2, var3 + 1, var4) < 4 && Block.lightBlock[var1.getTypeId(var2, var3 + 1, var4)] > 2)
+            if (var1.getLightLevel(var2, var3 + 1, var4) < 4 && var1.b(var2, var3 + 1, var4) > 2)
             {
                 var1.setTypeId(var2, var3, var4, Block.DIRT.id);
             }
@@ -38,9 +58,9 @@
                     int var7 = var2 + var5.nextInt(3) - 1;
                     int var8 = var3 + var5.nextInt(5) - 3;
                     int var9 = var4 + var5.nextInt(3) - 1;
-                    int var10 = var1.getTypeId(var7, var8 + 1, var9);
+                    var1.getTypeId(var7, var8 + 1, var9);
 
-                    if (var1.getTypeId(var7, var8, var9) == Block.DIRT.id && var1.getLightLevel(var7, var8 + 1, var9) >= 4 && Block.lightBlock[var10] <= 2)
+                    if (var1.getTypeId(var7, var8, var9) == Block.DIRT.id && var1.getLightLevel(var7, var8 + 1, var9) >= 4 && var1.b(var7, var8 + 1, var9) <= 2)
                     {
                         var1.setTypeId(var7, var8, var9, this.id);
                     }
@@ -49,6 +69,17 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a(World var1, int var2, int var3, int var4, Random var5)
+    {
+        super.a(var1, var2, var3, var4, var5);
+
+        if (var5.nextInt(10) == 0)
+        {
+            var1.addParticle("townaura", (double)((float)var2 + var5.nextFloat()), (double)((float)var3 + 1.1F), (double)((float)var4 + var5.nextFloat()), 0.0D, 0.0D, 0.0D);
+        }
+    }
+
     /**
      * Returns the ID of the items to drop on destruction.
      */
Index: BlockNetherWart.java
===================================================================
--- BlockNetherWart.java	(revision 3)
+++ BlockNetherWart.java	(working copy)
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import java.util.ArrayList;
 import java.util.Random;
 
 public class BlockNetherWart extends BlockFlower
@@ -67,27 +70,9 @@
      */
     public void dropNaturally(World var1, int var2, int var3, int var4, int var5, float var6, int var7)
     {
-        if (!var1.isStatic)
-        {
-            int var8 = 1;
-
-            if (var5 >= 3)
-            {
-                var8 = 2 + var1.random.nextInt(3);
-
-                if (var7 > 0)
-                {
-                    var8 += var1.random.nextInt(var7 + 1);
+        super.dropNaturally(var1, var2, var3, var4, var5, var6, var7);
                 }
-            }
 
-            for (int var9 = 0; var9 < var8; ++var9)
-            {
-                this.a(var1, var2, var3, var4, new ItemStack(Item.NETHER_STALK));
-            }
-        }
-    }
-
     /**
      * Returns the ID of the items to drop on destruction.
      */
@@ -103,4 +88,28 @@
     {
         return 0;
     }
+
+    @SideOnly(Side.CLIENT)
+    public int a(World var1, int var2, int var3, int var4)
+    {
+        return Item.NETHER_STALK.id;
 }
+
+    public ArrayList getBlockDropped(World var1, int var2, int var3, int var4, int var5, int var6)
+    {
+        ArrayList var7 = new ArrayList();
+        int var8 = 1;
+
+        if (var5 >= 3)
+        {
+            var8 = 2 + var1.random.nextInt(3) + (var6 > 0 ? var1.random.nextInt(var6 + 1) : 0);
+        }
+
+        for (int var9 = 0; var9 < var8; ++var9)
+        {
+            var7.add(new ItemStack(Item.NETHER_STALK));
+        }
+
+        return var7;
+    }
+}
Index: BlockPiston.java
===================================================================
--- BlockPiston.java	(revision 3)
+++ BlockPiston.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.List;
 
 public class BlockPiston extends Block
@@ -16,6 +18,12 @@
         this.a(CreativeModeTab.d);
     }
 
+    @SideOnly(Side.CLIENT)
+    public int p()
+    {
+        return this.a ? 106 : 107;
+    }
+
     /**
      * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
      */
@@ -359,7 +367,7 @@
                 return false;
             }
 
-            return !(Block.byId[var0] instanceof BlockContainer);
+            return !var1.isTileEntity(var2, var3, var4);
         }
     }
 
Index: BlockRedstoneWire.java
===================================================================
--- BlockRedstoneWire.java	(revision 3)
+++ BlockRedstoneWire.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -63,6 +65,12 @@
         return 5;
     }
 
+    @SideOnly(Side.CLIENT)
+    public int b(IBlockAccess var1, int var2, int var3, int var4)
+    {
+        return 8388608;
+    }
+
     /**
      * Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
      */
@@ -487,6 +495,41 @@
         return this.a;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a(World var1, int var2, int var3, int var4, Random var5)
+    {
+        int var6 = var1.getData(var2, var3, var4);
+
+        if (var6 > 0)
+        {
+            double var7 = (double)var2 + 0.5D + ((double)var5.nextFloat() - 0.5D) * 0.2D;
+            double var9 = (double)((float)var3 + 0.0625F);
+            double var11 = (double)var4 + 0.5D + ((double)var5.nextFloat() - 0.5D) * 0.2D;
+            float var13 = (float)var6 / 15.0F;
+            float var14 = var13 * 0.6F + 0.4F;
+
+            if (var6 == 0)
+            {
+                var14 = 0.0F;
+            }
+
+            float var15 = var13 * var13 * 0.7F - 0.5F;
+            float var16 = var13 * var13 * 0.6F - 0.7F;
+
+            if (var15 < 0.0F)
+            {
+                var15 = 0.0F;
+            }
+
+            if (var16 < 0.0F)
+            {
+                var16 = 0.0F;
+            }
+
+            var1.addParticle("reddust", var7, var9, var11, (double)var14, (double)var15, (double)var16);
+        }
+    }
+
     /**
      * Returns true if the block coordinate passed can provide power, or is a redstone wire.
      */
@@ -504,7 +547,7 @@
         }
         else if (var5 != Block.DIODE_OFF.id && var5 != Block.DIODE_ON.id)
         {
-            return Block.byId[var5].isPowerSource() && var4 != -1;
+            return Block.byId[var5] != null && Block.byId[var5].canConnectRedstone(var0, var1, var2, var3, var4);
         }
         else
         {
@@ -538,4 +581,10 @@
             }
         }
     }
+
+    @SideOnly(Side.CLIENT)
+    public int a(World var1, int var2, int var3, int var4)
+    {
+        return Item.REDSTONE.id;
 }
+}
Index: BlockReed.java
===================================================================
--- BlockReed.java	(revision 3)
+++ BlockReed.java	(working copy)
@@ -1,8 +1,12 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.Random;
+import net.minecraftforge.common.EnumPlantType;
+import net.minecraftforge.common.IPlantable;
 
-public class BlockReed extends Block
+public class BlockReed extends Block implements IPlantable
 {
     protected BlockReed(int var1, int var2)
     {
@@ -123,4 +127,25 @@
     {
         return 1;
     }
+
+    @SideOnly(Side.CLIENT)
+    public int a(World var1, int var2, int var3, int var4)
+    {
+        return Item.SUGAR_CANE.id;
 }
+
+    public EnumPlantType getPlantType(World var1, int var2, int var3, int var4)
+    {
+        return EnumPlantType.Beach;
+    }
+
+    public int getPlantID(World var1, int var2, int var3, int var4)
+    {
+        return this.id;
+    }
+
+    public int getPlantMetadata(World var1, int var2, int var3, int var4)
+    {
+        return var1.getData(var2, var3, var4);
+    }
+}
Index: BlockSnow.java
===================================================================
--- BlockSnow.java	(revision 3)
+++ BlockSnow.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.Random;
 
 public class BlockSnow extends Block
@@ -55,7 +57,8 @@
     public boolean canPlace(World var1, int var2, int var3, int var4)
     {
         int var5 = var1.getTypeId(var2, var3 - 1, var4);
-        return var5 != 0 && (var5 == Block.LEAVES.id || Block.byId[var5].c()) ? var1.getMaterial(var2, var3 - 1, var4).isSolid() : false;
+        Block var6 = Block.byId[var5];
+        return var6 != null && (var6.isLeaves(var1, var2, var3 - 1, var4) || Block.byId[var5].c()) ? var1.getMaterial(var2, var3 - 1, var4).isSolid() : false;
     }
 
     /**
@@ -74,7 +77,6 @@
     {
         if (!this.canPlace(var1, var2, var3, var4))
         {
-            this.c(var1, var2, var3, var4, var1.getData(var2, var3, var4), 0);
             var1.setTypeId(var2, var3, var4, 0);
             return false;
         }
@@ -90,10 +92,8 @@
      */
     public void a(World var1, EntityHuman var2, int var3, int var4, int var5, int var6)
     {
-        int var7 = Item.SNOW_BALL.id;
-        this.a(var1, var3, var4, var5, new ItemStack(var7, 1, 0));
+        super.a(var1, var2, var3, var4, var5, var6);
         var1.setTypeId(var3, var4, var5, 0);
-        var2.a(StatisticList.C[this.id], 1);
     }
 
     /**
@@ -109,7 +109,7 @@
      */
     public int a(Random var1)
     {
-        return 0;
+        return 1;
     }
 
     /**
@@ -119,8 +119,13 @@
     {
         if (var1.b(EnumSkyBlock.Block, var2, var3, var4) > 11)
         {
-            this.c(var1, var2, var3, var4, var1.getData(var2, var3, var4), 0);
             var1.setTypeId(var2, var3, var4, 0);
         }
     }
+
+    @SideOnly(Side.CLIENT)
+    public boolean a(IBlockAccess var1, int var2, int var3, int var4, int var5)
+    {
+        return var5 == 1 ? true : super.a(var1, var2, var3, var4, var5);
 }
+}
Index: BlockSoil.java
===================================================================
--- BlockSoil.java	(revision 3)
+++ BlockSoil.java	(working copy)
@@ -1,6 +1,10 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.Random;
+import net.minecraftforge.common.ForgeDirection;
+import net.minecraftforge.common.IPlantable;
 
 public class BlockSoil extends Block
 {
@@ -94,8 +98,9 @@
             for (int var7 = var4 - var5; var7 <= var4 + var5; ++var7)
             {
                 int var8 = var1.getTypeId(var6, var3 + 1, var7);
+                Block var9 = byId[var8];
 
-                if (var8 == Block.CROPS.id || var8 == Block.MELON_STEM.id || var8 == Block.PUMPKIN_STEM.id)
+                if (var9 instanceof IPlantable && this.canSustainPlant(var1, var2, var3, var4, ForgeDirection.UP, (IPlantable)var9))
                 {
                     return true;
                 }
@@ -149,4 +154,10 @@
     {
         return Block.DIRT.getDropType(0, var2, var3);
     }
+
+    @SideOnly(Side.CLIENT)
+    public int a(World var1, int var2, int var3, int var4)
+    {
+        return Block.DIRT.id;
 }
+}
Index: BlockStem.java
===================================================================
--- BlockStem.java	(revision 3)
+++ BlockStem.java	(working copy)
@@ -1,6 +1,10 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import java.util.ArrayList;
 import java.util.Random;
+import net.minecraftforge.common.ForgeDirection;
 
 public class BlockStem extends BlockFlower
 {
@@ -93,8 +97,9 @@
                     }
 
                     int var11 = var1.getTypeId(var9, var3 - 1, var10);
+                    boolean var12 = byId[var11] != null && byId[var11].canSustainPlant(var1, var9, var3 - 1, var10, ForgeDirection.UP, this);
 
-                    if (var1.getTypeId(var9, var3, var10) == 0 && (var11 == Block.SOIL.id || var11 == Block.DIRT.id || var11 == Block.GRASS.id))
+                    if (var1.getTypeId(var9, var3, var10) == 0 && (var12 || var11 == Block.DIRT.id || var11 == Block.GRASS.id))
                     {
                         var1.setTypeId(var9, var3, var10, this.blockFruit.id);
                     }
@@ -130,11 +135,11 @@
                 int var19 = var1.getTypeId(var17, var3 - 1, var18);
                 float var20 = 0.0F;
 
-                if (var19 == Block.SOIL.id)
+                if (byId[var19] != null && byId[var19].canSustainPlant(var1, var17, var3 - 1, var18, ForgeDirection.UP, this))
                 {
                     var20 = 1.0F;
 
-                    if (var1.getData(var17, var3 - 1, var18) > 0)
+                    if (byId[var19].isFertile(var1, var17, var3 - 1, var18))
                     {
                         var20 = 3.0F;
                     }
@@ -157,6 +162,21 @@
         return var5;
     }
 
+    @SideOnly(Side.CLIENT)
+    public int g_(int var1)
+    {
+        int var2 = var1 * 32;
+        int var3 = 255 - var1 * 8;
+        int var4 = var1 * 4;
+        return var2 << 16 | var3 << 8 | var4;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public int b(IBlockAccess var1, int var2, int var3, int var4)
+    {
+        return this.g_(var1.getData(var2, var3, var4));
+    }
+
     /**
      * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
      */
@@ -192,36 +212,35 @@
         return 19;
     }
 
+    @SideOnly(Side.CLIENT)
+    public int d(IBlockAccess var1, int var2, int var3, int var4)
+    {
+        int var5 = var1.getData(var2, var3, var4);
+        return var5 < 7 ? -1 : (var1.getTypeId(var2 - 1, var3, var4) == this.blockFruit.id ? 0 : (var1.getTypeId(var2 + 1, var3, var4) == this.blockFruit.id ? 1 : (var1.getTypeId(var2, var3, var4 - 1) == this.blockFruit.id ? 2 : (var1.getTypeId(var2, var3, var4 + 1) == this.blockFruit.id ? 3 : -1))));
+    }
+
     /**
      * Drops the block items with a specified chance of dropping the specified items
      */
     public void dropNaturally(World var1, int var2, int var3, int var4, int var5, float var6, int var7)
     {
         super.dropNaturally(var1, var2, var3, var4, var5, var6, var7);
-
-        if (!var1.isStatic)
-        {
-            Item var8 = null;
-
-            if (this.blockFruit == Block.PUMPKIN)
-            {
-                var8 = Item.PUMPKIN_SEEDS;
             }
 
-            if (this.blockFruit == Block.MELON)
+    public ArrayList getBlockDropped(World var1, int var2, int var3, int var4, int var5, int var6)
             {
-                var8 = Item.MELON_SEEDS;
-            }
+        ArrayList var7 = new ArrayList();
 
-            for (int var9 = 0; var9 < 3; ++var9)
+        for (int var8 = 0; var8 < 3; ++var8)
             {
                 if (var1.random.nextInt(15) <= var5)
                 {
-                    this.a(var1, var2, var3, var4, new ItemStack(var8));
+                var7.add(new ItemStack(this.blockFruit == PUMPKIN ? Item.PUMPKIN_SEEDS : Item.MELON_SEEDS));
                 }
             }
+
+        return var7;
         }
-    }
 
     /**
      * Returns the ID of the items to drop on destruction.
@@ -238,4 +257,10 @@
     {
         return 1;
     }
+
+    @SideOnly(Side.CLIENT)
+    public int a(World var1, int var2, int var3, int var4)
+    {
+        return this.blockFruit == Block.PUMPKIN ? Item.PUMPKIN_SEEDS.id : (this.blockFruit == Block.MELON ? Item.MELON_SEEDS.id : 0);
 }
+}
Index: BlockTrapdoor.java
===================================================================
--- BlockTrapdoor.java	(revision 3)
+++ BlockTrapdoor.java	(working copy)
@@ -1,7 +1,13 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import net.minecraftforge.common.ForgeDirection;
+
 public class BlockTrapdoor extends Block
 {
+    public static boolean disableValidation = false;
+
     protected BlockTrapdoor(int var1, Material var2)
     {
         super(var1, var2);
@@ -48,6 +54,13 @@
         return 0;
     }
 
+    @SideOnly(Side.CLIENT)
+    public AxisAlignedBB b_(World var1, int var2, int var3, int var4)
+    {
+        this.updateShape(var1, var2, var3, var4);
+        return super.b_(var1, var2, var3, var4);
+    }
+
     /**
      * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been
      * cleared to be reused)
@@ -179,7 +192,7 @@
                 --var7;
             }
 
-            if (!j(var1.getTypeId(var7, var3, var8)))
+            if (!j(var1.getTypeId(var7, var3, var8)) && !var1.isBlockSolidOnSide(var7, var3, var8, ForgeDirection.getOrientation((var6 & 3) + 2)))
             {
                 var1.setTypeId(var2, var3, var4, 0);
                 this.c(var1, var2, var3, var4, var6, 0);
@@ -246,8 +259,12 @@
      */
     public boolean canPlace(World var1, int var2, int var3, int var4, int var5)
     {
-        if (var5 == 0)
+        if (disableValidation)
         {
+            return true;
+        }
+        else if (var5 == 0)
+        {
             return false;
         }
         else if (var5 == 1)
@@ -276,7 +293,7 @@
                 --var2;
             }
 
-            return j(var1.getTypeId(var2, var3, var4));
+            return j(var1.getTypeId(var2, var3, var4)) || var1.isBlockSolidOnSide(var2, var3, var4, ForgeDirection.UP);
         }
     }
 
@@ -291,8 +308,12 @@
      */
     private static boolean j(int var0)
     {
-        if (var0 <= 0)
+        if (disableValidation)
         {
+            return true;
+        }
+        else if (var0 <= 0)
+        {
             return false;
         }
         else
Index: BlockTripwireHook.java
===================================================================
--- BlockTripwireHook.java	(revision 3)
+++ BlockTripwireHook.java	(working copy)
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import java.util.Random;
+import net.minecraftforge.common.ForgeDirection;
 
 public class BlockTripwireHook extends Block
 {
@@ -58,7 +59,8 @@
      */
     public boolean canPlace(World var1, int var2, int var3, int var4, int var5)
     {
-        return var5 == 2 && var1.s(var2, var3, var4 + 1) ? true : (var5 == 3 && var1.s(var2, var3, var4 - 1) ? true : (var5 == 4 && var1.s(var2 + 1, var3, var4) ? true : var5 == 5 && var1.s(var2 - 1, var3, var4)));
+        ForgeDirection var6 = ForgeDirection.getOrientation(var5);
+        return var6 == ForgeDirection.NORTH && var1.isBlockSolidOnSide(var2, var3, var4 + 1, ForgeDirection.NORTH) || var6 == ForgeDirection.SOUTH && var1.isBlockSolidOnSide(var2, var3, var4 - 1, ForgeDirection.SOUTH) || var6 == ForgeDirection.WEST && var1.isBlockSolidOnSide(var2 + 1, var3, var4, ForgeDirection.WEST) || var6 == ForgeDirection.EAST && var1.isBlockSolidOnSide(var2 - 1, var3, var4, ForgeDirection.EAST);
     }
 
     /**
@@ -66,7 +68,7 @@
      */
     public boolean canPlace(World var1, int var2, int var3, int var4)
     {
-        return var1.s(var2 - 1, var3, var4) ? true : (var1.s(var2 + 1, var3, var4) ? true : (var1.s(var2, var3, var4 - 1) ? true : var1.s(var2, var3, var4 + 1)));
+        return var1.isBlockSolidOnSide(var2 - 1, var3, var4, ForgeDirection.SOUTH) || var1.isBlockSolidOnSide(var2 + 1, var3, var4, ForgeDirection.NORTH) || var1.isBlockSolidOnSide(var2, var3, var4 - 1, ForgeDirection.EAST) || var1.isBlockSolidOnSide(var2, var3, var4 + 1, ForgeDirection.WEST);
     }
 
     /**
@@ -76,22 +78,22 @@
     {
         byte var9 = 0;
 
-        if (var5 == 2 && var1.b(var2, var3, var4 + 1, true))
+        if (var5 == 2 && var1.isBlockSolidOnSide(var2, var3, var4 + 1, ForgeDirection.WEST, true))
         {
             var9 = 2;
         }
 
-        if (var5 == 3 && var1.b(var2, var3, var4 - 1, true))
+        if (var5 == 3 && var1.isBlockSolidOnSide(var2, var3, var4 - 1, ForgeDirection.EAST, true))
         {
             var9 = 0;
         }
 
-        if (var5 == 4 && var1.b(var2 + 1, var3, var4, true))
+        if (var5 == 4 && var1.isBlockSolidOnSide(var2 + 1, var3, var4, ForgeDirection.NORTH, true))
         {
             var9 = 1;
         }
 
-        if (var5 == 5 && var1.b(var2 - 1, var3, var4, true))
+        if (var5 == 5 && var1.isBlockSolidOnSide(var2 - 1, var3, var4, ForgeDirection.SOUTH, true))
         {
             var9 = 3;
         }
@@ -105,30 +107,28 @@
      */
     public void doPhysics(World var1, int var2, int var3, int var4, int var5)
     {
-        if (var5 != this.id)
+        if (var5 != this.id && this.func_72144_l(var1, var2, var3, var4))
         {
-            if (this.func_72144_l(var1, var2, var3, var4))
-            {
                 int var6 = var1.getData(var2, var3, var4);
                 int var7 = var6 & 3;
                 boolean var8 = false;
 
-                if (!var1.s(var2 - 1, var3, var4) && var7 == 3)
+            if (!var1.isBlockSolidOnSide(var2 - 1, var3, var4, ForgeDirection.SOUTH) && var7 == 3)
                 {
                     var8 = true;
                 }
 
-                if (!var1.s(var2 + 1, var3, var4) && var7 == 1)
+            if (!var1.isBlockSolidOnSide(var2 + 1, var3, var4, ForgeDirection.NORTH) && var7 == 1)
                 {
                     var8 = true;
                 }
 
-                if (!var1.s(var2, var3, var4 - 1) && var7 == 0)
+            if (!var1.isBlockSolidOnSide(var2, var3, var4 - 1, ForgeDirection.EAST) && var7 == 0)
                 {
                     var8 = true;
                 }
 
-                if (!var1.s(var2, var3, var4 + 1) && var7 == 2)
+            if (!var1.isBlockSolidOnSide(var2, var3, var4 + 1, ForgeDirection.WEST) && var7 == 2)
                 {
                     var8 = true;
                 }
@@ -140,7 +140,6 @@
                 }
             }
         }
-    }
 
     public void func_72143_a(World var1, int var2, int var3, int var4, int var5, int var6, boolean var7, int var8, int var9)
     {
@@ -149,7 +148,7 @@
         boolean var12 = (var6 & 8) == 8;
         boolean var13 = var5 == Block.TRIPWIRE_SOURCE.id;
         boolean var14 = false;
-        boolean var15 = !var1.t(var2, var3 - 1, var4);
+        boolean var15 = !var1.isBlockSolidOnSide(var2, var3 - 1, var4, ForgeDirection.UP);
         int var16 = Direction.a[var10];
         int var17 = Direction.b[var10];
         int var18 = 0;
@@ -160,40 +159,40 @@
         int var22;
         int var24;
 
-        for (var20 = 1; var20 < 42; ++var20)
+        for (var21 = 1; var21 < 42; ++var21)
         {
-            var21 = var2 + var16 * var20;
-            var22 = var4 + var17 * var20;
-            var23 = var1.getTypeId(var21, var3, var22);
+            var20 = var2 + var16 * var21;
+            var23 = var4 + var17 * var21;
+            var22 = var1.getTypeId(var20, var3, var23);
 
-            if (var23 == Block.TRIPWIRE_SOURCE.id)
+            if (var22 == Block.TRIPWIRE_SOURCE.id)
             {
-                var24 = var1.getData(var21, var3, var22);
+                var24 = var1.getData(var20, var3, var23);
 
                 if ((var24 & 3) == Direction.f[var10])
                 {
-                    var18 = var20;
+                    var18 = var21;
                 }
 
                 break;
             }
 
-            if (var23 != Block.TRIPWIRE.id && var20 != var8)
+            if (var22 != Block.TRIPWIRE.id && var21 != var8)
             {
-                var19[var20] = -1;
+                var19[var21] = -1;
                 var13 = false;
             }
             else
             {
-                var24 = var20 == var8 ? var9 : var1.getData(var21, var3, var22);
+                var24 = var21 == var8 ? var9 : var1.getData(var20, var3, var23);
                 boolean var25 = (var24 & 8) != 8;
                 boolean var26 = (var24 & 1) == 1;
                 boolean var27 = (var24 & 2) == 2;
                 var13 &= var27 == var15;
                 var14 |= var25 && var26;
-                var19[var20] = var24;
+                var19[var21] = var24;
 
-                if (var20 == var8)
+                if (var21 == var8)
                 {
                     var1.a(var2, var3, var4, var5, this.r_());
                     var13 &= var25;
@@ -203,17 +202,17 @@
 
         var13 &= var18 > 1;
         var14 &= var13;
-        var20 = (var13 ? 4 : 0) | (var14 ? 8 : 0);
-        var6 = var10 | var20;
+        var21 = (var13 ? 4 : 0) | (var14 ? 8 : 0);
+        var6 = var10 | var21;
 
         if (var18 > 0)
         {
-            var21 = var2 + var16 * var18;
-            var22 = var4 + var17 * var18;
-            var23 = Direction.f[var10];
-            var1.setData(var21, var3, var22, var23 | var20);
-            this.d(var1, var21, var3, var22, var23);
-            this.a(var1, var21, var3, var22, var13, var14, var11, var12);
+            var20 = var2 + var16 * var18;
+            var23 = var4 + var17 * var18;
+            var22 = Direction.f[var10];
+            var1.setData(var20, var3, var23, var22 | var21);
+            this.d(var1, var20, var3, var23, var22);
+            this.a(var1, var20, var3, var23, var13, var14, var11, var12);
         }
 
         this.a(var1, var2, var3, var4, var13, var14, var11, var12);
@@ -230,11 +229,11 @@
 
         if (var11 != var13)
         {
-            for (var21 = 1; var21 < var18; ++var21)
+            for (var20 = 1; var20 < var18; ++var20)
             {
-                var22 = var2 + var16 * var21;
-                var23 = var4 + var17 * var21;
-                var24 = var19[var21];
+                var23 = var2 + var16 * var20;
+                var22 = var4 + var17 * var20;
+                var24 = var19[var20];
 
                 if (var24 >= 0)
                 {
@@ -247,7 +246,7 @@
                         var24 &= -5;
                     }
 
-                    var1.setData(var22, var3, var23, var24);
+                    var1.setData(var23, var3, var22, var24);
                 }
             }
         }
Index: Chunk.java
===================================================================
--- Chunk.java	(revision 3)
+++ Chunk.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -7,6 +9,10 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.entity.EntityEvent$EnteringChunk;
+import net.minecraftforge.event.world.ChunkEvent$Load;
+import net.minecraftforge.event.world.ChunkEvent$Unload;
 
 public class Chunk
 {
@@ -122,7 +128,7 @@
             {
                 for (int var8 = 0; var8 < var5; ++var8)
                 {
-                    byte var9 = var2[var6 << 11 | var7 << 7 | var8];
+                    int var9 = var2[var6 << 11 | var7 << 7 | var8] & 255;
 
                     if (var9 != 0)
                     {
@@ -140,6 +146,38 @@
         }
     }
 
+    public Chunk(World var1, byte[] var2, byte[] var3, int var4, int var5)
+    {
+        this(var1, var4, var5);
+        int var6 = var2.length / 256;
+
+        for (int var7 = 0; var7 < 16; ++var7)
+        {
+            for (int var8 = 0; var8 < 16; ++var8)
+            {
+                for (int var9 = 0; var9 < var6; ++var9)
+                {
+                    int var10 = var7 << 11 | var8 << 7 | var9;
+                    int var11 = var2[var10] & 255;
+                    byte var12 = var3[var10];
+
+                    if (var11 != 0)
+                    {
+                        int var13 = var9 >> 4;
+
+                        if (this.sections[var13] == null)
+                        {
+                            this.sections[var13] = new ChunkSection(var13 << 4);
+                        }
+
+                        this.sections[var13].a(var7, var9 & 15, var8, var11);
+                        this.sections[var13].b(var7, var9 & 15, var8, var12);
+                    }
+                }
+            }
+        }
+    }
+
     /**
      * Checks whether the chunk is at the X/Z location specified
      */
@@ -180,6 +218,44 @@
         return this.sections;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a()
+    {
+        int var1 = this.h();
+
+        for (int var2 = 0; var2 < 16; ++var2)
+        {
+            int var3 = 0;
+
+            while (var3 < 16)
+            {
+                this.b[var2 + (var3 << 4)] = -999;
+                int var4 = var1 + 16 - 1;
+
+                while (true)
+                {
+                    if (var4 > 0)
+                    {
+                        this.getTypeId(var2, var4 - 1, var3);
+
+                        if (this.b(var2, var4 - 1, var3) == 0)
+                        {
+                            --var4;
+                            continue;
+                        }
+
+                        this.heightMap[var3 << 4 | var2] = var4;
+                    }
+
+                    ++var3;
+                    break;
+                }
+            }
+        }
+
+        this.l = true;
+    }
+
     /**
      * Generates the initial skylight map for the chunk upon generation or load.
      */
@@ -377,21 +453,21 @@
             int var6 = this.x * 16 + var1;
             int var7 = this.z * 16 + var3;
             int var8;
-            int var12;
+            int var9;
 
             if (!this.world.worldProvider.f)
             {
-                ChunkSection var9;
+                ChunkSection var10;
 
                 if (var5 < var4)
                 {
                     for (var8 = var5; var8 < var4; ++var8)
                     {
-                        var9 = this.sections[var8 >> 4];
+                        var10 = this.sections[var8 >> 4];
 
-                        if (var9 != null)
+                        if (var10 != null)
                         {
-                            var9.c(var1, var8 & 15, var3, 15);
+                            var10.c(var1, var8 & 15, var3, 15);
                             this.world.func_72902_n((this.x << 4) + var1, var8, (this.z << 4) + var3);
                         }
                     }
@@ -400,11 +476,11 @@
                 {
                     for (var8 = var4; var8 < var5; ++var8)
                     {
-                        var9 = this.sections[var8 >> 4];
+                        var10 = this.sections[var8 >> 4];
 
-                        if (var9 != null)
+                        if (var10 != null)
                         {
-                            var9.c(var1, var8 & 15, var3, 0);
+                            var10.c(var1, var8 & 15, var3, 0);
                             this.world.func_72902_n((this.x << 4) + var1, var8, (this.z << 4) + var3);
                         }
                     }
@@ -415,37 +491,37 @@
                 while (var5 > 0 && var8 > 0)
                 {
                     --var5;
-                    var12 = this.b(var1, var5, var3);
+                    var9 = this.b(var1, var5, var3);
 
-                    if (var12 == 0)
+                    if (var9 == 0)
                     {
-                        var12 = 1;
+                        var9 = 1;
                     }
 
-                    var8 -= var12;
+                    var8 -= var9;
 
                     if (var8 < 0)
                     {
                         var8 = 0;
                     }
 
-                    ChunkSection var10 = this.sections[var5 >> 4];
+                    ChunkSection var11 = this.sections[var5 >> 4];
 
-                    if (var10 != null)
+                    if (var11 != null)
                     {
-                        var10.c(var1, var5 & 15, var3, var8);
+                        var11.c(var1, var5 & 15, var3, var8);
                     }
                 }
             }
 
             var8 = this.heightMap[var3 << 4 | var1];
-            var12 = var4;
-            int var13 = var8;
+            var9 = var4;
+            int var12 = var8;
 
             if (var8 < var4)
             {
-                var12 = var8;
-                var13 = var4;
+                var9 = var8;
+                var12 = var4;
             }
 
             if (var8 < this.field_82912_p)
@@ -455,11 +531,11 @@
 
             if (!this.world.worldProvider.f)
             {
-                this.d(var6 - 1, var7, var12, var13);
-                this.d(var6 + 1, var7, var12, var13);
-                this.d(var6, var7 - 1, var12, var13);
-                this.d(var6, var7 + 1, var12, var13);
-                this.d(var6, var7, var12, var13);
+                this.d(var6 - 1, var7, var9, var12);
+                this.d(var6 + 1, var7, var9, var12);
+                this.d(var6, var7 - 1, var9, var12);
+                this.d(var6, var7 + 1, var9, var12);
+                this.d(var6, var7, var9, var12);
             }
 
             this.l = true;
@@ -468,7 +544,10 @@
 
     public int b(int var1, int var2, int var3)
     {
-        return Block.lightBlock[this.getTypeId(var1, var2, var3)];
+        int var4 = (this.x << 4) + var1;
+        int var5 = (this.z << 4) + var3;
+        Block var6 = Block.byId[this.getTypeId(var1, var2, var3)];
+        return var6 == null ? 0 : var6.getLightOpacity(this.world, var4, var2, var5);
     }
 
     /**
@@ -476,14 +555,14 @@
      */
     public int getTypeId(int var1, int var2, int var3)
     {
-        if (var2 >> 4 >= this.sections.length)
+        if (var2 >> 4 < this.sections.length && var2 >> 4 >= 0)
         {
-            return 0;
+            ChunkSection var4 = this.sections[var2 >> 4];
+            return var4 != null ? var4.a(var1, var2 & 15, var3) : 0;
         }
         else
         {
-            ChunkSection var4 = this.sections[var2 >> 4];
-            return var4 != null ? var4.a(var1, var2 & 15, var3) : 0;
+            return 0;
         }
     }
 
@@ -492,14 +571,14 @@
      */
     public int getData(int var1, int var2, int var3)
     {
-        if (var2 >> 4 >= this.sections.length)
+        if (var2 >> 4 < this.sections.length && var2 >> 4 >= 0)
         {
-            return 0;
+            ChunkSection var4 = this.sections[var2 >> 4];
+            return var4 != null ? var4.b(var1, var2 & 15, var3) : 0;
         }
         else
         {
-            ChunkSection var4 = this.sections[var2 >> 4];
-            return var4 != null ? var4.b(var1, var2 & 15, var3) : 0;
+            return 0;
         }
     }
 
@@ -531,7 +610,7 @@
         {
             return false;
         }
-        else
+        else if (var2 >> 4 < this.sections.length && var2 >> 4 >= 0)
         {
             ChunkSection var10 = this.sections[var2 >> 4];
             boolean var11 = false;
@@ -563,7 +642,7 @@
                 {
                     Block.byId[var8].remove(this.world, var12, var2, var13, var8, var9);
                 }
-                else if (Block.byId[var8] instanceof BlockContainer && var8 != var4)
+                else if (Block.byId[var8] != null && Block.byId[var8].hasTileEntity(var9))
                 {
                     this.world.q(var12, var2, var13);
                 }
@@ -583,7 +662,7 @@
                 }
                 else
                 {
-                    if (Block.lightBlock[var4 & 4095] > 0)
+                    if (this.b(var1, var2, var3) > 0)
                     {
                         if (var2 >= var7)
                         {
@@ -598,8 +677,6 @@
                     this.e(var1, var3);
                 }
 
-                TileEntity var14;
-
                 if (var4 != 0)
                 {
                     if (!this.world.isStatic)
@@ -607,44 +684,40 @@
                         Block.byId[var4].onPlace(this.world, var12, var2, var13);
                     }
 
-                    if (Block.byId[var4] instanceof BlockContainer)
+                    if (Block.byId[var4] != null && Block.byId[var4].hasTileEntity(var5))
                     {
-                        var14 = this.e(var1, var2, var3);
+                        TileEntity var14 = this.e(var1, var2, var3);
 
                         if (var14 == null)
                         {
-                            var14 = ((BlockContainer)Block.byId[var4]).a(this.world);
+                            var14 = Block.byId[var4].createTileEntity(this.world, var5);
                             this.world.setTileEntity(var12, var2, var13, var14);
                         }
 
                         if (var14 != null)
                         {
                             var14.h();
+                            var14.p = var5;
                         }
                     }
                 }
-                else if (var8 > 0 && Block.byId[var8] instanceof BlockContainer)
-                {
-                    var14 = this.e(var1, var2, var3);
 
-                    if (var14 != null)
-                    {
-                        var14.h();
-                    }
-                }
-
                 this.l = true;
                 return true;
             }
         }
+        else
+        {
+            return false;
     }
+    }
 
     /**
      * Set the metadata of a block in the chunk
      */
     public boolean b(int var1, int var2, int var3, int var4)
     {
-        ChunkSection var5 = this.sections[var2 >> 4];
+        ChunkSection var5 = var2 >> 4 < this.sections.length && var2 >> 4 >= 0 ? this.sections[var2 >> 4] : null;
 
         if (var5 == null)
         {
@@ -664,7 +737,7 @@
                 var5.b(var1, var2 & 15, var3, var4);
                 int var7 = var5.a(var1, var2 & 15, var3);
 
-                if (var7 > 0 && Block.byId[var7] instanceof BlockContainer)
+                if (var7 > 0 && Block.byId[var7] != null && Block.byId[var7].hasTileEntity(var4))
                 {
                     TileEntity var8 = this.e(var1, var2, var3);
 
@@ -685,7 +758,7 @@
      */
     public int getBrightness(EnumSkyBlock var1, int var2, int var3, int var4)
     {
-        ChunkSection var5 = this.sections[var3 >> 4];
+        ChunkSection var5 = var3 >> 4 < this.sections.length && var3 >> 4 >= 0 ? this.sections[var3 >> 4] : null;
         return var5 == null ? (this.d(var2, var3, var4) ? var1.c : 0) : (var1 == EnumSkyBlock.Sky ? var5.c(var2, var3 & 15, var4) : (var1 == EnumSkyBlock.Block ? var5.d(var2, var3 & 15, var4) : var1.c));
     }
 
@@ -695,6 +768,8 @@
      */
     public void a(EnumSkyBlock var1, int var2, int var3, int var4, int var5)
     {
+        if (var3 >> 4 < this.sections.length && var3 >> 4 >= 0)
+        {
         ChunkSection var6 = this.sections[var3 >> 4];
 
         if (var6 == null)
@@ -717,20 +792,17 @@
             var6.d(var2, var3 & 15, var4, var5);
         }
     }
+    }
 
     /**
      * Gets the amount of light on a block taking into account sunlight
      */
     public int c(int var1, int var2, int var3, int var4)
     {
-        ChunkSection var5 = this.sections[var2 >> 4];
+        ChunkSection var5 = var2 >> 4 < this.sections.length && var2 >> 4 >= 0 ? this.sections[var2 >> 4] : null;
 
-        if (var5 == null)
+        if (var5 != null)
         {
-            return !this.world.worldProvider.f && var4 < EnumSkyBlock.Sky.c ? EnumSkyBlock.Sky.c - var4 : 0;
-        }
-        else
-        {
             int var6 = this.world.worldProvider.f ? 0 : var5.c(var1, var2 & 15, var3);
 
             if (var6 > 0)
@@ -748,7 +820,11 @@
 
             return var6;
         }
+        else
+        {
+            return !this.world.worldProvider.f && var4 < EnumSkyBlock.Sky.c ? EnumSkyBlock.Sky.c - var4 : 0;
     }
+    }
 
     /**
      * Adds an entity to the chunk. Args: entity
@@ -777,6 +853,7 @@
             var4 = this.entitySlices.length - 1;
         }
 
+        MinecraftForge.EVENT_BUS.post(new EntityEvent$EnteringChunk(var1, this.x, this.z, var1.ai, var1.ak));
         var1.ah = true;
         var1.ai = this.x;
         var1.aj = var4;
@@ -826,34 +903,33 @@
         ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
         TileEntity var5 = (TileEntity)this.tileEntities.get(var4);
 
+        if (var5 != null && var5.r())
+        {
+            this.tileEntities.remove(var4);
+            var5 = null;
+        }
+
         if (var5 == null)
         {
             int var6 = this.getTypeId(var1, var2, var3);
+            int var7 = this.getData(var1, var2, var3);
 
-            if (var6 <= 0 || !Block.byId[var6].u())
+            if (var6 <= 0 || !Block.byId[var6].hasTileEntity(var7))
             {
                 return null;
             }
 
             if (var5 == null)
             {
-                var5 = ((BlockContainer)Block.byId[var6]).a(this.world);
+                var5 = Block.byId[var6].createTileEntity(this.world, var7);
                 this.world.setTileEntity(this.x * 16 + var1, var2, this.z * 16 + var3, var5);
             }
 
             var5 = (TileEntity)this.tileEntities.get(var4);
         }
 
-        if (var5 != null && var5.r())
-        {
-            this.tileEntities.remove(var4);
-            return null;
-        }
-        else
-        {
             return var5;
         }
-    }
 
     /**
      * Adds a TileEntity to a chunk
@@ -867,7 +943,7 @@
 
         if (this.d)
         {
-            this.world.tileEntityList.add(var1);
+            this.world.addTileEntity(var1);
         }
     }
 
@@ -881,9 +957,17 @@
         var4.x = this.x * 16 + var1;
         var4.y = var2;
         var4.z = this.z * 16 + var3;
+        Block var6 = Block.byId[this.getTypeId(var1, var2, var3)];
 
-        if (this.getTypeId(var1, var2, var3) != 0 && Block.byId[this.getTypeId(var1, var2, var3)] instanceof BlockContainer)
+        if (var6 != null && var6.hasTileEntity(this.getData(var1, var2, var3)))
         {
+            TileEntity var7 = (TileEntity)this.tileEntities.get(var5);
+
+            if (var7 != null)
+            {
+                var7.w_();
+            }
+
             var4.s();
             this.tileEntities.put(var5, var4);
         }
@@ -922,6 +1006,8 @@
             List var4 = var1[var3];
             this.world.a(var4);
         }
+
+        MinecraftForge.EVENT_BUS.post(new ChunkEvent$Load(this));
     }
 
     /**
@@ -938,14 +1024,16 @@
             this.world.a(var2);
         }
 
-        List[] var5 = this.entitySlices;
-        int var6 = var5.length;
+        List[] var6 = this.entitySlices;
+        int var3 = var6.length;
 
-        for (int var3 = 0; var3 < var6; ++var3)
+        for (int var4 = 0; var4 < var3; ++var4)
         {
-            List var4 = var5[var3];
-            this.world.b(var4);
+            List var5 = var6[var4];
+            this.world.b(var5);
         }
+
+        MinecraftForge.EVENT_BUS.post(new ChunkEvent$Unload(this));
     }
 
     /**
@@ -962,8 +1050,8 @@
      */
     public void a(Entity var1, AxisAlignedBB var2, List var3)
     {
-        int var4 = MathHelper.floor((var2.b - 2.0D) / 16.0D);
-        int var5 = MathHelper.floor((var2.e + 2.0D) / 16.0D);
+        int var4 = MathHelper.floor((var2.b - World.MAX_ENTITY_RADIUS) / 16.0D);
+        int var5 = MathHelper.floor((var2.e + World.MAX_ENTITY_RADIUS) / 16.0D);
 
         if (var4 < 0)
         {
@@ -1011,8 +1099,8 @@
      */
     public void a(Class var1, AxisAlignedBB var2, List var3, IEntitySelector var4)
     {
-        int var5 = MathHelper.floor((var2.b - 2.0D) / 16.0D);
-        int var6 = MathHelper.floor((var2.e + 2.0D) / 16.0D);
+        int var5 = MathHelper.floor((var2.b - World.MAX_ENTITY_RADIUS) / 16.0D);
+        int var6 = MathHelper.floor((var2.e + World.MAX_ENTITY_RADIUS) / 16.0D);
 
         if (var5 < 0)
         {
@@ -1189,6 +1277,141 @@
         this.sections = var1;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a(byte[] var1, int var2, int var3, boolean var4)
+    {
+        Iterator var5 = this.tileEntities.values().iterator();
+
+        while (var5.hasNext())
+        {
+            TileEntity var6 = (TileEntity)var5.next();
+            var6.h();
+            var6.p();
+            var6.func_70311_o();
+        }
+
+        int var15 = 0;
+        int var7;
+
+        for (var7 = 0; var7 < this.sections.length; ++var7)
+        {
+            if ((var2 & 1 << var7) != 0)
+            {
+                if (this.sections[var7] == null)
+                {
+                    this.sections[var7] = new ChunkSection(var7 << 4);
+                }
+
+                byte[] var8 = this.sections[var7].g();
+                System.arraycopy(var1, var15, var8, 0, var8.length);
+                var15 += var8.length;
+            }
+            else if (var4 && this.sections[var7] != null)
+            {
+                this.sections[var7] = null;
+            }
+        }
+
+        NibbleArray var16;
+
+        for (var7 = 0; var7 < this.sections.length; ++var7)
+        {
+            if ((var2 & 1 << var7) != 0 && this.sections[var7] != null)
+            {
+                var16 = this.sections[var7].j();
+                System.arraycopy(var1, var15, var16.a, 0, var16.a.length);
+                var15 += var16.a.length;
+            }
+        }
+
+        for (var7 = 0; var7 < this.sections.length; ++var7)
+        {
+            if ((var2 & 1 << var7) != 0 && this.sections[var7] != null)
+            {
+                var16 = this.sections[var7].k();
+                System.arraycopy(var1, var15, var16.a, 0, var16.a.length);
+                var15 += var16.a.length;
+            }
+        }
+
+        for (var7 = 0; var7 < this.sections.length; ++var7)
+        {
+            if ((var2 & 1 << var7) != 0 && this.sections[var7] != null)
+            {
+                var16 = this.sections[var7].l();
+                System.arraycopy(var1, var15, var16.a, 0, var16.a.length);
+                var15 += var16.a.length;
+            }
+        }
+
+        for (var7 = 0; var7 < this.sections.length; ++var7)
+        {
+            if ((var3 & 1 << var7) != 0)
+            {
+                if (this.sections[var7] == null)
+                {
+                    var15 += 2048;
+                }
+                else
+                {
+                    var16 = this.sections[var7].i();
+
+                    if (var16 == null)
+                    {
+                        var16 = this.sections[var7].m();
+                    }
+
+                    System.arraycopy(var1, var15, var16.a, 0, var16.a.length);
+                    var15 += var16.a.length;
+                }
+            }
+            else if (var4 && this.sections[var7] != null && this.sections[var7].i() != null)
+            {
+                this.sections[var7].h();
+            }
+        }
+
+        if (var4)
+        {
+            System.arraycopy(var1, var15, this.s, 0, this.s.length);
+            int var10000 = var15 + this.s.length;
+        }
+
+        for (var7 = 0; var7 < this.sections.length; ++var7)
+        {
+            if (this.sections[var7] != null && (var2 & 1 << var7) != 0)
+            {
+                this.sections[var7].recalcBlockCounts();
+            }
+        }
+
+        this.a();
+        ArrayList var9 = new ArrayList();
+        TileEntity var10;
+
+        for (var5 = this.tileEntities.values().iterator(); var5.hasNext(); var10.h())
+        {
+            var10 = (TileEntity)var5.next();
+            int var11 = var10.x & 15;
+            int var12 = var10.y;
+            int var13 = var10.z & 15;
+            Block var14 = var10.func_70311_o();
+
+            if (var14 == null || var14.id != this.getTypeId(var11, var12, var13) || var10.p() != this.getData(var11, var12, var13))
+            {
+                var9.add(var10);
+            }
+        }
+
+        Iterator var18 = var9.iterator();
+
+        while (var18.hasNext())
+        {
+            TileEntity var17 = (TileEntity)var18.next();
+            var17.w_();
+        }
+    }
+
     /**
      * This method retrieves the biome at a set of coordinates
      */
@@ -1293,4 +1516,19 @@
             }
         }
     }
+
+    public void cleanChunkBlockTileEntity(int var1, int var2, int var3)
+    {
+        ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
+
+        if (this.d)
+        {
+            TileEntity var5 = (TileEntity)this.tileEntities.get(var4);
+
+            if (var5 != null && var5.r())
+            {
+                this.tileEntities.remove(var4);
 }
+        }
+    }
+}
Index: ChunkProviderServer.java
===================================================================
--- ChunkProviderServer.java	(revision 3)
+++ ChunkProviderServer.java	(working copy)
@@ -1,11 +1,14 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.registry.GameRegistry;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.ForgeChunkManager;
 
 public class ChunkProviderServer implements IChunkProvider
 {
@@ -18,7 +21,7 @@
      * chunk generator object. Calls to load nonexistent chunks are forwarded to this object.
      */
     private IChunkProvider chunkProvider;
-    private IChunkLoader e;
+    IChunkLoader e;
 
     /**
      * if set, this flag forces a request to load a chunk to load the chunk rather than defaulting to the dummy if
@@ -49,7 +52,7 @@
 
     public void queueUnload(int var1, int var2)
     {
-        if (this.world.worldProvider.e())
+        if (this.world.worldProvider.e() && DimensionManager.shouldLoadSpawn(this.world.worldProvider.dimension))
         {
             ChunkCoordinates var3 = this.world.getSpawn();
             int var4 = var1 * 16 + 8 - var3.x;
@@ -92,7 +95,12 @@
 
         if (var5 == null)
         {
+            var5 = ForgeChunkManager.fetchDormantChunk(var3, this.world);
+
+            if (var5 == null)
+            {
             var5 = this.loadChunk(var1, var2);
+            }
 
             if (var5 == null)
             {
@@ -211,6 +219,7 @@
             if (this.chunkProvider != null)
             {
                 this.chunkProvider.getChunkAt(var1, var2, var3);
+                GameRegistry.generateWorld(var2, var3, this.world, this.chunkProvider, var1);
                 var4.e();
             }
         }
@@ -268,20 +277,35 @@
     {
         if (!this.world.savingDisabled)
         {
-            for (int var1 = 0; var1 < 100; ++var1)
+            Iterator var1 = this.world.getPersistentChunks().keySet().iterator();
+
+            while (var1.hasNext())
             {
+                ChunkCoordIntPair var2 = (ChunkCoordIntPair)var1.next();
+                this.unloadQueue.remove(Long.valueOf(ChunkCoordIntPair.a(var2.x, var2.z)));
+            }
+
+            for (int var4 = 0; var4 < 100; ++var4)
+            {
                 if (!this.unloadQueue.isEmpty())
                 {
-                    Long var2 = (Long)this.unloadQueue.iterator().next();
-                    Chunk var3 = (Chunk)this.chunks.getEntry(var2.longValue());
+                    Long var5 = (Long)this.unloadQueue.iterator().next();
+                    Chunk var3 = (Chunk)this.chunks.getEntry(var5.longValue());
                     var3.removeEntities();
                     this.saveChunk(var3);
                     this.saveChunkNOP(var3);
-                    this.unloadQueue.remove(var2);
-                    this.chunks.remove(var2.longValue());
+                    this.unloadQueue.remove(var5);
+                    this.chunks.remove(var5.longValue());
                     this.chunkList.remove(var3);
+                    ForgeChunkManager.putDormantChunk(ChunkCoordIntPair.a(var3.x, var3.z), var3);
+
+                    if (this.chunkList.size() == 0 && ForgeChunkManager.getPersistentChunksFor(this.world).size() == 0 && !DimensionManager.shouldLoadSpawn(this.world.worldProvider.dimension))
+                    {
+                        DimensionManager.unloadWorld(this.world.worldProvider.dimension);
+                        return this.chunkProvider.unloadChunks();
                 }
             }
+            }
 
             if (this.e != null)
             {
Index: ChunkRegionLoader.java
===================================================================
--- ChunkRegionLoader.java	(revision 3)
+++ ChunkRegionLoader.java	(working copy)
@@ -3,11 +3,15 @@
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.ChunkDataEvent$Load;
+import net.minecraftforge.event.world.ChunkDataEvent$Save;
 
 public class ChunkRegionLoader implements IAsyncChunkSaver, IChunkLoader
 {
@@ -16,7 +20,7 @@
     private Object c = new Object();
 
     /** Save directory for chunks using the Anvil format */
-    private final File d;
+    final File d;
 
     public ChunkRegionLoader(File var1)
     {
@@ -26,25 +30,26 @@
     /**
      * Loads the specified(XZ) chunk into the specified world.
      */
-    public Chunk a(World var1, int var2, int var3)
+    public Chunk a(World var1, int var2, int var3) throws IOException
     {
         NBTTagCompound var4 = null;
         ChunkCoordIntPair var5 = new ChunkCoordIntPair(var2, var3);
         Object var6 = this.c;
+        Object var7 = this.c;
 
         synchronized (this.c)
         {
             if (this.b.contains(var5))
             {
-                Iterator var7 = this.a.iterator();
+                Iterator var8 = this.a.iterator();
 
-                while (var7.hasNext())
+                while (var8.hasNext())
                 {
-                    PendingChunkToSave var8 = (PendingChunkToSave)var7.next();
+                    PendingChunkToSave var9 = (PendingChunkToSave)var8.next();
 
-                    if (var8.a.equals(var5))
+                    if (var9.a.equals(var5))
                     {
-                        var4 = var8.b;
+                        var4 = var9.b;
                         break;
                     }
                 }
@@ -53,14 +58,14 @@
 
         if (var4 == null)
         {
-            DataInputStream var11 = RegionFileCache.c(this.d, var2, var3);
+            DataInputStream var12 = RegionFileCache.c(this.d, var2, var3);
 
-            if (var11 == null)
+            if (var12 == null)
             {
                 return null;
             }
 
-            var4 = NBTCompressedStreamTools.a(var11);
+            var4 = NBTCompressedStreamTools.a(var12);
         }
 
         return this.a(var1, var2, var3, var4);
@@ -93,11 +98,12 @@
                 var5 = this.a(var1, var4.getCompound("Level"));
             }
 
+            MinecraftForge.EVENT_BUS.post(new ChunkDataEvent$Load(var5, var4));
             return var5;
         }
     }
 
-    public void a(World var1, Chunk var2)
+    public void a(World var1, Chunk var2) throws ExceptionWorldConflict, IOException
     {
         var1.C();
 
@@ -108,6 +114,7 @@
             var3.set("Level", var4);
             this.a(var2, var1, var4);
             this.func_75824_a(var2.l(), var3);
+            MinecraftForge.EVENT_BUS.post(new ChunkDataEvent$Save(var2, var3));
         }
         catch (Exception var5)
         {
@@ -118,16 +125,17 @@
     protected void func_75824_a(ChunkCoordIntPair var1, NBTTagCompound var2)
     {
         Object var3 = this.c;
+        Object var4 = this.c;
 
         synchronized (this.c)
         {
             if (this.b.contains(var1))
             {
-                for (int var4 = 0; var4 < this.a.size(); ++var4)
+                for (int var5 = 0; var5 < this.a.size(); ++var5)
                 {
-                    if (((PendingChunkToSave)this.a.get(var4)).a.equals(var1))
+                    if (((PendingChunkToSave)this.a.get(var5)).a.equals(var1))
                     {
-                        this.a.set(var4, new PendingChunkToSave(var1, var2));
+                        this.a.set(var5, new PendingChunkToSave(var1, var2));
                         return;
                     }
                 }
@@ -146,6 +154,7 @@
     {
         PendingChunkToSave var1 = null;
         Object var2 = this.c;
+        Object var3 = this.c;
 
         synchronized (this.c)
         {
@@ -164,16 +173,16 @@
             {
                 this.a(var1);
             }
-            catch (Exception var4)
+            catch (Exception var5)
             {
-                var4.printStackTrace();
+                var5.printStackTrace();
             }
         }
 
         return true;
     }
 
-    private void a(PendingChunkToSave var1)
+    private void a(PendingChunkToSave var1) throws IOException
     {
         DataOutputStream var2 = RegionFileCache.d(this.d, var1.a.x, var1.a.z);
         NBTCompressedStreamTools.a(var1.b, var2);
@@ -212,87 +221,87 @@
         NBTTagList var5 = new NBTTagList("Sections");
         ChunkSection[] var6 = var4;
         int var7 = var4.length;
-        NBTTagCompound var10;
+        NBTTagCompound var8;
 
-        for (int var8 = 0; var8 < var7; ++var8)
+        for (int var9 = 0; var9 < var7; ++var9)
         {
-            ChunkSection var9 = var6[var8];
+            ChunkSection var10 = var6[var9];
 
-            if (var9 != null)
+            if (var10 != null)
             {
-                var10 = new NBTTagCompound();
-                var10.setByte("Y", (byte)(var9.d() >> 4 & 255));
-                var10.setByteArray("Blocks", var9.g());
+                var8 = new NBTTagCompound();
+                var8.setByte("Y", (byte)(var10.d() >> 4 & 255));
+                var8.setByteArray("Blocks", var10.g());
 
-                if (var9.i() != null)
+                if (var10.i() != null)
                 {
-                    var10.setByteArray("Add", var9.i().a);
+                    var8.setByteArray("Add", var10.i().a);
                 }
 
-                var10.setByteArray("Data", var9.j().a);
-                var10.setByteArray("SkyLight", var9.l().a);
-                var10.setByteArray("BlockLight", var9.k().a);
-                var5.add(var10);
+                var8.setByteArray("Data", var10.j().a);
+                var8.setByteArray("SkyLight", var10.l().a);
+                var8.setByteArray("BlockLight", var10.k().a);
+                var5.add(var8);
             }
         }
 
         var3.set("Sections", var5);
         var3.setByteArray("Biomes", var1.m());
         var1.m = false;
-        NBTTagList var15 = new NBTTagList();
-        Iterator var17;
+        NBTTagList var19 = new NBTTagList();
+        Iterator var21;
 
         for (var7 = 0; var7 < var1.entitySlices.length; ++var7)
         {
-            var17 = var1.entitySlices[var7].iterator();
+            var21 = var1.entitySlices[var7].iterator();
 
-            while (var17.hasNext())
+            while (var21.hasNext())
             {
-                Entity var19 = (Entity)var17.next();
+                Entity var11 = (Entity)var21.next();
                 var1.m = true;
-                var10 = new NBTTagCompound();
+                var8 = new NBTTagCompound();
 
-                if (var19.c(var10))
+                if (var11.c(var8))
                 {
-                    var15.add(var10);
+                    var19.add(var8);
                 }
             }
         }
 
-        var3.set("Entities", var15);
-        NBTTagList var16 = new NBTTagList();
-        var17 = var1.tileEntities.values().iterator();
+        var3.set("Entities", var19);
+        NBTTagList var20 = new NBTTagList();
+        var21 = var1.tileEntities.values().iterator();
 
-        while (var17.hasNext())
+        while (var21.hasNext())
         {
-            TileEntity var21 = (TileEntity)var17.next();
-            var10 = new NBTTagCompound();
-            var21.b(var10);
-            var16.add(var10);
+            TileEntity var12 = (TileEntity)var21.next();
+            var8 = new NBTTagCompound();
+            var12.b(var8);
+            var20.add(var8);
         }
 
-        var3.set("TileEntities", var16);
-        List var18 = var2.a(var1, false);
+        var3.set("TileEntities", var20);
+        List var22 = var2.a(var1, false);
 
-        if (var18 != null)
+        if (var22 != null)
         {
-            long var20 = var2.getTime();
-            NBTTagList var11 = new NBTTagList();
-            Iterator var12 = var18.iterator();
+            long var13 = var2.getTime();
+            NBTTagList var15 = new NBTTagList();
+            Iterator var16 = var22.iterator();
 
-            while (var12.hasNext())
+            while (var16.hasNext())
             {
-                NextTickListEntry var13 = (NextTickListEntry)var12.next();
-                NBTTagCompound var14 = new NBTTagCompound();
-                var14.setInt("i", var13.d);
-                var14.setInt("x", var13.a);
-                var14.setInt("y", var13.b);
-                var14.setInt("z", var13.c);
-                var14.setInt("t", (int)(var13.e - var20));
-                var11.add(var14);
+                NextTickListEntry var17 = (NextTickListEntry)var16.next();
+                NBTTagCompound var18 = new NBTTagCompound();
+                var18.setInt("i", var17.d);
+                var18.setInt("x", var17.a);
+                var18.setInt("y", var17.b);
+                var18.setInt("z", var17.c);
+                var18.setInt("t", (int)(var17.e - var13));
+                var15.add(var18);
             }
 
-            var3.set("TileTicks", var11);
+            var3.set("TileTicks", var15);
         }
     }
 
Index: ConsoleLogManager.java
===================================================================
--- ConsoleLogManager.java	(revision 3)
+++ ConsoleLogManager.java	(working copy)
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import java.util.logging.ConsoleHandler;
+import cpw.mods.fml.common.FMLLog;
 import java.util.logging.FileHandler;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -16,20 +16,17 @@
     public static void init()
     {
         ConsoleLogFormatter var0 = new ConsoleLogFormatter();
-        a.setUseParentHandlers(false);
-        ConsoleHandler var1 = new ConsoleHandler();
-        var1.setFormatter(var0);
-        a.addHandler(var1);
+        a.setParent(FMLLog.getLogger());
 
         try
         {
-            FileHandler var2 = new FileHandler("server.log", true);
-            var2.setFormatter(var0);
-            a.addHandler(var2);
+            FileHandler var1 = new FileHandler("server.log", true);
+            var1.setFormatter(var0);
+            a.addHandler(var1);
         }
-        catch (Exception var3)
+        catch (Exception var2)
         {
-            a.log(Level.WARNING, "Failed to log to server.log", var3);
+            a.log(Level.WARNING, "Failed to log to server.log", var2);
         }
     }
 }
Index: ContainerFurnace.java
===================================================================
--- ContainerFurnace.java	(revision 3)
+++ ContainerFurnace.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.Iterator;
 
 public class ContainerFurnace extends Container
@@ -72,6 +74,25 @@
         this.h = this.furnace.ticksForCurrentFuel;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void b(int var1, int var2)
+    {
+        if (var1 == 0)
+        {
+            this.furnace.cookTime = var2;
+        }
+
+        if (var1 == 1)
+        {
+            this.furnace.burnTime = var2;
+        }
+
+        if (var1 == 2)
+        {
+            this.furnace.ticksForCurrentFuel = var2;
+        }
+    }
+
     public boolean c(EntityHuman var1)
     {
         return this.furnace.a(var1);
@@ -101,7 +122,7 @@
             }
             else if (var2 != 1 && var2 != 0)
             {
-                if (RecipesFurnace.getInstance().getResult(var5.getItem().id) != null)
+                if (RecipesFurnace.getInstance().getSmeltingResult(var5) != null)
                 {
                     if (!this.a(var5, 0, 1, false))
                     {
Index: CraftingManager.java
===================================================================
--- CraftingManager.java	(revision 3)
+++ CraftingManager.java	(working copy)
@@ -133,23 +133,23 @@
     /**
      * Adds a recipe. See spreadsheet on first page for details.
      */
-    void registerShapedRecipe(ItemStack var1, Object ... var2)
+    public void registerShapedRecipe(ItemStack var1, Object ... var2)
     {
         String var3 = "";
         int var4 = 0;
         int var5 = 0;
         int var6 = 0;
-        int var9;
+        int var7;
 
         if (var2[var4] instanceof String[])
         {
-            String[] var7 = (String[])((String[])var2[var4++]);
-            String[] var8 = var7;
-            var9 = var7.length;
+            String[] var8 = (String[])((String[])((String[])var2[var4++]));
+            String[] var9 = var8;
+            var7 = var8.length;
 
-            for (int var10 = 0; var10 < var9; ++var10)
+            for (int var10 = 0; var10 < var7; ++var10)
             {
-                String var11 = var8[var10];
+                String var11 = var9[var10];
                 ++var6;
                 var5 = var11.length();
                 var3 = var3 + var11;
@@ -166,49 +166,49 @@
             }
         }
 
-        HashMap var14;
+        HashMap var12;
 
-        for (var14 = new HashMap(); var4 < var2.length; var4 += 2)
+        for (var12 = new HashMap(); var4 < var2.length; var4 += 2)
         {
-            Character var16 = (Character)var2[var4];
-            ItemStack var17 = null;
+            Character var14 = (Character)var2[var4];
+            ItemStack var16 = null;
 
             if (var2[var4 + 1] instanceof Item)
             {
-                var17 = new ItemStack((Item)var2[var4 + 1]);
+                var16 = new ItemStack((Item)var2[var4 + 1]);
             }
             else if (var2[var4 + 1] instanceof Block)
             {
-                var17 = new ItemStack((Block)var2[var4 + 1], 1, -1);
+                var16 = new ItemStack((Block)var2[var4 + 1], 1, -1);
             }
             else if (var2[var4 + 1] instanceof ItemStack)
             {
-                var17 = (ItemStack)var2[var4 + 1];
+                var16 = (ItemStack)var2[var4 + 1];
             }
 
-            var14.put(var16, var17);
+            var12.put(var14, var16);
         }
 
         ItemStack[] var15 = new ItemStack[var5 * var6];
 
-        for (var9 = 0; var9 < var5 * var6; ++var9)
+        for (var7 = 0; var7 < var5 * var6; ++var7)
         {
-            char var18 = var3.charAt(var9);
+            char var17 = var3.charAt(var7);
 
-            if (var14.containsKey(Character.valueOf(var18)))
+            if (var12.containsKey(Character.valueOf(var17)))
             {
-                var15[var9] = ((ItemStack)var14.get(Character.valueOf(var18))).cloneItemStack();
+                var15[var7] = ((ItemStack)var12.get(Character.valueOf(var17))).cloneItemStack();
             }
             else
             {
-                var15[var9] = null;
+                var15[var7] = null;
             }
         }
 
         this.recipes.add(new ShapedRecipes(var5, var6, var15, var1));
     }
 
-    void registerShapelessRecipe(ItemStack var1, Object ... var2)
+    public void registerShapelessRecipe(ItemStack var1, Object ... var2)
     {
         ArrayList var3 = new ArrayList();
         Object[] var4 = var2;
@@ -266,7 +266,7 @@
             }
         }
 
-        if (var3 == 2 && var4.id == var5.id && var4.count == 1 && var5.count == 1 && Item.byId[var4.id].n())
+        if (var3 == 2 && var4.id == var5.id && var4.count == 1 && var5.count == 1 && Item.byId[var4.id].isRepairable())
         {
             Item var13 = Item.byId[var4.id];
             int var14 = var13.getMaxDurability() - var4.i();
@@ -284,20 +284,18 @@
         else
         {
             Iterator var11 = this.recipes.iterator();
-            IRecipe var12;
 
-            do
+            while (var11.hasNext())
             {
-                if (!var11.hasNext())
+                IRecipe var12 = (IRecipe)var11.next();
+
+                if (var12.a(var1, var2))
                 {
-                    return null;
+                    return var12.a(var1);
                 }
-
-                var12 = (IRecipe)var11.next();
             }
-            while (!var12.a(var1, var2));
 
-            return var12.a(var1);
+            return null;
         }
     }
 
Index: CrashReport.java
===================================================================
--- CrashReport.java	(revision 3)
+++ CrashReport.java	(working copy)
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.FMLCommonHandler;
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
@@ -45,6 +48,7 @@
         this.a("Memory", new CrashReportMemory(this));
         this.a("JVM Flags", new CrashReportJVMFlags(this));
         this.a("AABB Pool Size", new CrashReportAABBPoolSize(this));
+        FMLCommonHandler.instance().enhanceCrashReport(this);
     }
 
     /**
@@ -94,6 +98,14 @@
         return this.b;
     }
 
+    @SideOnly(Side.CLIENT)
+    public String c()
+    {
+        StringBuilder var1 = new StringBuilder();
+        this.a(var1);
+        return var1.toString();
+    }
+
     /**
      * Gets the various sections of the crash report into the given StringBuilder
      */
@@ -180,6 +192,12 @@
         return var1.toString();
     }
 
+    @SideOnly(Side.CLIENT)
+    public File f()
+    {
+        return this.d;
+    }
+
     /**
      * Saves the complete crash report to the given File.
      */
Index: DedicatedServer.java
===================================================================
--- DedicatedServer.java	(revision 3)
+++ DedicatedServer.java	(working copy)
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.FMLCommonHandler;
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.io.File;
 import java.io.IOException;
 import java.net.InetAddress;
@@ -31,7 +34,7 @@
     /**
      * Initialises the server and starts it.
      */
-    protected boolean init()
+    protected boolean init() throws IOException
     {
         ThreadCommandReader var1 = new ThreadCommandReader(this);
         var1.setDaemon(true);
@@ -44,6 +47,7 @@
             log.warning("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
         }
 
+        FMLCommonHandler.instance().onServerStart(this);
         log.info("Loading properties");
         this.propertyManager = new PropertyManager(new File("server.properties"));
 
@@ -103,6 +107,7 @@
             log.warning("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
         }
 
+        FMLCommonHandler.instance().onServerStarted();
         this.a(new ServerConfigurationManager(this));
         long var4 = System.nanoTime();
 
@@ -164,6 +169,7 @@
             this.n.a();
         }
 
+        FMLCommonHandler.instance().handleServerStarting(this);
         return true;
     }
 
@@ -231,7 +237,7 @@
         System.exit(0);
     }
 
-    protected void r()
+    public void r()
     {
         super.r();
         this.al();
@@ -340,12 +346,6 @@
         return var1 != null ? var1.getAbsolutePath() : "No settings file";
     }
 
-    public void func_82011_an()
-    {
-        ServerGUI.a(this);
-        this.s = true;
-    }
-
     public boolean ag()
     {
         return this.s;
@@ -379,4 +379,11 @@
     {
         return this.am();
     }
+
+    @SideOnly(Side.SERVER)
+    public void func_82011_an()
+    {
+        ServerGUI.a(this);
+        this.s = true;
 }
+}
Index: DedicatedServerConnectionThread.java
===================================================================
--- DedicatedServerConnectionThread.java	(revision 3)
+++ DedicatedServerConnectionThread.java	(working copy)
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.FMLLog;
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.io.IOException;
 import java.net.InetAddress;
 import java.net.ServerSocket;
@@ -22,7 +25,7 @@
     private final InetAddress g;
     private final int h;
 
-    public DedicatedServerConnectionThread(ServerConnection var1, InetAddress var2, int var3)
+    public DedicatedServerConnectionThread(ServerConnection var1, InetAddress var2, int var3) throws IOException
     {
         super("Listen thread");
         this.f = var1;
@@ -35,29 +38,31 @@
     public void a()
     {
         List var1 = this.b;
+        List var2 = this.b;
 
         synchronized (this.b)
         {
-            for (int var2 = 0; var2 < this.b.size(); ++var2)
+            for (int var3 = 0; var3 < this.b.size(); ++var3)
             {
-                NetLoginHandler var3 = (NetLoginHandler)this.b.get(var2);
+                NetLoginHandler var4 = (NetLoginHandler)this.b.get(var3);
 
                 try
                 {
-                    var3.c();
+                    var4.c();
                 }
-                catch (Exception var6)
+                catch (Exception var7)
                 {
-                    var3.disconnect("Internal server error");
-                    a.log(Level.WARNING, "Failed to handle packet: " + var6, var6);
+                    var4.disconnect("Internal server error");
+                    FMLLog.log(Level.SEVERE, var7, "Error handling login related packet - connection from %s refused", new Object[] {var4.h});
+                    a.log(Level.WARNING, "Failed to handle packet: " + var7, var7);
                 }
 
-                if (var3.c)
+                if (var4.c)
                 {
-                    this.b.remove(var2--);
+                    this.b.remove(var3--);
                 }
 
-                var3.networkManager.a();
+                var4.networkManager.a();
             }
         }
     }
@@ -72,6 +77,7 @@
                 InetAddress var2 = var1.getInetAddress();
                 long var3 = System.currentTimeMillis();
                 HashMap var5 = this.field_71776_c;
+                HashMap var6 = this.field_71776_c;
 
                 synchronized (this.field_71776_c)
                 {
@@ -85,12 +91,12 @@
                     this.field_71776_c.put(var2, Long.valueOf(var3));
                 }
 
-                NetLoginHandler var9 = new NetLoginHandler(this.f.d(), var1, "Connection #" + this.d++);
-                this.a(var9);
+                NetLoginHandler var10 = new NetLoginHandler(this.f.d(), var1, "Connection #" + this.d++);
+                this.a(var10);
             }
-            catch (IOException var8)
+            catch (IOException var9)
             {
-                var8.printStackTrace();
+                var9.printStackTrace();
             }
         }
 
@@ -106,6 +112,7 @@
         else
         {
             List var2 = this.b;
+            List var3 = this.b;
 
             synchronized (this.b)
             {
@@ -124,6 +131,7 @@
         if (var1 != null)
         {
             HashMap var2 = this.field_71776_c;
+            HashMap var3 = this.field_71776_c;
 
             synchronized (this.field_71776_c)
             {
@@ -143,4 +151,16 @@
             ;
         }
     }
+
+    @SideOnly(Side.CLIENT)
+    public InetAddress c()
+    {
+        return this.g;
 }
+
+    @SideOnly(Side.CLIENT)
+    public int d()
+    {
+        return this.h;
+    }
+}
Index: Enchantment.java
===================================================================
--- Enchantment.java	(revision 3)
+++ Enchantment.java	(working copy)
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+
 public abstract class Enchantment
 {
     public static final Enchantment[] byId = new Enchantment[256];
@@ -174,4 +177,22 @@
         this.name = var1;
         return this;
     }
+
+    @SideOnly(Side.CLIENT)
+    public String a()
+    {
+        return "enchantment." + this.name;
 }
+
+    @SideOnly(Side.CLIENT)
+    public String c(int var1)
+    {
+        String var2 = LocaleI18n.get(this.a());
+        return var2 + " " + LocaleI18n.get("enchantment.level." + var1);
+    }
+
+    public boolean canEnchantItem(ItemStack var1)
+    {
+        return this.slot.canEnchant(var1.getItem());
+    }
+}
Index: Entity.java
===================================================================
--- Entity.java	(revision 3)
+++ Entity.java	(working copy)
@@ -1,8 +1,12 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+import java.util.UUID;
 
 public abstract class Entity
 {
@@ -153,6 +157,10 @@
      */
     public int noDamageTicks;
     private boolean justCreated;
+    @SideOnly(Side.CLIENT)
+    public String cw;
+    @SideOnly(Side.CLIENT)
+    public String cx;
     protected boolean fireProof;
     protected DataWatcher datawatcher;
     private double f;
@@ -163,6 +171,12 @@
     public int ai;
     public int aj;
     public int ak;
+    @SideOnly(Side.CLIENT)
+    public int cy;
+    @SideOnly(Side.CLIENT)
+    public int cz;
+    @SideOnly(Side.CLIENT)
+    public int cA;
 
     /**
      * Render entity even if it is outside the camera frustum. Only true in EntityFish for now. Used in RenderGlobal:
@@ -180,6 +194,10 @@
     public int dimension;
     protected int field_82152_aq;
     public EnumEntitySize ar;
+    private NBTTagCompound customEntityData;
+    public boolean captureDrops = false;
+    public ArrayList capturedDrops = new ArrayList();
+    private UUID persistentID;
 
     public Entity(World var1)
     {
@@ -246,6 +264,28 @@
         return this.id;
     }
 
+    @SideOnly(Side.CLIENT)
+    protected void w()
+    {
+        if (this.world != null)
+        {
+            while (this.locY > 0.0D)
+            {
+                this.setPosition(this.locX, this.locY, this.locZ);
+
+                if (this.world.getCubes(this, this.boundingBox).isEmpty())
+                {
+                    break;
+                }
+
+                ++this.locY;
+            }
+
+            this.motX = this.motY = this.motZ = 0.0D;
+            this.pitch = 0.0F;
+        }
+    }
+
     /**
      * Will get destroyed next tick.
      */
@@ -311,6 +351,28 @@
         this.boundingBox.b(var1 - (double)var7, var3 - (double)this.height + (double)this.W, var5 - (double)var7, var1 + (double)var7, var3 - (double)this.height + (double)this.W + (double)var8, var5 + (double)var7);
     }
 
+    @SideOnly(Side.CLIENT)
+    public void c(float var1, float var2)
+    {
+        float var3 = this.pitch;
+        float var4 = this.yaw;
+        this.yaw = (float)((double)this.yaw + (double)var1 * 0.15D);
+        this.pitch = (float)((double)this.pitch - (double)var2 * 0.15D);
+
+        if (this.pitch < -90.0F)
+        {
+            this.pitch = -90.0F;
+        }
+
+        if (this.pitch > 90.0F)
+        {
+            this.pitch = 90.0F;
+        }
+
+        this.lastPitch += this.pitch - var3;
+        this.lastYaw += this.yaw - var4;
+    }
+
     /**
      * Called to update the entity's position/logic.
      */
@@ -338,20 +400,20 @@
         this.lastZ = this.locZ;
         this.lastPitch = this.pitch;
         this.lastYaw = this.yaw;
-        int var2;
+        int var1;
 
         if (!this.world.isStatic && this.world instanceof WorldServer)
         {
-            MinecraftServer var1 = ((WorldServer)this.world).getMinecraftServer();
-            var2 = this.z();
+            MinecraftServer var2 = ((WorldServer)this.world).getMinecraftServer();
+            var1 = this.z();
 
             if (this.ao)
             {
-                if (var1.getAllowNether())
+                if (var2.getAllowNether())
                 {
-                    if (this.vehicle == null && this.field_82153_h++ >= var2)
+                    if (this.vehicle == null && this.field_82153_h++ >= var1)
                     {
-                        this.field_82153_h = var2;
+                        this.field_82153_h = var1;
                         this.an = this.ab();
                         byte var3;
 
@@ -389,14 +451,14 @@
             }
         }
 
-        int var9;
+        int var7;
 
         if (this.isSprinting() && !this.H())
         {
-            int var6 = MathHelper.floor(this.locX);
-            var2 = MathHelper.floor(this.locY - 0.20000000298023224D - (double)this.height);
-            var9 = MathHelper.floor(this.locZ);
-            int var4 = this.world.getTypeId(var6, var2, var9);
+            int var8 = MathHelper.floor(this.locX);
+            var1 = MathHelper.floor(this.locY - 0.20000000298023224D - (double)this.height);
+            var7 = MathHelper.floor(this.locZ);
+            int var4 = this.world.getTypeId(var8, var1, var7);
 
             if (var4 > 0)
             {
@@ -408,30 +470,30 @@
         {
             if (!this.ad && !this.justCreated)
             {
-                float var7 = MathHelper.sqrt(this.motX * this.motX * 0.20000000298023224D + this.motY * this.motY + this.motZ * this.motZ * 0.20000000298023224D) * 0.2F;
+                float var10 = MathHelper.sqrt(this.motX * this.motX * 0.20000000298023224D + this.motY * this.motY + this.motZ * this.motZ * 0.20000000298023224D) * 0.2F;
 
-                if (var7 > 1.0F)
+                if (var10 > 1.0F)
                 {
-                    var7 = 1.0F;
+                    var10 = 1.0F;
                 }
 
-                this.world.makeSound(this, "liquid.splash", var7, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
-                float var8 = (float)MathHelper.floor(this.boundingBox.b);
+                this.world.makeSound(this, "liquid.splash", var10, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+                float var9 = (float)MathHelper.floor(this.boundingBox.b);
                 float var5;
-                float var10;
+                float var6;
 
-                for (var9 = 0; (float)var9 < 1.0F + this.width * 20.0F; ++var9)
+                for (var7 = 0; (float)var7 < 1.0F + this.width * 20.0F; ++var7)
                 {
-                    var10 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
+                    var6 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
                     var5 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
-                    this.world.addParticle("bubble", this.locX + (double)var10, (double)(var8 + 1.0F), this.locZ + (double)var5, this.motX, this.motY - (double)(this.random.nextFloat() * 0.2F), this.motZ);
+                    this.world.addParticle("bubble", this.locX + (double)var6, (double)(var9 + 1.0F), this.locZ + (double)var5, this.motX, this.motY - (double)(this.random.nextFloat() * 0.2F), this.motZ);
                 }
 
-                for (var9 = 0; (float)var9 < 1.0F + this.width * 20.0F; ++var9)
+                for (var7 = 0; (float)var7 < 1.0F + this.width * 20.0F; ++var7)
                 {
-                    var10 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
+                    var6 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
                     var5 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
-                    this.world.addParticle("splash", this.locX + (double)var10, (double)(var8 + 1.0F), this.locZ + (double)var5, this.motX, this.motY, this.motZ);
+                    this.world.addParticle("splash", this.locX + (double)var6, (double)(var9 + 1.0F), this.locZ + (double)var5, this.motX, this.motY, this.motZ);
                 }
             }
 
@@ -656,12 +718,12 @@
                 }
             }
 
-            List var36 = this.world.getCubes(this, this.boundingBox.a(var1, var3, var5));
-            AxisAlignedBB var23;
+            List var38 = this.world.getCubes(this, this.boundingBox.a(var1, var3, var5));
+            AxisAlignedBB var22;
 
-            for (Iterator var22 = var36.iterator(); var22.hasNext(); var3 = var23.b(this.boundingBox, var3))
+            for (Iterator var23 = var38.iterator(); var23.hasNext(); var3 = var22.b(this.boundingBox, var3))
             {
-                var23 = (AxisAlignedBB)var22.next();
+                var22 = (AxisAlignedBB)var23.next();
             }
 
             this.boundingBox.d(0.0D, var3, 0.0D);
@@ -673,13 +735,13 @@
                 var1 = 0.0D;
             }
 
-            boolean var34 = this.onGround || var15 != var3 && var15 < 0.0D;
+            boolean var37 = this.onGround || var15 != var3 && var15 < 0.0D;
+            Iterator var25;
             AxisAlignedBB var24;
-            Iterator var35;
 
-            for (var35 = var36.iterator(); var35.hasNext(); var1 = var24.a(this.boundingBox, var1))
+            for (var25 = var38.iterator(); var25.hasNext(); var1 = var24.a(this.boundingBox, var1))
             {
-                var24 = (AxisAlignedBB)var35.next();
+                var24 = (AxisAlignedBB)var25.next();
             }
 
             this.boundingBox.d(var1, 0.0D, 0.0D);
@@ -691,9 +753,9 @@
                 var1 = 0.0D;
             }
 
-            for (var35 = var36.iterator(); var35.hasNext(); var5 = var24.c(this.boundingBox, var5))
+            for (var25 = var38.iterator(); var25.hasNext(); var5 = var24.c(this.boundingBox, var5))
             {
-                var24 = (AxisAlignedBB)var35.next();
+                var24 = (AxisAlignedBB)var25.next();
             }
 
             this.boundingBox.d(0.0D, 0.0D, var5);
@@ -705,27 +767,27 @@
                 var1 = 0.0D;
             }
 
-            double var25;
-            double var27;
-            double var37;
+            double var26;
+            double var28;
+            double var30;
 
-            if (this.X > 0.0F && var34 && (var20 || this.W < 0.05F) && (var13 != var1 || var17 != var5))
+            if (this.X > 0.0F && var37 && (var20 || this.W < 0.05F) && (var13 != var1 || var17 != var5))
             {
-                var37 = var1;
-                var25 = var3;
-                var27 = var5;
+                var30 = var1;
+                var26 = var3;
+                var28 = var5;
                 var1 = var13;
                 var3 = (double)this.X;
                 var5 = var17;
-                AxisAlignedBB var29 = this.boundingBox.clone();
+                AxisAlignedBB var32 = this.boundingBox.clone();
                 this.boundingBox.c(var19);
-                var36 = this.world.getCubes(this, this.boundingBox.a(var13, var3, var17));
-                AxisAlignedBB var31;
-                Iterator var30;
+                var38 = this.world.getCubes(this, this.boundingBox.a(var13, var3, var17));
+                Iterator var34;
+                AxisAlignedBB var33;
 
-                for (var30 = var36.iterator(); var30.hasNext(); var3 = var31.b(this.boundingBox, var3))
+                for (var34 = var38.iterator(); var34.hasNext(); var3 = var33.b(this.boundingBox, var3))
                 {
-                    var31 = (AxisAlignedBB)var30.next();
+                    var33 = (AxisAlignedBB)var34.next();
                 }
 
                 this.boundingBox.d(0.0D, var3, 0.0D);
@@ -737,9 +799,9 @@
                     var1 = 0.0D;
                 }
 
-                for (var30 = var36.iterator(); var30.hasNext(); var1 = var31.a(this.boundingBox, var1))
+                for (var34 = var38.iterator(); var34.hasNext(); var1 = var33.a(this.boundingBox, var1))
                 {
-                    var31 = (AxisAlignedBB)var30.next();
+                    var33 = (AxisAlignedBB)var34.next();
                 }
 
                 this.boundingBox.d(var1, 0.0D, 0.0D);
@@ -751,9 +813,9 @@
                     var1 = 0.0D;
                 }
 
-                for (var30 = var36.iterator(); var30.hasNext(); var5 = var31.c(this.boundingBox, var5))
+                for (var34 = var38.iterator(); var34.hasNext(); var5 = var33.c(this.boundingBox, var5))
                 {
-                    var31 = (AxisAlignedBB)var30.next();
+                    var33 = (AxisAlignedBB)var34.next();
                 }
 
                 this.boundingBox.d(0.0D, 0.0D, var5);
@@ -775,28 +837,28 @@
                 {
                     var3 = (double)(-this.X);
 
-                    for (var30 = var36.iterator(); var30.hasNext(); var3 = var31.b(this.boundingBox, var3))
+                    for (var34 = var38.iterator(); var34.hasNext(); var3 = var33.b(this.boundingBox, var3))
                     {
-                        var31 = (AxisAlignedBB)var30.next();
+                        var33 = (AxisAlignedBB)var34.next();
                     }
 
                     this.boundingBox.d(0.0D, var3, 0.0D);
                 }
 
-                if (var37 * var37 + var27 * var27 >= var1 * var1 + var5 * var5)
+                if (var30 * var30 + var28 * var28 >= var1 * var1 + var5 * var5)
                 {
-                    var1 = var37;
-                    var3 = var25;
-                    var5 = var27;
-                    this.boundingBox.c(var29);
+                    var1 = var30;
+                    var3 = var26;
+                    var5 = var28;
+                    this.boundingBox.c(var32);
                 }
                 else
                 {
-                    double var38 = this.boundingBox.b - (double)((int)this.boundingBox.b);
+                    double var35 = this.boundingBox.b - (double)((int)this.boundingBox.b);
 
-                    if (var38 > 0.0D)
+                    if (var35 > 0.0D)
                     {
-                        this.W = (float)((double)this.W + var38 + 0.01D);
+                        this.W = (float)((double)this.W + var35 + 0.01D);
                     }
                 }
             }
@@ -827,48 +889,48 @@
                 this.motZ = 0.0D;
             }
 
-            var37 = this.locX - var7;
-            var25 = this.locY - var9;
-            var27 = this.locZ - var11;
+            var30 = this.locX - var7;
+            var26 = this.locY - var9;
+            var28 = this.locZ - var11;
 
             if (this.f_() && !var20 && this.vehicle == null)
             {
                 int var39 = MathHelper.floor(this.locX);
-                int var42 = MathHelper.floor(this.locY - 0.20000000298023224D - (double)this.height);
+                int var43 = MathHelper.floor(this.locY - 0.20000000298023224D - (double)this.height);
                 int var41 = MathHelper.floor(this.locZ);
-                int var32 = this.world.getTypeId(var39, var42, var41);
+                int var42 = this.world.getTypeId(var39, var43, var41);
 
-                if (var32 == 0 && this.world.getTypeId(var39, var42 - 1, var41) == Block.FENCE.id)
+                if (var42 == 0 && this.world.getTypeId(var39, var43 - 1, var41) == Block.FENCE.id)
                 {
-                    var32 = this.world.getTypeId(var39, var42 - 1, var41);
+                    var42 = this.world.getTypeId(var39, var43 - 1, var41);
                 }
 
-                if (var32 != Block.LADDER.id)
+                if (var42 != Block.LADDER.id)
                 {
-                    var25 = 0.0D;
+                    var26 = 0.0D;
                 }
 
-                this.Q = (float)((double)this.Q + (double)MathHelper.sqrt(var37 * var37 + var27 * var27) * 0.6D);
-                this.field_82151_R = (float)((double)this.field_82151_R + (double)MathHelper.sqrt(var37 * var37 + var25 * var25 + var27 * var27) * 0.6D);
+                this.Q = (float)((double)this.Q + (double)MathHelper.sqrt(var30 * var30 + var28 * var28) * 0.6D);
+                this.field_82151_R = (float)((double)this.field_82151_R + (double)MathHelper.sqrt(var30 * var30 + var26 * var26 + var28 * var28) * 0.6D);
 
-                if (this.field_82151_R > (float)this.c && var32 > 0)
+                if (this.field_82151_R > (float)this.c && var42 > 0)
                 {
                     this.c = (int)this.field_82151_R + 1;
 
                     if (this.H())
                     {
-                        float var33 = MathHelper.sqrt(this.motX * this.motX * 0.20000000298023224D + this.motY * this.motY + this.motZ * this.motZ * 0.20000000298023224D) * 0.35F;
+                        float var36 = MathHelper.sqrt(this.motX * this.motX * 0.20000000298023224D + this.motY * this.motY + this.motZ * this.motZ * 0.20000000298023224D) * 0.35F;
 
-                        if (var33 > 1.0F)
+                        if (var36 > 1.0F)
                         {
-                            var33 = 1.0F;
+                            var36 = 1.0F;
                         }
 
-                        this.world.makeSound(this, "liquid.swim", var33, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+                        this.world.makeSound(this, "liquid.swim", var36, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
                     }
 
-                    this.a(var39, var42, var41, var32);
-                    Block.byId[var32].b(this.world, var39, var42, var41, this);
+                    this.a(var39, var43, var41, var42);
+                    Block.byId[var42].b(this.world, var39, var43, var41, this);
                 }
             }
 
@@ -1106,6 +1168,24 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public int b(float var1)
+    {
+        int var2 = MathHelper.floor(this.locX);
+        int var3 = MathHelper.floor(this.locZ);
+
+        if (this.world.isLoaded(var2, 0, var3))
+        {
+            double var4 = (this.boundingBox.e - this.boundingBox.b) * 0.66D;
+            int var6 = MathHelper.floor(this.locY - (double)this.height + var4);
+            return this.world.i(var2, var6, var3, 0);
+        }
+        else
+        {
+            return 0;
+        }
+    }
+
     /**
      * Gets how bright this entity is.
      */
@@ -1327,6 +1407,30 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public boolean a(Vec3D var1)
+    {
+        double var2 = this.locX - var1.c;
+        double var4 = this.locY - var1.d;
+        double var6 = this.locZ - var1.e;
+        double var8 = var2 * var2 + var4 * var4 + var6 * var6;
+        return this.a(var8);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public boolean a(double var1)
+    {
+        double var3 = this.boundingBox.b();
+        var3 *= 64.0D * this.l;
+        return var1 < var3 * var3;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public String O()
+    {
+        return null;
+    }
+
     /**
      * Save the entity to NBT (calls an abstract helper method to write extra data)
      */
@@ -1340,6 +1444,18 @@
         var1.setShort("Air", (short)this.getAirTicks());
         var1.setBoolean("OnGround", this.onGround);
         var1.setInt("Dimension", this.dimension);
+
+        if (this.persistentID != null)
+        {
+            var1.setLong("PersistentIDMSB", this.persistentID.getMostSignificantBits());
+            var1.setLong("PersistentIDLSB", this.persistentID.getLeastSignificantBits());
+        }
+
+        if (this.customEntityData != null)
+        {
+            var1.setCompound("ForgeData", this.customEntityData);
+        }
+
         this.b(var1);
     }
 
@@ -1382,6 +1498,17 @@
         this.dimension = var1.getInt("Dimension");
         this.setPosition(this.locX, this.locY, this.locZ);
         this.b(this.yaw, this.pitch);
+
+        if (var1.hasKey("ForgeData"))
+        {
+            this.customEntityData = var1.getCompound("ForgeData");
+        }
+
+        if (var1.hasKey("PersistentIDMSB") && var1.hasKey("PersistentIDLSB"))
+        {
+            this.persistentID = new UUID(var1.getLong("PersistentIDMSB"), var1.getLong("PersistentIDLSB"));
+        }
+
         this.a(var1);
     }
 
@@ -1439,6 +1566,12 @@
         return var2;
     }
 
+    @SideOnly(Side.CLIENT)
+    public float R()
+    {
+        return this.length / 2.0F;
+    }
+
     /**
      * Drops an item stack at the entity's position. Args: itemID, count
      */
@@ -1462,7 +1595,16 @@
     {
         EntityItem var3 = new EntityItem(this.world, this.locX, this.locY + (double)var2, this.locZ, var1);
         var3.pickupDelay = 10;
+
+        if (this.captureDrops)
+        {
+            this.capturedDrops.add(var3);
+        }
+        else
+        {
         this.world.addEntity(var3);
+        }
+
         return var3;
     }
 
@@ -1661,42 +1803,69 @@
      */
     public void h(Entity var1)
     {
-        double var3 = var1.locX;
-        double var5 = var1.boundingBox.b + (double)var1.length;
-        double var7 = var1.locZ;
+        double var2 = var1.locX;
+        double var4 = var1.boundingBox.b + (double)var1.length;
+        double var6 = var1.locZ;
 
-        for (double var9 = -1.5D; var9 < 2.0D; ++var9)
+        for (double var8 = -1.5D; var8 < 2.0D; ++var8)
         {
-            for (double var11 = -1.5D; var11 < 2.0D; ++var11)
+            for (double var10 = -1.5D; var10 < 2.0D; ++var10)
             {
-                if (var9 != 0.0D || var11 != 0.0D)
+                if (var8 != 0.0D || var10 != 0.0D)
                 {
-                    int var13 = (int)(this.locX + var9);
-                    int var14 = (int)(this.locZ + var11);
-                    AxisAlignedBB var2 = this.boundingBox.c(var9, 1.0D, var11);
+                    int var12 = (int)(this.locX + var8);
+                    int var13 = (int)(this.locZ + var10);
+                    AxisAlignedBB var14 = this.boundingBox.c(var8, 1.0D, var10);
 
-                    if (this.world.a(var2).isEmpty())
+                    if (this.world.a(var14).isEmpty())
                     {
-                        if (this.world.t(var13, (int)this.locY, var14))
+                        if (this.world.t(var12, (int)this.locY, var13))
                         {
-                            this.setPositionRotation(this.locX + var9, this.locY + 1.0D, this.locZ + var11, this.yaw, this.pitch);
+                            this.setPositionRotation(this.locX + var8, this.locY + 1.0D, this.locZ + var10, this.yaw, this.pitch);
                             return;
                         }
 
-                        if (this.world.t(var13, (int)this.locY - 1, var14) || this.world.getMaterial(var13, (int)this.locY - 1, var14) == Material.WATER)
+                        if (this.world.t(var12, (int)this.locY - 1, var13) || this.world.getMaterial(var12, (int)this.locY - 1, var13) == Material.WATER)
                         {
-                            var3 = this.locX + var9;
-                            var5 = this.locY + 1.0D;
-                            var7 = this.locZ + var11;
+                            var2 = this.locX + var8;
+                            var4 = this.locY + 1.0D;
+                            var6 = this.locZ + var10;
                         }
                     }
                 }
             }
         }
 
-        this.setPositionRotation(var3, var5, var7, this.yaw, this.pitch);
+        this.setPositionRotation(var2, var4, var6, this.yaw, this.pitch);
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a(double var1, double var3, double var5, float var7, float var8, int var9)
+    {
+        this.setPosition(var1, var3, var5);
+        this.b(var7, var8);
+        List var10 = this.world.getCubes(this, this.boundingBox.shrink(0.03125D, 0.0D, 0.03125D));
+
+        if (!var10.isEmpty())
+        {
+            double var11 = 0.0D;
+            Iterator var13 = var10.iterator();
+
+            while (var13.hasNext())
+            {
+                AxisAlignedBB var14 = (AxisAlignedBB)var13.next();
+
+                if (var14.e > var11)
+                {
+                    var11 = var14.e;
+                }
+            }
+
+            var3 += var11 - this.boundingBox.b;
+            this.setPosition(var1, var3, var5);
+        }
+    }
+
     public float Y()
     {
         return 0.1F;
@@ -1741,6 +1910,23 @@
         return 500;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void h(double var1, double var3, double var5)
+    {
+        this.motX = var1;
+        this.motY = var3;
+        this.motZ = var5;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public void a(byte var1) {}
+
+    @SideOnly(Side.CLIENT)
+    public void ac() {}
+
+    @SideOnly(Side.CLIENT)
+    public void ad() {}
+
     /**
      * returns the inventory of this entity (only used in EntityPlayerMP it seems)
      */
@@ -1761,7 +1947,7 @@
 
     public boolean func_70115_ae()
     {
-        return this.vehicle != null || this.e(2);
+        return this.vehicle != null && this.vehicle.shouldRiderSit() || this.e(2);
     }
 
     /**
@@ -1806,6 +1992,12 @@
         this.a(5, var1);
     }
 
+    @SideOnly(Side.CLIENT)
+    public boolean ak()
+    {
+        return this.e(4);
+    }
+
     public void d(boolean var1)
     {
         this.a(4, var1);
@@ -2010,6 +2202,9 @@
         return 0.0F;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void d(float var1) {}
+
     /**
      * If returns false, the item will not inflict any damage against entities.
      */
@@ -2065,7 +2260,7 @@
 
     public float func_82146_a(Explosion var1, Block var2, int var3, int var4, int var5)
     {
-        return var2.a(this);
+        return var2.getExplosionResistance(this, this.world, var3, var4, var5, this.locX, this.locY + (double)this.getHeadHeight(), this.locZ);
     }
 
     public int func_82143_as()
@@ -2085,4 +2280,58 @@
     {
         return false;
     }
+
+    public NBTTagCompound getEntityData()
+    {
+        if (this.customEntityData == null)
+        {
+            this.customEntityData = new NBTTagCompound();
 }
+
+        return this.customEntityData;
+    }
+
+    public boolean shouldRiderSit()
+    {
+        return true;
+    }
+
+    public ItemStack getPickedResult(MovingObjectPosition var1)
+    {
+        if (this instanceof EntityPainting)
+        {
+            return new ItemStack(Item.PAINTING);
+        }
+        else if (this instanceof EntityMinecart)
+        {
+            return ((EntityMinecart)this).getCartItem();
+        }
+        else if (this instanceof EntityBoat)
+        {
+            return new ItemStack(Item.BOAT);
+        }
+        else if (this instanceof EntityItemFrame)
+        {
+            ItemStack var3 = ((EntityItemFrame)this).func_82335_i();
+            return var3 == null ? new ItemStack(Item.ITEM_FRAME) : var3.cloneItemStack();
+        }
+        else
+        {
+            int var2 = EntityTypes.a(this);
+            return var2 > 0 && EntityTypes.a.containsKey(Integer.valueOf(var2)) ? new ItemStack(Item.MONSTER_EGG, 1, var2) : null;
+        }
+    }
+
+    public UUID getPersistentID()
+    {
+        return this.persistentID;
+    }
+
+    public synchronized void generatePersistentID()
+    {
+        if (this.persistentID == null)
+        {
+            this.persistentID = UUID.randomUUID();
+        }
+    }
+}
Index: EntityEnderDragon.java
===================================================================
--- EntityEnderDragon.java	(revision 3)
+++ EntityEnderDragon.java	(working copy)
@@ -1,9 +1,11 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.Iterator;
 import java.util.List;
 
-public class EntityEnderDragon extends EntityLiving implements IComplex
+public class EntityEnderDragon extends EntityLiving implements ou, IComplex
 {
     public double a;
     public double b;
@@ -156,10 +158,10 @@
 
             if (this.e < 0)
             {
-                for (int var25 = 0; var25 < this.d.length; ++var25)
+                for (int var4 = 0; var4 < this.d.length; ++var4)
                 {
-                    this.d[var25][0] = (double)this.yaw;
-                    this.d[var25][1] = this.locY;
+                    this.d[var4][0] = (double)this.yaw;
+                    this.d[var4][1] = this.locY;
                 }
             }
 
@@ -170,49 +172,55 @@
 
             this.d[this.e][0] = (double)this.yaw;
             this.d[this.e][1] = this.locY;
-            double var4;
             double var6;
             double var8;
-            double var26;
-            float var33;
+            double var10;
+            float var12;
+            float var23;
+            float var24;
+            float var26;
+            double var28;
+            float var35;
 
             if (this.world.isStatic)
             {
                 if (this.bu > 0)
                 {
-                    var26 = this.locX + (this.bv - this.locX) / (double)this.bu;
-                    var4 = this.locY + (this.bw - this.locY) / (double)this.bu;
+                    var10 = this.locX + (this.bv - this.locX) / (double)this.bu;
+                    var28 = this.locY + (this.bw - this.locY) / (double)this.bu;
                     var6 = this.locZ + (this.bx - this.locZ) / (double)this.bu;
                     var8 = MathHelper.g(this.by - (double)this.yaw);
                     this.yaw = (float)((double)this.yaw + var8 / (double)this.bu);
                     this.pitch = (float)((double)this.pitch + (this.bz - (double)this.pitch) / (double)this.bu);
                     --this.bu;
-                    this.setPosition(var26, var4, var6);
+                    this.setPosition(var10, var28, var6);
                     this.b(this.yaw, this.pitch);
                 }
             }
             else
             {
-                var26 = this.a - this.locX;
-                var4 = this.b - this.locY;
+                var10 = this.a - this.locX;
+                var28 = this.b - this.locY;
                 var6 = this.c - this.locZ;
-                var8 = var26 * var26 + var4 * var4 + var6 * var6;
+                var8 = var10 * var10 + var28 * var28 + var6 * var6;
+                double var13;
+                double var15;
 
                 if (this.bT != null)
                 {
                     this.a = this.bT.locX;
                     this.c = this.bT.locZ;
-                    double var10 = this.a - this.locX;
-                    double var12 = this.c - this.locZ;
-                    double var14 = Math.sqrt(var10 * var10 + var12 * var12);
-                    double var16 = 0.4000000059604645D + var14 / 80.0D - 1.0D;
+                    var13 = this.a - this.locX;
+                    var15 = this.c - this.locZ;
+                    double var17 = Math.sqrt(var13 * var13 + var15 * var15);
+                    double var19 = 0.4000000059604645D + var17 / 80.0D - 1.0D;
 
-                    if (var16 > 10.0D)
+                    if (var19 > 10.0D)
                     {
-                        var16 = 10.0D;
+                        var19 = 10.0D;
                     }
 
-                    this.b = this.bT.boundingBox.b + var16;
+                    this.b = this.bT.boundingBox.b + var19;
                 }
                 else
                 {
@@ -225,57 +233,57 @@
                     this.i();
                 }
 
-                var4 /= (double)MathHelper.sqrt(var26 * var26 + var6 * var6);
-                var33 = 0.6F;
+                var28 /= (double)MathHelper.sqrt(var10 * var10 + var6 * var6);
+                var12 = 0.6F;
 
-                if (var4 < (double)(-var33))
+                if (var28 < (double)(-var12))
                 {
-                    var4 = (double)(-var33);
+                    var28 = (double)(-var12);
                 }
 
-                if (var4 > (double)var33)
+                if (var28 > (double)var12)
                 {
-                    var4 = (double)var33;
+                    var28 = (double)var12;
                 }
 
-                this.motY += var4 * 0.10000000149011612D;
+                this.motY += var28 * 0.10000000149011612D;
                 this.yaw = MathHelper.g(this.yaw);
-                double var11 = 180.0D - Math.atan2(var26, var6) * 180.0D / Math.PI;
-                double var13 = MathHelper.g(var11 - (double)this.yaw);
+                var13 = 180.0D - Math.atan2(var10, var6) * 180.0D / Math.PI;
+                var15 = MathHelper.g(var13 - (double)this.yaw);
 
-                if (var13 > 50.0D)
+                if (var15 > 50.0D)
                 {
-                    var13 = 50.0D;
+                    var15 = 50.0D;
                 }
 
-                if (var13 < -50.0D)
+                if (var15 < -50.0D)
                 {
-                    var13 = -50.0D;
+                    var15 = -50.0D;
                 }
 
-                Vec3D var15 = this.world.getVec3DPool().create(this.a - this.locX, this.b - this.locY, this.c - this.locZ).a();
-                Vec3D var40 = this.world.getVec3DPool().create((double)MathHelper.sin(this.yaw * (float)Math.PI / 180.0F), this.motY, (double)(-MathHelper.cos(this.yaw * (float)Math.PI / 180.0F))).a();
-                float var17 = (float)(var40.b(var15) + 0.5D) / 1.5F;
+                Vec3D var31 = this.world.getVec3DPool().create(this.a - this.locX, this.b - this.locY, this.c - this.locZ).a();
+                Vec3D var18 = this.world.getVec3DPool().create((double)MathHelper.sin(this.yaw * (float)Math.PI / 180.0F), this.motY, (double)(-MathHelper.cos(this.yaw * (float)Math.PI / 180.0F))).a();
+                var35 = (float)(var18.b(var31) + 0.5D) / 1.5F;
 
-                if (var17 < 0.0F)
+                if (var35 < 0.0F)
                 {
-                    var17 = 0.0F;
+                    var35 = 0.0F;
                 }
 
                 this.bF *= 0.8F;
-                float var18 = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ) * 1.0F + 1.0F;
-                double var19 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ) * 1.0D + 1.0D;
+                float var20 = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ) * 1.0F + 1.0F;
+                double var21 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ) * 1.0D + 1.0D;
 
-                if (var19 > 40.0D)
+                if (var21 > 40.0D)
                 {
-                    var19 = 40.0D;
+                    var21 = 40.0D;
                 }
 
-                this.bF = (float)((double)this.bF + var13 * (0.699999988079071D / var19 / (double)var18));
+                this.bF = (float)((double)this.bF + var15 * (0.699999988079071D / var21 / (double)var20));
                 this.yaw += this.bF * 0.1F;
-                float var21 = (float)(2.0D / (var19 + 1.0D));
-                float var22 = 0.06F;
-                this.a(0.0F, -1.0F, var22 * (var17 * var21 + (1.0F - var21)));
+                var23 = (float)(2.0D / (var21 + 1.0D));
+                var24 = 0.06F;
+                this.a(0.0F, -1.0F, var24 * (var35 * var23 + (1.0F - var23)));
 
                 if (this.bQ)
                 {
@@ -286,11 +294,11 @@
                     this.move(this.motX, this.motY, this.motZ);
                 }
 
-                Vec3D var23 = this.world.getVec3DPool().create(this.motX, this.motY, this.motZ).a();
-                float var24 = (float)(var23.b(var40) + 1.0D) / 2.0F;
-                var24 = 0.8F + 0.15F * var24;
-                this.motX *= (double)var24;
-                this.motZ *= (double)var24;
+                Vec3D var25 = this.world.getVec3DPool().create(this.motX, this.motY, this.motZ).a();
+                var26 = (float)(var25.b(var18) + 1.0D) / 2.0F;
+                var26 = 0.8F + 0.15F * var26;
+                this.motX *= (double)var26;
+                this.motZ *= (double)var26;
                 this.motY *= 0.9100000262260437D;
             }
 
@@ -307,16 +315,16 @@
             this.bM.width = 4.0F;
             var2 = (float)(this.a(5, 1.0F)[1] - this.a(10, 1.0F)[1]) * 10.0F / 180.0F * (float)Math.PI;
             var3 = MathHelper.cos(var2);
-            float var28 = -MathHelper.sin(var2);
-            float var5 = this.yaw * (float)Math.PI / 180.0F;
-            float var27 = MathHelper.sin(var5);
-            float var7 = MathHelper.cos(var5);
+            float var29 = -MathHelper.sin(var2);
+            float var14 = this.yaw * (float)Math.PI / 180.0F;
+            float var32 = MathHelper.sin(var14);
+            float var16 = MathHelper.cos(var14);
             this.h.j_();
-            this.h.setPositionRotation(this.locX + (double)(var27 * 0.5F), this.locY, this.locZ - (double)(var7 * 0.5F), 0.0F, 0.0F);
+            this.h.setPositionRotation(this.locX + (double)(var32 * 0.5F), this.locY, this.locZ - (double)(var16 * 0.5F), 0.0F, 0.0F);
             this.bL.j_();
-            this.bL.setPositionRotation(this.locX + (double)(var7 * 4.5F), this.locY + 2.0D, this.locZ + (double)(var27 * 4.5F), 0.0F, 0.0F);
+            this.bL.setPositionRotation(this.locX + (double)(var16 * 4.5F), this.locY + 2.0D, this.locZ + (double)(var32 * 4.5F), 0.0F, 0.0F);
             this.bM.j_();
-            this.bM.setPositionRotation(this.locX - (double)(var7 * 4.5F), this.locY + 2.0D, this.locZ - (double)(var27 * 4.5F), 0.0F, 0.0F);
+            this.bM.setPositionRotation(this.locX - (double)(var16 * 4.5F), this.locY + 2.0D, this.locZ - (double)(var32 * 4.5F), 0.0F, 0.0F);
 
             if (!this.world.isStatic && this.hurtTicks == 0)
             {
@@ -325,40 +333,40 @@
                 this.b(this.world.getEntities(this, this.g.boundingBox.grow(1.0D, 1.0D, 1.0D)));
             }
 
-            double[] var29 = this.a(5, 1.0F);
-            double[] var9 = this.a(0, 1.0F);
-            var33 = MathHelper.sin(this.yaw * (float)Math.PI / 180.0F - this.bF * 0.01F);
-            float var32 = MathHelper.cos(this.yaw * (float)Math.PI / 180.0F - this.bF * 0.01F);
+            double[] var30 = this.a(5, 1.0F);
+            double[] var33 = this.a(0, 1.0F);
+            var12 = MathHelper.sin(this.yaw * (float)Math.PI / 180.0F - this.bF * 0.01F);
+            var35 = MathHelper.cos(this.yaw * (float)Math.PI / 180.0F - this.bF * 0.01F);
             this.g.j_();
-            this.g.setPositionRotation(this.locX + (double)(var33 * 5.5F * var3), this.locY + (var9[1] - var29[1]) * 1.0D + (double)(var28 * 5.5F), this.locZ - (double)(var32 * 5.5F * var3), 0.0F, 0.0F);
+            this.g.setPositionRotation(this.locX + (double)(var12 * 5.5F * var3), this.locY + (var33[1] - var30[1]) * 1.0D + (double)(var29 * 5.5F), this.locZ - (double)(var35 * 5.5F * var3), 0.0F, 0.0F);
 
-            for (int var30 = 0; var30 < 3; ++var30)
+            for (int var34 = 0; var34 < 3; ++var34)
             {
-                EntityComplexPart var31 = null;
+                EntityComplexPart var36 = null;
 
-                if (var30 == 0)
+                if (var34 == 0)
                 {
-                    var31 = this.i;
+                    var36 = this.i;
                 }
 
-                if (var30 == 1)
+                if (var34 == 1)
                 {
-                    var31 = this.j;
+                    var36 = this.j;
                 }
 
-                if (var30 == 2)
+                if (var34 == 2)
                 {
-                    var31 = this.bK;
+                    var36 = this.bK;
                 }
 
-                double[] var35 = this.a(12 + var30 * 2, 1.0F);
-                float var34 = this.yaw * (float)Math.PI / 180.0F + this.b(var35[0] - var29[0]) * (float)Math.PI / 180.0F * 1.0F;
-                float var38 = MathHelper.sin(var34);
-                float var37 = MathHelper.cos(var34);
-                float var36 = 1.5F;
-                float var39 = (float)(var30 + 1) * 2.0F;
-                var31.j_();
-                var31.setPositionRotation(this.locX - (double)((var27 * var36 + var38 * var39) * var3), this.locY + (var35[1] - var29[1]) * 1.0D - (double)((var39 + var36) * var28) + 1.5D, this.locZ + (double)((var7 * var36 + var37 * var39) * var3), 0.0F, 0.0F);
+                double[] var22 = this.a(12 + var34 * 2, 1.0F);
+                var23 = this.yaw * (float)Math.PI / 180.0F + this.b(var22[0] - var30[0]) * (float)Math.PI / 180.0F * 1.0F;
+                var24 = MathHelper.sin(var23);
+                float var37 = MathHelper.cos(var23);
+                var26 = 1.5F;
+                float var27 = (float)(var34 + 1) * 2.0F;
+                var36.j_();
+                var36.setPositionRotation(this.locX - (double)((var32 * var26 + var24 * var27) * var3), this.locY + (var22[1] - var30[1]) * 1.0D - (double)((var27 + var26) * var29) + 1.5D, this.locZ + (double)((var16 * var26 + var37 * var27) * var3), 0.0F, 0.0F);
             }
 
             if (!this.world.isStatic)
@@ -517,10 +525,11 @@
                 for (int var12 = var4; var12 <= var7; ++var12)
                 {
                     int var13 = this.world.getTypeId(var10, var11, var12);
+                    Block var14 = Block.byId[var13];
 
-                    if (var13 != 0)
+                    if (var14 != null)
                     {
-                        if (var13 != Block.OBSIDIAN.id && var13 != Block.WHITESTONE.id && var13 != Block.BEDROCK.id)
+                        if (var14.canDragonDestroy(this.world, var10, var11, var12))
                         {
                             var9 = true;
                             this.world.setTypeId(var10, var11, var12, 0);
@@ -538,8 +547,8 @@
         {
             double var16 = var1.a + (var1.d - var1.a) * (double)this.random.nextFloat();
             double var17 = var1.b + (var1.e - var1.b) * (double)this.random.nextFloat();
-            double var14 = var1.c + (var1.f - var1.c) * (double)this.random.nextFloat();
-            this.world.addParticle("largeexplode", var16, var17, var14, 0.0D, 0.0D, 0.0D);
+            double var18 = var1.c + (var1.f - var1.c) * (double)this.random.nextFloat();
+            this.world.addParticle("largeexplode", var16, var17, var18, 0.0D, 0.0D, 0.0D);
         }
 
         return var8;
@@ -716,6 +725,12 @@
         return false;
     }
 
+    @SideOnly(Side.CLIENT)
+    public int func_70968_i()
+    {
+        return this.datawatcher.getInt(16);
+    }
+
     public World func_82194_d()
     {
         return this.world;
Index: EntityHuman.java
===================================================================
--- EntityHuman.java	(revision 3)
+++ EntityHuman.java	(working copy)
@@ -1,7 +1,20 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.FMLCommonHandler;
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import cpw.mods.fml.common.network.FMLNetworkHandler;
 import java.util.Iterator;
 import java.util.List;
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.ISpecialArmor$ArmorProperties;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.ForgeEventFactory;
+import net.minecraftforge.event.entity.player.AttackEntityEvent;
+import net.minecraftforge.event.entity.player.EntityInteractEvent;
+import net.minecraftforge.event.entity.player.PlayerDestroyItemEvent;
+import net.minecraftforge.event.entity.player.PlayerDropsEvent;
+import net.minecraftforge.event.entity.player.PlayerSleepInBedEvent;
 
 public abstract class EntityHuman extends EntityLiving implements ICommandListener
 {
@@ -28,6 +41,8 @@
     public float bR;
     public float bS;
     public String name;
+    @SideOnly(Side.CLIENT)
+    public String cB;
 
     /**
      * Used by EntityPlayer to prevent too many xp orbs from getting absorbed at once.
@@ -47,6 +62,8 @@
     public ChunkCoordinates cc;
     private int sleepTicks;
     public float field_71079_bU;
+    @SideOnly(Side.CLIENT)
+    public float cC;
     public float field_71089_bV;
 
     /** holds the spawn chunk of the player */
@@ -121,6 +138,18 @@
         this.datawatcher.a(17, Byte.valueOf((byte)0));
     }
 
+    @SideOnly(Side.CLIENT)
+    public ItemStack bG()
+    {
+        return this.f;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public int bH()
+    {
+        return this.g;
+    }
+
     /**
      * Checks if the entity is currently using an item (e.g., bow, food, sword) by holding down the useItemButton
      */
@@ -129,6 +158,12 @@
         return this.f != null;
     }
 
+    @SideOnly(Side.CLIENT)
+    public int bJ()
+    {
+        return this.bI() ? this.f.m() - this.g : 0;
+    }
+
     public void bK()
     {
         if (this.f != null)
@@ -160,12 +195,16 @@
      */
     public void j_()
     {
+        FMLCommonHandler.instance().onPlayerPreTick(this);
+
         if (this.f != null)
         {
             ItemStack var1 = this.inventory.getItemInHand();
 
             if (var1 == this.f)
             {
+                this.f.getItem().onUsingItemTick(this.f, this, this.g);
+
                 if (this.g <= 25 && this.g % 4 == 0)
                 {
                     this.c(var1, 5);
@@ -283,6 +322,8 @@
         {
             this.foodData.a(this);
         }
+
+        FMLCommonHandler.instance().onPlayerPostTick(this);
     }
 
     /**
@@ -354,6 +395,19 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a(byte var1)
+    {
+        if (var1 == 9)
+        {
+            this.n();
+        }
+        else
+        {
+            super.a(var1);
+        }
+    }
+
     /**
      * Dead and sleeping entities cannot move
      */
@@ -365,7 +419,7 @@
     /**
      * set current crafting inventory back to the 2x2 square
      */
-    protected void closeInventory()
+    public void closeInventory()
     {
         this.activeContainer = this.defaultContainer;
     }
@@ -393,6 +447,16 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public void w()
+    {
+        this.height = 1.62F;
+        this.a(0.6F, 1.8F);
+        super.w();
+        this.setHealth(this.getMaxHealth());
+        this.deathTicks = 0;
+    }
+
     protected void bk()
     {
         this.func_82168_bl();
@@ -473,6 +537,12 @@
         var1.b_(this);
     }
 
+    @SideOnly(Side.CLIENT)
+    public int bM()
+    {
+        return this.bQ;
+    }
+
     /**
      * Called when the mob's health reaches 0.
      */
@@ -482,6 +552,8 @@
         this.a(0.2F, 0.2F);
         this.setPosition(this.locX, this.locY, this.locZ);
         this.motY = 0.10000000149011612D;
+        this.captureDrops = true;
+        this.capturedDrops.clear();
 
         if (this.name.equals("Notch"))
         {
@@ -493,6 +565,24 @@
             this.inventory.l();
         }
 
+        this.captureDrops = false;
+
+        if (!this.world.isStatic)
+        {
+            PlayerDropsEvent var2 = new PlayerDropsEvent(this, var1, this.capturedDrops, this.lastDamageByPlayerTime > 0);
+
+            if (!MinecraftForge.EVENT_BUS.post(var2))
+            {
+                Iterator var3 = this.capturedDrops.iterator();
+
+                while (var3.hasNext())
+                {
+                    EntityItem var4 = (EntityItem)var3.next();
+                    this.a(var4);
+                }
+            }
+        }
+
         if (var1 != null)
         {
             this.motX = (double)(-MathHelper.cos((this.aW + this.yaw) * (float)Math.PI / 180.0F) * 0.1F);
@@ -530,7 +620,8 @@
      */
     public EntityItem bN()
     {
-        return this.a(this.inventory.splitStack(this.inventory.itemInHandIndex, 1), false);
+        ItemStack var1 = this.inventory.getItemInHand();
+        return var1 == null ? null : (var1.getItem().onDroppedByPlayer(var1, this) ? ForgeHooks.onPlayerTossEvent(this, this.inventory.splitStack(this.inventory.itemInHandIndex, 1)) : null);
     }
 
     /**
@@ -539,7 +630,7 @@
      */
     public EntityItem drop(ItemStack var1)
     {
-        return this.a(var1, false);
+        return ForgeHooks.onPlayerTossEvent(this, var1);
     }
 
     /**
@@ -589,45 +680,61 @@
     /**
      * Joins the passed in entity item with the world. Args: entityItem
      */
-    protected void a(EntityItem var1)
+    public void a(EntityItem var1)
     {
+        if (this.captureDrops)
+        {
+            this.capturedDrops.add(var1);
+        }
+        else
+        {
         this.world.addEntity(var1);
     }
+    }
 
+    @Deprecated
+
     /**
      * Returns how strong the player is against the specified block at this moment
      */
     public float a(Block var1)
     {
-        float var2 = this.inventory.a(var1);
-        int var3 = EnchantmentManager.getDigSpeedEnchantmentLevel(this);
+        return this.getCurrentPlayerStrVsBlock(var1, 0);
+    }
 
-        if (var3 > 0 && this.inventory.b(var1))
+    public float getCurrentPlayerStrVsBlock(Block var1, int var2)
         {
-            var2 += (float)(var3 * var3 + 1);
+        ItemStack var3 = this.inventory.getItemInHand();
+        float var4 = var3 == null ? 1.0F : var3.getItem().getStrVsBlock(var3, var1, var2);
+        int var5 = EnchantmentManager.getDigSpeedEnchantmentLevel(this);
+
+        if (var5 > 0 && ForgeHooks.canHarvestBlock(var1, this, var2))
+        {
+            var4 += (float)(var5 * var5 + 1);
         }
 
         if (this.hasEffect(MobEffectList.FASTER_DIG))
         {
-            var2 *= 1.0F + (float)(this.getEffect(MobEffectList.FASTER_DIG).getAmplifier() + 1) * 0.2F;
+            var4 *= 1.0F + (float)(this.getEffect(MobEffectList.FASTER_DIG).getAmplifier() + 1) * 0.2F;
         }
 
         if (this.hasEffect(MobEffectList.SLOWER_DIG))
         {
-            var2 *= 1.0F - (float)(this.getEffect(MobEffectList.SLOWER_DIG).getAmplifier() + 1) * 0.2F;
+            var4 *= 1.0F - (float)(this.getEffect(MobEffectList.SLOWER_DIG).getAmplifier() + 1) * 0.2F;
         }
 
         if (this.a(Material.WATER) && !EnchantmentManager.hasWaterWorkerEnchantment(this))
         {
-            var2 /= 5.0F;
+            var4 /= 5.0F;
         }
 
         if (!this.onGround)
         {
-            var2 /= 5.0F;
+            var4 /= 5.0F;
         }
 
-        return var2;
+        var4 = ForgeEventFactory.getBreakSpeed(this, var1, var2, var4);
+        return var4 < 0.0F ? 0.0F : var4;
     }
 
     /**
@@ -635,7 +742,7 @@
      */
     public boolean b(Block var1)
     {
-        return this.inventory.b(var1);
+        return ForgeEventFactory.doPlayerHarvestCheck(this, var1, this.inventory.b(var1));
     }
 
     /**
@@ -914,12 +1021,25 @@
     {
         if (!this.field_83001_bt)
         {
+            var2 = ForgeHooks.onLivingHurt(this, var1, var2);
+
+            if (var2 <= 0)
+            {
+                return;
+            }
+
             if (!var1.ignoresArmor() && this.be())
             {
                 var2 = 1 + var2 >> 1;
             }
 
-            var2 = this.b(var1, var2);
+            var2 = ISpecialArmor$ArmorProperties.ApplyArmor(this, this.inventory.armor, var1, (double)var2);
+
+            if (var2 <= 0)
+            {
+                return;
+            }
+
             var2 = this.c(var1, var2);
             this.j(var1.d());
             this.health -= var2;
@@ -960,8 +1080,12 @@
 
     public boolean o(Entity var1)
     {
-        if (var1.c(this))
+        if (MinecraftForge.EVENT_BUS.post(new EntityInteractEvent(this, var1)))
         {
+            return false;
+        }
+        else if (var1.c(this))
+        {
             return true;
         }
         else
@@ -1003,7 +1127,9 @@
      */
     public void bQ()
     {
+        ItemStack var1 = this.bP();
         this.inventory.setItem(this.inventory.itemInHandIndex, (ItemStack)null);
+        MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(this, var1));
     }
 
     /**
@@ -1020,67 +1146,73 @@
      */
     public void attack(Entity var1)
     {
+        if (!MinecraftForge.EVENT_BUS.post(new AttackEntityEvent(this, var1)))
+        {
+            ItemStack var2 = this.bP();
+
+            if (var2 == null || !var2.getItem().onLeftClickEntity(var2, this, var1))
+            {
         if (var1.aq())
         {
-            int var2 = this.inventory.a(var1);
+                    int var3 = this.inventory.a(var1);
 
             if (this.hasEffect(MobEffectList.INCREASE_DAMAGE))
             {
-                var2 += 3 << this.getEffect(MobEffectList.INCREASE_DAMAGE).getAmplifier();
+                        var3 += 3 << this.getEffect(MobEffectList.INCREASE_DAMAGE).getAmplifier();
             }
 
             if (this.hasEffect(MobEffectList.WEAKNESS))
             {
-                var2 -= 2 << this.getEffect(MobEffectList.WEAKNESS).getAmplifier();
+                        var3 -= 2 << this.getEffect(MobEffectList.WEAKNESS).getAmplifier();
             }
 
-            int var3 = 0;
             int var4 = 0;
+                    int var5 = 0;
 
             if (var1 instanceof EntityLiving)
             {
-                var4 = EnchantmentManager.a(this, (EntityLiving)var1);
-                var3 += EnchantmentManager.getKnockbackEnchantmentLevel(this, (EntityLiving)var1);
+                        var5 = EnchantmentManager.a(this, (EntityLiving)var1);
+                        var4 += EnchantmentManager.getKnockbackEnchantmentLevel(this, (EntityLiving)var1);
             }
 
             if (this.isSprinting())
             {
-                ++var3;
+                        ++var4;
             }
 
-            if (var2 > 0 || var4 > 0)
+                    if (var3 > 0 || var5 > 0)
             {
-                boolean var5 = this.fallDistance > 0.0F && !this.onGround && !this.g_() && !this.H() && !this.hasEffect(MobEffectList.BLINDNESS) && this.vehicle == null && var1 instanceof EntityLiving;
+                        boolean var6 = this.fallDistance > 0.0F && !this.onGround && !this.g_() && !this.H() && !this.hasEffect(MobEffectList.BLINDNESS) && this.vehicle == null && var1 instanceof EntityLiving;
 
-                if (var5)
+                        if (var6)
                 {
-                    var2 += this.random.nextInt(var2 / 2 + 2);
+                            var3 += this.random.nextInt(var3 / 2 + 2);
                 }
 
-                var2 += var4;
-                boolean var6 = var1.damageEntity(DamageSource.playerAttack(this), var2);
+                        var3 += var5;
+                        boolean var7 = var1.damageEntity(DamageSource.playerAttack(this), var3);
 
-                if (var6)
+                        if (var7)
                 {
-                    if (var3 > 0)
+                            if (var4 > 0)
                     {
-                        var1.g((double)(-MathHelper.sin(this.yaw * (float)Math.PI / 180.0F) * (float)var3 * 0.5F), 0.1D, (double)(MathHelper.cos(this.yaw * (float)Math.PI / 180.0F) * (float)var3 * 0.5F));
+                                var1.g((double)(-MathHelper.sin(this.yaw * (float)Math.PI / 180.0F) * (float)var4 * 0.5F), 0.1D, (double)(MathHelper.cos(this.yaw * (float)Math.PI / 180.0F) * (float)var4 * 0.5F));
                         this.motX *= 0.6D;
                         this.motZ *= 0.6D;
                         this.setSprinting(false);
                     }
 
-                    if (var5)
+                            if (var6)
                     {
                         this.b(var1);
                     }
 
-                    if (var4 > 0)
+                            if (var5 > 0)
                     {
                         this.c(var1);
                     }
 
-                    if (var2 >= 18)
+                            if (var3 >= 18)
                     {
                         this.a(AchievementList.E);
                     }
@@ -1088,13 +1220,13 @@
                     this.k(var1);
                 }
 
-                ItemStack var7 = this.bP();
+                        ItemStack var8 = this.bP();
 
-                if (var7 != null && var1 instanceof EntityLiving)
+                        if (var8 != null && var1 instanceof EntityLiving)
                 {
-                    var7.a((EntityLiving)var1, this);
+                            var8.a((EntityLiving)var1, this);
 
-                    if (var7.count <= 0)
+                            if (var8.count <= 0)
                     {
                         this.bQ();
                     }
@@ -1107,12 +1239,12 @@
                         this.a((EntityLiving)var1, true);
                     }
 
-                    this.a(StatisticList.w, var2);
-                    int var8 = EnchantmentManager.getFireAspectEnchantmentLevel(this, (EntityLiving)var1);
+                            this.a(StatisticList.w, var3);
+                            int var9 = EnchantmentManager.getFireAspectEnchantmentLevel(this, (EntityLiving)var1);
 
-                    if (var8 > 0 && var6)
+                            if (var9 > 0 && var7)
                     {
-                        var1.setOnFire(var8 * 4);
+                                var1.setOnFire(var9 * 4);
                     }
                 }
 
@@ -1120,6 +1252,8 @@
             }
         }
     }
+        }
+    }
 
     /**
      * Called when the player performs a critical hit on the Entity. Args: entity that was hit critically
@@ -1128,6 +1262,9 @@
 
     public void c(Entity var1) {}
 
+    @SideOnly(Side.CLIENT)
+    public void bR() {}
+
     /**
      * Will get destroyed next tick.
      */
@@ -1160,6 +1297,15 @@
      */
     public EnumBedResult a(int var1, int var2, int var3)
     {
+        PlayerSleepInBedEvent var4 = new PlayerSleepInBedEvent(this, var1, var2, var3);
+        MinecraftForge.EVENT_BUS.post(var4);
+
+        if (var4.result != null)
+        {
+            return var4.result;
+        }
+        else
+        {
         if (!this.world.isStatic)
         {
             if (this.isSleeping() || !this.isAlive())
@@ -1182,11 +1328,11 @@
                 return EnumBedResult.TOO_FAR_AWAY;
             }
 
-            double var4 = 8.0D;
-            double var6 = 5.0D;
-            List var8 = this.world.a(EntityMonster.class, AxisAlignedBB.a().a((double)var1 - var4, (double)var2 - var6, (double)var3 - var4, (double)var1 + var4, (double)var2 + var6, (double)var3 + var4));
+                double var5 = 8.0D;
+                double var7 = 5.0D;
+                List var9 = this.world.a(EntityMonster.class, AxisAlignedBB.a().a((double)var1 - var5, (double)var2 - var7, (double)var3 - var5, (double)var1 + var5, (double)var2 + var7, (double)var3 + var5));
 
-            if (!var8.isEmpty())
+                if (!var9.isEmpty())
             {
                 return EnumBedResult.NOT_SAFE;
             }
@@ -1197,31 +1343,38 @@
 
         if (this.world.isLoaded(var1, var2, var3))
         {
-            int var9 = this.world.getData(var1, var2, var3);
-            int var5 = BlockBed.e(var9);
-            float var10 = 0.5F;
-            float var7 = 0.5F;
+                int var10 = this.world.getData(var1, var2, var3);
+                int var6 = BlockBed.e(var10);
+                Block var11 = Block.byId[this.world.getTypeId(var1, var2, var3)];
 
-            switch (var5)
+                if (var11 != null)
             {
+                    var6 = var11.getBedDirection(this.world, var1, var2, var3);
+                }
+
+                float var8 = 0.5F;
+                float var12 = 0.5F;
+
+                switch (var6)
+                {
                 case 0:
-                    var7 = 0.9F;
+                        var12 = 0.9F;
                     break;
 
                 case 1:
-                    var10 = 0.1F;
+                        var8 = 0.1F;
                     break;
 
                 case 2:
-                    var7 = 0.1F;
+                        var12 = 0.1F;
                     break;
 
                 case 3:
-                    var10 = 0.9F;
+                        var8 = 0.9F;
             }
 
-            this.func_71013_b(var5);
-            this.setPosition((double)((float)var1 + var10), (double)((float)var2 + 0.9375F), (double)((float)var3 + var7));
+                this.func_71013_b(var6);
+                this.setPosition((double)((float)var1 + var8), (double)((float)var2 + 0.9375F), (double)((float)var3 + var12));
         }
         else
         {
@@ -1240,6 +1393,7 @@
 
         return EnumBedResult.OK;
     }
+    }
 
     private void func_71013_b(int var1)
     {
@@ -1274,11 +1428,12 @@
         this.e_();
         ChunkCoordinates var4 = this.cc;
         ChunkCoordinates var5 = this.cc;
+        Block var6 = var4 == null ? null : Block.byId[this.world.getTypeId(var4.x, var4.y, var4.z)];
 
-        if (var4 != null && this.world.getTypeId(var4.x, var4.y, var4.z) == Block.BED.id)
+        if (var4 != null && var6 != null && var6.isBed(this.world, var4.x, var4.y, var4.z, this))
         {
-            BlockBed.a(this.world, var4.x, var4.y, var4.z, false);
-            var5 = BlockBed.b(this.world, var4.x, var4.y, var4.z, 0);
+            var6.setBedOccupied(this.world, var4.x, var4.y, var4.z, this, false);
+            var5 = var6.getBedSpawnPosition(this.world, var4.x, var4.y, var4.z, this);
 
             if (var5 == null)
             {
@@ -1315,7 +1470,9 @@
      */
     private boolean j()
     {
-        return this.world.getTypeId(this.cc.x, this.cc.y, this.cc.z) == Block.BED.id;
+        ChunkCoordinates var1 = this.cc;
+        int var2 = this.world.getTypeId(var1.x, var1.y, var1.z);
+        return Block.byId[var2] != null && Block.byId[var2].isBed(this.world, var1.x, var1.y, var1.z, this);
     }
 
     /**
@@ -1329,18 +1486,49 @@
         var3.getChunkAt(var1.x + 3 >> 4, var1.z - 3 >> 4);
         var3.getChunkAt(var1.x - 3 >> 4, var1.z + 3 >> 4);
         var3.getChunkAt(var1.x + 3 >> 4, var1.z + 3 >> 4);
+        Block var5 = Block.byId[var0.getTypeId(var1.x, var1.y, var1.z)];
 
-        if (var0.getTypeId(var1.x, var1.y, var1.z) != Block.BED.id)
+        if (var5 != null && var5.isBed(var0, var1.x, var1.y, var1.z, (EntityLiving)null))
         {
-            return var2 && var0.isEmpty(var1.x, var1.y, var1.z) && var0.isEmpty(var1.x, var1.y + 1, var1.z) ? var1 : null;
+            ChunkCoordinates var6 = var5.getBedSpawnPosition(var0, var1.x, var1.y, var1.z, (EntityHuman)null);
+            return var6;
         }
         else
         {
-            ChunkCoordinates var4 = BlockBed.b(var0, var1.x, var1.y, var1.z, 0);
-            return var4;
+            return var2 && var0.isEmpty(var1.x, var1.y, var1.z) && var0.isEmpty(var1.x, var1.y + 1, var1.z) ? var1 : null;
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public float bT()
+    {
+        if (this.cc != null)
+        {
+            int var1 = this.cc.x;
+            int var2 = this.cc.y;
+            int var3 = this.cc.z;
+            Block var4 = Block.byId[this.world.getTypeId(var1, var2, var3)];
+            int var5 = var4 == null ? 0 : var4.getBedDirection(this.world, var1, var2, var3);
+
+            switch (var5)
+            {
+                case 0:
+                    return 90.0F;
+
+                case 1:
+                    return 0.0F;
+
+                case 2:
+                    return 270.0F;
+
+                case 3:
+                    return 180.0F;
+            }
+        }
+
+        return 0.0F;
+    }
+
     /**
      * Returns whether player is sleeping or not
      */
@@ -1357,6 +1545,18 @@
         return this.sleeping && this.sleepTicks >= 100;
     }
 
+    @SideOnly(Side.CLIENT)
+    public int bV()
+    {
+        return this.sleepTicks;
+    }
+
+    @SideOnly(Side.CLIENT)
+    protected boolean s(int var1)
+    {
+        return (this.datawatcher.getByte(16) & 1 << var1) != 0;
+    }
+
     protected void func_82239_b(int var1, boolean var2)
     {
         byte var3 = this.datawatcher.getByte(16);
@@ -1592,6 +1792,49 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public int b(ItemStack var1, int var2)
+    {
+        super.b(var1, var2);
+        int var3;
+
+        if (var1.id == Item.FISHING_ROD.id && this.hookedFish != null)
+        {
+            var3 = var1.c() + 16;
+        }
+        else
+        {
+            if (var1.getItem().b())
+            {
+                return var1.getItem().a(var1.getData(), var2);
+            }
+
+            if (this.f != null && var1.id == Item.BOW.id)
+            {
+                int var4 = var1.m() - this.g;
+
+                if (var4 >= 18)
+                {
+                    return 133;
+                }
+
+                if (var4 > 13)
+                {
+                    return 117;
+                }
+
+                if (var4 > 0)
+                {
+                    return 101;
+                }
+            }
+
+            var3 = var1.getItem().getIconIndex(var1, var2, this, this.f, this.g);
+        }
+
+        return var3;
+    }
+
     public ItemStack q(int var1)
     {
         return this.inventory.func_70440_f(var1);
@@ -1657,14 +1900,11 @@
      */
     public void j(float var1)
     {
-        if (!this.abilities.isInvulnerable)
+        if (!this.abilities.isInvulnerable && !this.world.isStatic)
         {
-            if (!this.world.isStatic)
-            {
                 this.foodData.a(var1);
             }
         }
-    }
 
     /**
      * Returns the player's FoodStats object.
@@ -1868,4 +2108,15 @@
     {
         return this.inventory.armor;
     }
+
+    @SideOnly(Side.CLIENT)
+    public boolean cc()
+    {
+        return this.s(1);
 }
+
+    public void openGui(Object var1, int var2, World var3, int var4, int var5, int var6)
+    {
+        FMLNetworkHandler.openGui(this, var1, var2, var3, var4, var5, var6);
+    }
+}
Index: EntityItem.java
===================================================================
--- EntityItem.java	(revision 3)
+++ EntityItem.java	(working copy)
@@ -1,6 +1,11 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.registry.GameRegistry;
 import java.util.Iterator;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.Event$Result;
+import net.minecraftforge.event.entity.item.ItemExpireEvent;
+import net.minecraftforge.event.entity.player.EntityItemPickupEvent;
 
 public class EntityItem extends Entity
 {
@@ -18,6 +23,7 @@
 
     /** The EntityItem's random initial float height. */
     public float d = (float)(Math.random() * Math.PI * 2.0D);
+    public int lifespan = 6000;
 
     public EntityItem(World var1, double var2, double var4, double var6, ItemStack var8)
     {
@@ -30,6 +36,7 @@
         this.motX = (double)((float)(Math.random() * 0.20000000298023224D - 0.10000000149011612D));
         this.motY = 0.20000000298023224D;
         this.motZ = (double)((float)(Math.random() * 0.20000000298023224D - 0.10000000149011612D));
+        this.lifespan = var8.getItem() == null ? 6000 : var8.getItem().getEntityLifespan(var8, var1);
     }
 
     /**
@@ -116,12 +123,26 @@
 
         ++this.age;
 
-        if (!this.world.isStatic && this.age >= 6000)
+        if (!this.world.isStatic && this.age >= this.lifespan)
         {
+            ItemExpireEvent var6 = new ItemExpireEvent(this, this.itemStack.getItem() == null ? 6000 : this.itemStack.getItem().getEntityLifespan(this.itemStack, this.world));
+
+            if (MinecraftForge.EVENT_BUS.post(var6))
+            {
+                this.lifespan += var6.extraLife;
+            }
+            else
+            {
             this.die();
         }
     }
 
+        if (this.itemStack == null || this.itemStack.count <= 0)
+        {
+            this.die();
+        }
+    }
+
     public boolean func_70289_a(EntityItem var1)
     {
         if (var1 == this)
@@ -213,6 +234,7 @@
     {
         var1.setShort("Health", (short)((byte)this.e));
         var1.setShort("Age", (short)this.age);
+        var1.setInt("Lifespan", this.lifespan);
 
         if (this.itemStack != null)
         {
@@ -230,11 +252,16 @@
         NBTTagCompound var2 = var1.getCompound("Item");
         this.itemStack = ItemStack.a(var2);
 
-        if (this.itemStack == null)
+        if (this.itemStack == null || this.itemStack.count <= 0)
         {
             this.die();
         }
+
+        if (var1.hasKey("Lifespan"))
+        {
+            this.lifespan = var1.getInt("Lifespan");
     }
+    }
 
     /**
      * Called by a player entity when they collide with an entity
@@ -243,10 +270,22 @@
     {
         if (!this.world.isStatic)
         {
-            int var2 = this.itemStack.count;
+            if (this.pickupDelay > 0)
+            {
+                return;
+            }
 
-            if (this.pickupDelay == 0 && var1.inventory.pickup(this.itemStack))
+            EntityItemPickupEvent var2 = new EntityItemPickupEvent(var1, this);
+
+            if (MinecraftForge.EVENT_BUS.post(var2))
             {
+                return;
+            }
+
+            int var3 = this.itemStack.count;
+
+            if (this.pickupDelay <= 0 && (var2.getResult() == Event$Result.ALLOW || var3 <= 0 || var1.inventory.pickup(this.itemStack)))
+            {
                 if (this.itemStack.id == Block.LOG.id)
                 {
                     var1.a(AchievementList.g);
@@ -267,8 +306,9 @@
                     var1.a(AchievementList.z);
                 }
 
+                GameRegistry.onPickupNotification(var1, this);
                 this.world.makeSound(this, "random.pop", 0.2F, ((this.random.nextFloat() - this.random.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-                var1.receive(this, var2);
+                var1.receive(this, var3);
 
                 if (this.itemStack.count <= 0)
                 {
Index: EntityLiving.java
===================================================================
--- EntityLiving.java	(revision 3)
+++ EntityLiving.java	(working copy)
@@ -1,10 +1,13 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+import net.minecraftforge.common.ForgeHooks;
 
 public abstract class EntityLiving extends Entity
 {
@@ -63,7 +66,7 @@
      * in each step in the damage calculations, this is set to the 'carryover' that would result if someone was damaged
      * .25 hearts (for example), and added to the damage in the next step
      */
-    protected int aS;
+    public int aS;
 
     /** Number of ticks since this EntityLiving last produced its sound */
     public int aT;
@@ -132,7 +135,7 @@
     private ControllerJump jumpController;
     private EntityAIBodyControl senses;
     private Navigation navigation;
-    protected final PathfinderGoalSelector goalSelector;
+    public final PathfinderGoalSelector goalSelector;
     protected final PathfinderGoalSelector targetSelector;
 
     /** The active target the Task system uses for tracking */
@@ -191,7 +194,7 @@
     protected float bF;
 
     /** used to check whether entity is jumping. */
-    protected boolean bG = false;
+    public boolean bG = false;
     protected float bH = 0.0F;
     protected float bI = 0.7F;
 
@@ -291,6 +294,12 @@
         return this.ay;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void d(float var1)
+    {
+        this.ay = var1;
+    }
+
     /**
      * the movespeed used for the new AI system
      */
@@ -328,6 +337,7 @@
     public void b(EntityLiving var1)
     {
         this.bO = var1;
+        ForgeHooks.onLivingSetAttackTarget(this, var1);
     }
 
     public boolean a(Class var1)
@@ -411,6 +421,7 @@
     {
         this.lastDamager = var1;
         this.f = this.lastDamager != null ? 60 : 0;
+        ForgeHooks.onLivingSetAttackTarget(this, var1);
     }
 
     protected void a()
@@ -427,6 +438,12 @@
         return this.world.a(this.world.getVec3DPool().create(this.locX, this.locY + (double)this.getHeadHeight(), this.locZ), this.world.getVec3DPool().create(var1.locX, var1.locY + (double)var1.getHeadHeight(), var1.locZ)) == null;
     }
 
+    @SideOnly(Side.CLIENT)
+    public String O()
+    {
+        return this.texture;
+    }
+
     /**
      * Returns true if other Entities should be prevented from moving through this Entity.
      */
@@ -667,11 +684,25 @@
         this.fallDistance = 0.0F;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a(double var1, double var3, double var5, float var7, float var8, int var9)
+    {
+        this.height = 0.0F;
+        this.bv = var1;
+        this.bw = var3;
+        this.bx = var5;
+        this.by = (double)var7;
+        this.bz = (double)var8;
+        this.bu = var9;
+    }
+
     /**
      * Called to update the entity's position/logic.
      */
     public void j_()
     {
+        if (!ForgeHooks.onLivingUpdate(this))
+        {
         super.j_();
 
         if (!this.world.isStatic)
@@ -812,6 +843,7 @@
         this.world.methodProfiler.b();
         this.field_70764_aw += var7;
     }
+    }
 
     /**
      * Heal living entity (param: amount of half-hearts)
@@ -853,10 +885,14 @@
      */
     public boolean damageEntity(DamageSource var1, int var2)
     {
-        if (this.world.isStatic)
+        if (ForgeHooks.onLivingAttack(this, var1, var2))
         {
             return false;
         }
+        else if (this.world.isStatic)
+        {
+            return false;
+        }
         else
         {
             this.bC = 0;
@@ -981,6 +1017,13 @@
         return this.isBaby() ? (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.5F : (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void ac()
+    {
+        this.hurtTicks = this.aV = 10;
+        this.aW = 0.0F;
+    }
+
     /**
      * Returns the current armor value as determined by a call to InventoryPlayer.getTotalArmorValue
      */
@@ -1048,6 +1091,13 @@
     {
         if (!this.field_83001_bt)
         {
+            var2 = ForgeHooks.onLivingHurt(this, var1, var2);
+
+            if (var2 <= 0)
+            {
+                return;
+            }
+
             var2 = this.b(var1, var2);
             var2 = this.c(var1, var2);
             this.health -= var2;
@@ -1112,6 +1162,8 @@
      */
     public void die(DamageSource var1)
     {
+        if (!ForgeHooks.onLivingDeath(this, var1))
+        {
         Entity var2 = var1.getEntity();
 
         if (this.aK >= 0 && var2 != null)
@@ -1135,6 +1187,10 @@
                 var3 = EnchantmentManager.getBonusMonsterLootEnchantmentLevel((EntityLiving)var2);
             }
 
+                this.captureDrops = true;
+                this.capturedDrops.clear();
+                int var4 = 0;
+
             if (!this.isBaby() && this.world.getGameRules().getBoolean("doMobLoot"))
             {
                 this.dropDeathLoot(this.lastDamageByPlayerTime > 0, var3);
@@ -1142,7 +1198,7 @@
 
                 if (this.lastDamageByPlayerTime > 0)
                 {
-                    int var4 = this.random.nextInt(200) - var3;
+                        var4 = this.random.nextInt(200) - var3;
 
                     if (var4 < 5)
                     {
@@ -1150,10 +1206,24 @@
                     }
                 }
             }
+
+                this.captureDrops = false;
+
+                if (!ForgeHooks.onLivingDrops(this, var1, this.capturedDrops, var3, this.lastDamageByPlayerTime > 0, var4))
+                {
+                    Iterator var5 = this.capturedDrops.iterator();
+
+                    while (var5.hasNext())
+                    {
+                        EntityItem var6 = (EntityItem)var5.next();
+                        this.world.addEntity(var6);
         }
+                }
+            }
 
         this.world.broadcastEntityEffect(this, (byte)3);
     }
+    }
 
     protected void l(int var1) {}
 
@@ -1193,6 +1263,10 @@
      */
     protected void a(float var1)
     {
+        var1 = ForgeHooks.onLivingFall(this, var1);
+
+        if (var1 > 0.0F)
+        {
         super.a(var1);
         int var2 = MathHelper.f(var1 - 3.0F);
 
@@ -1217,17 +1291,19 @@
             }
         }
     }
+    }
 
     /**
      * Moves the entity based on the specified heading.  Args: strafe, forward
      */
     public void e(float var1, float var2)
     {
-        double var9;
+        double var3;
+        float var7;
 
         if (this.H() && (!(this instanceof EntityHuman) || !((EntityHuman)this).abilities.isFlying))
         {
-            var9 = this.locY;
+            var3 = this.locY;
             this.a(var1, var2, this.bb() ? 0.04F : 0.02F);
             this.move(this.motX, this.motY, this.motZ);
             this.motX *= 0.800000011920929D;
@@ -1235,14 +1311,14 @@
             this.motZ *= 0.800000011920929D;
             this.motY -= 0.02D;
 
-            if (this.positionChanged && this.c(this.motX, this.motY + 0.6000000238418579D - this.locY + var9, this.motZ))
+            if (this.positionChanged && this.c(this.motX, this.motY + 0.6000000238418579D - this.locY + var3, this.motZ))
             {
                 this.motY = 0.30000001192092896D;
             }
         }
         else if (this.J() && (!(this instanceof EntityHuman) || !((EntityHuman)this).abilities.isFlying))
         {
-            var9 = this.locY;
+            var3 = this.locY;
             this.a(var1, var2, 0.02F);
             this.move(this.motX, this.motY, this.motZ);
             this.motX *= 0.5D;
@@ -1250,83 +1326,82 @@
             this.motZ *= 0.5D;
             this.motY -= 0.02D;
 
-            if (this.positionChanged && this.c(this.motX, this.motY + 0.6000000238418579D - this.locY + var9, this.motZ))
+            if (this.positionChanged && this.c(this.motX, this.motY + 0.6000000238418579D - this.locY + var3, this.motZ))
             {
                 this.motY = 0.30000001192092896D;
             }
         }
         else
         {
-            float var3 = 0.91F;
+            float var5 = 0.91F;
 
             if (this.onGround)
             {
-                var3 = 0.54600006F;
-                int var4 = this.world.getTypeId(MathHelper.floor(this.locX), MathHelper.floor(this.boundingBox.b) - 1, MathHelper.floor(this.locZ));
+                var5 = 0.54600006F;
+                int var6 = this.world.getTypeId(MathHelper.floor(this.locX), MathHelper.floor(this.boundingBox.b) - 1, MathHelper.floor(this.locZ));
 
-                if (var4 > 0)
+                if (var6 > 0)
                 {
-                    var3 = Block.byId[var4].frictionFactor * 0.91F;
+                    var5 = Block.byId[var6].frictionFactor * 0.91F;
                 }
             }
 
-            float var8 = 0.16277136F / (var3 * var3 * var3);
-            float var5;
+            float var10 = 0.16277136F / (var5 * var5 * var5);
 
             if (this.onGround)
             {
                 if (this.bb())
                 {
-                    var5 = this.aE();
+                    var7 = this.aE();
                 }
                 else
                 {
-                    var5 = this.aM;
+                    var7 = this.aM;
                 }
 
-                var5 *= var8;
+                var7 *= var10;
             }
             else
             {
-                var5 = this.aN;
+                var7 = this.aN;
             }
 
-            this.a(var1, var2, var5);
-            var3 = 0.91F;
+            this.a(var1, var2, var7);
+            var5 = 0.91F;
 
             if (this.onGround)
             {
-                var3 = 0.54600006F;
-                int var6 = this.world.getTypeId(MathHelper.floor(this.locX), MathHelper.floor(this.boundingBox.b) - 1, MathHelper.floor(this.locZ));
+                var5 = 0.54600006F;
+                int var8 = this.world.getTypeId(MathHelper.floor(this.locX), MathHelper.floor(this.boundingBox.b) - 1, MathHelper.floor(this.locZ));
 
-                if (var6 > 0)
+                if (var8 > 0)
                 {
-                    var3 = Block.byId[var6].frictionFactor * 0.91F;
+                    var5 = Block.byId[var8].frictionFactor * 0.91F;
                 }
             }
 
             if (this.g_())
             {
-                float var10 = 0.15F;
+                float var12 = 0.15F;
 
-                if (this.motX < (double)(-var10))
+                if (this.motX < (double)(-var12))
                 {
-                    this.motX = (double)(-var10);
+                    this.motX = (double)(-var12);
                 }
 
-                if (this.motX > (double)var10)
+                if (this.motX > (double)var12)
                 {
-                    this.motX = (double)var10;
+                    this.motX = (double)var12;
                 }
 
-                if (this.motZ < (double)(-var10))
+                if (this.motZ < (double)(-var12))
                 {
-                    this.motZ = (double)(-var10);
+                    this.motZ = (double)(-var12);
                 }
 
-                if (this.motZ > (double)var10)
+                if (this.motZ > (double)var12)
                 {
-                    this.motZ = (double)var10;
+                    this.motZ = (double)var12;
                 }
 
                 this.fallDistance = 0.0F;
@@ -1336,9 +1411,9 @@
                     this.motY = -0.15D;
                 }
 
-                boolean var7 = this.isSneaking() && this instanceof EntityHuman;
+                boolean var9 = this.isSneaking() && this instanceof EntityHuman;
 
-                if (var7 && this.motY < 0.0D)
+                if (var9 && this.motY < 0.0D)
                 {
                     this.motY = 0.0D;
                 }
@@ -1353,21 +1428,21 @@
 
             this.motY -= 0.08D;
             this.motY *= 0.9800000190734863D;
-            this.motX *= (double)var3;
-            this.motZ *= (double)var3;
+            this.motX *= (double)var5;
+            this.motZ *= (double)var5;
         }
 
         this.bf = this.bg;
-        var9 = this.locX - this.lastX;
-        double var12 = this.locZ - this.lastZ;
-        float var11 = MathHelper.sqrt(var9 * var9 + var12 * var12) * 4.0F;
+        var3 = this.locX - this.lastX;
+        double var11 = this.locZ - this.lastZ;
+        var7 = MathHelper.sqrt(var3 * var3 + var11 * var11) * 4.0F;
 
-        if (var11 > 1.0F)
+        if (var7 > 1.0F)
         {
-            var11 = 1.0F;
+            var7 = 1.0F;
         }
 
-        this.bg += (var11 - this.bg) * 0.4F;
+        this.bg += (var7 - this.bg) * 0.4F;
         this.field_70754_ba += this.bg;
     }
 
@@ -1380,7 +1455,7 @@
         int var2 = MathHelper.floor(this.boundingBox.b);
         int var3 = MathHelper.floor(this.locZ);
         int var4 = this.world.getTypeId(var1, var2, var3);
-        return var4 == Block.LADDER.id || var4 == Block.VINE.id;
+        return ForgeHooks.isLivingOnLadder(Block.byId[var4], this.world, var1, var2, var3);
     }
 
     /**
@@ -1788,6 +1863,7 @@
         }
 
         this.am = true;
+        ForgeHooks.onLivingJump(this);
     }
 
     /**
@@ -1957,22 +2033,22 @@
     public void a(Entity var1, float var2, float var3)
     {
         double var4 = var1.locX - this.locX;
-        double var8 = var1.locZ - this.locZ;
-        double var6;
+        double var6 = var1.locZ - this.locZ;
+        double var8;
 
         if (var1 instanceof EntityLiving)
         {
             EntityLiving var10 = (EntityLiving)var1;
-            var6 = this.locY + (double)this.getHeadHeight() - (var10.locY + (double)var10.getHeadHeight());
+            var8 = this.locY + (double)this.getHeadHeight() - (var10.locY + (double)var10.getHeadHeight());
         }
         else
         {
-            var6 = (var1.boundingBox.b + var1.boundingBox.e) / 2.0D - (this.locY + (double)this.getHeadHeight());
+            var8 = (var1.boundingBox.b + var1.boundingBox.e) / 2.0D - (this.locY + (double)this.getHeadHeight());
         }
 
-        double var14 = (double)MathHelper.sqrt(var4 * var4 + var8 * var8);
-        float var12 = (float)(Math.atan2(var8, var4) * 180.0D / Math.PI) - 90.0F;
-        float var13 = (float)(-(Math.atan2(var6, var14) * 180.0D / Math.PI));
+        double var14 = (double)MathHelper.sqrt(var4 * var4 + var6 * var6);
+        float var12 = (float)(Math.atan2(var6, var4) * 180.0D / Math.PI) - 90.0F;
+        float var13 = (float)(-(Math.atan2(var8, var14) * 180.0D / Math.PI));
         this.pitch = -this.b(this.pitch, var13, var3);
         this.yaw = this.b(this.yaw, var12, var2);
     }
@@ -2013,6 +2089,35 @@
         this.damageEntity(DamageSource.OUT_OF_WORLD, 4);
     }
 
+    @SideOnly(Side.CLIENT)
+    public float g(float var1)
+    {
+        float var2 = this.aP - this.aO;
+
+        if (var2 < 0.0F)
+        {
+            ++var2;
+        }
+
+        return this.aO + var2 * var1;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public Vec3D h(float var1)
+    {
+        if (var1 == 1.0F)
+        {
+            return this.world.getVec3DPool().create(this.locX, this.locY, this.locZ);
+        }
+        else
+        {
+            double var2 = this.lastX + (this.locX - this.lastX) * (double)var1;
+            double var4 = this.lastY + (this.locY - this.lastY) * (double)var1;
+            double var6 = this.lastZ + (this.locZ - this.lastZ) * (double)var1;
+            return this.world.getVec3DPool().create(var2, var4, var6);
+        }
+    }
+
     /**
      * returns a (normalized) vector of where this entity is looking
      */
@@ -2051,6 +2156,21 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public float bq()
+    {
+        return 1.0F;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public MovingObjectPosition a(double var1, float var3)
+    {
+        Vec3D var4 = this.h(var3);
+        Vec3D var5 = this.i(var3);
+        Vec3D var6 = var4.add(var5.c * var1, var5.d * var1, var5.e * var1);
+        return this.world.a(var4, var6);
+    }
+
     /**
      * Will return how many at most can spawn in a chunk at once.
      */
@@ -2059,6 +2179,30 @@
         return 4;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a(byte var1)
+    {
+        if (var1 == 2)
+        {
+            this.bg = 1.5F;
+            this.noDamageTicks = this.maxNoDamageTicks;
+            this.hurtTicks = this.aV = 10;
+            this.aW = 0.0F;
+            this.world.makeSound(this, this.aX(), this.aV(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+            this.damageEntity(DamageSource.GENERIC, 0);
+        }
+        else if (var1 == 3)
+        {
+            this.world.makeSound(this, this.aY(), this.aV(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+            this.health = 0;
+            this.die(DamageSource.GENERIC);
+        }
+        else
+        {
+            super.a(var1);
+        }
+    }
+
     /**
      * Returns whether player is sleeping or not
      */
@@ -2067,6 +2211,12 @@
         return false;
     }
 
+    @SideOnly(Side.CLIENT)
+    public int b(ItemStack var1, int var2)
+    {
+        return var1.c();
+    }
+
     protected void bu()
     {
         Iterator var1 = this.effects.keySet().iterator();
@@ -2221,6 +2371,11 @@
         return this.getMonsterType() == EnumMonsterType.UNDEAD;
     }
 
+    public void n(int var1)
+    {
+        this.effects.remove(Integer.valueOf(var1));
+    }
+
     /**
      * Remove the specified potion effect from this entity.
      */
@@ -2650,4 +2805,24 @@
     {
         return false;
     }
+
+    public void curePotionEffects(ItemStack var1)
+    {
+        Iterator var2 = this.effects.keySet().iterator();
+
+        if (!this.world.isStatic)
+        {
+            while (var2.hasNext())
+            {
+                Integer var3 = (Integer)var2.next();
+                MobEffect var4 = (MobEffect)this.effects.get(var3);
+
+                if (var4.isCurativeItem(var1))
+                {
+                    var2.remove();
+                    this.c(var4);
 }
+            }
+        }
+    }
+}
Index: EntityMinecart.java
===================================================================
--- EntityMinecart.java	(revision 3)
+++ EntityMinecart.java	(working copy)
@@ -1,33 +1,66 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
+import net.minecraftforge.common.IMinecartCollisionHandler;
+import net.minecraftforge.common.MinecartRegistry;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.entity.minecart.MinecartCollisionEvent;
+import net.minecraftforge.event.entity.minecart.MinecartInteractEvent;
+import net.minecraftforge.event.entity.minecart.MinecartUpdateEvent;
 
 public class EntityMinecart extends Entity implements IInventory
 {
     /** Array of item stacks stored in minecart (for storage minecarts). */
-    private ItemStack[] items;
-    private int e;
-    private boolean field_70499_f;
+    protected ItemStack[] items;
+    protected int e;
+    protected boolean field_70499_f;
 
     /** The type of minecart, 2 for powered, 1 for storage. */
     public int type;
     public double b;
     public double c;
-    private final IUpdatePlayerListBox field_82344_g;
-    private boolean field_82345_h;
-    private static final int[][][] field_70500_g = new int[][][] {{{0, 0, -1}, {0, 0, 1}}, {{ -1, 0, 0}, {1, 0, 0}}, {{ -1, -1, 0}, {1, 0, 0}}, {{ -1, 0, 0}, {1, -1, 0}}, {{0, 0, -1}, {0, -1, 1}}, {{0, -1, -1}, {0, 0, 1}}, {{0, 0, 1}, {1, 0, 0}}, {{0, 0, 1}, { -1, 0, 0}}, {{0, 0, -1}, { -1, 0, 0}}, {{0, 0, -1}, {1, 0, 0}}};
+    protected final IUpdatePlayerListBox field_82344_g;
+    protected boolean field_82345_h;
+    protected static final int[][][] field_70500_g = new int[][][] {{{0, 0, -1}, {0, 0, 1}}, {{ -1, 0, 0}, {1, 0, 0}}, {{ -1, -1, 0}, {1, 0, 0}}, {{ -1, 0, 0}, {1, -1, 0}}, {{0, 0, -1}, {0, -1, 1}}, {{0, -1, -1}, {0, 0, 1}}, {{0, 0, 1}, {1, 0, 0}}, {{0, 0, 1}, { -1, 0, 0}}, {{0, 0, -1}, { -1, 0, 0}}, {{0, 0, -1}, {1, 0, 0}}};
 
     /** appears to be the progress of the turn */
-    private int j;
-    private double as;
-    private double at;
-    private double au;
-    private double av;
-    private double aw;
+    protected int j;
+    protected double as;
+    protected double at;
+    protected double au;
+    protected double av;
+    protected double aw;
+    @SideOnly(Side.CLIENT)
+    protected double ax;
+    @SideOnly(Side.CLIENT)
+    protected double ay;
+    @SideOnly(Side.CLIENT)
+    protected double az;
+    public static float defaultMaxSpeedRail = 0.4F;
+    public static float defaultMaxSpeedGround = 0.4F;
+    public static float defaultMaxSpeedAirLateral = 0.4F;
+    public static float defaultMaxSpeedAirVertical = -1.0F;
+    public static double defaultDragRidden = 0.996999979019165D;
+    public static double defaultDragEmpty = 0.9599999785423279D;
+    public static double defaultDragAir = 0.949999988079071D;
+    protected boolean canUseRail;
+    protected boolean canBePushed;
+    private static IMinecartCollisionHandler collisionHandler = null;
+    protected float maxSpeedRail;
+    protected float maxSpeedGround;
+    protected float maxSpeedAirLateral;
+    protected float maxSpeedAirVertical;
+    protected double dragAir;
 
     public EntityMinecart(World var1)
     {
         super(var1);
+        this.canUseRail = true;
+        this.canBePushed = true;
         this.items = new ItemStack[36];
         this.e = 0;
         this.field_70499_f = false;
@@ -36,8 +69,19 @@
         this.a(0.98F, 0.7F);
         this.height = this.length / 2.0F;
         this.field_82344_g = var1 != null ? var1.func_82735_a(this) : null;
+        this.maxSpeedRail = defaultMaxSpeedRail;
+        this.maxSpeedGround = defaultMaxSpeedGround;
+        this.maxSpeedAirLateral = defaultMaxSpeedAirLateral;
+        this.maxSpeedAirVertical = defaultMaxSpeedAirVertical;
+        this.dragAir = defaultDragAir;
     }
 
+    public EntityMinecart(World var1, int var2)
+    {
+        this(var1);
+        this.type = var2;
+    }
+
     /**
      * returns if this entity triggers Block.onEntityWalking on the blocks they walk on. used for spiders and wolves to
      * prevent them from trampling crops
@@ -61,7 +105,7 @@
      */
     public AxisAlignedBB g(Entity var1)
     {
-        return var1.boundingBox;
+        return getCollisionHandler() != null ? getCollisionHandler().getCollisionBox(this, var1) : var1.boundingBox;
     }
 
     /**
@@ -69,7 +113,7 @@
      */
     public AxisAlignedBB E()
     {
-        return null;
+        return getCollisionHandler() != null ? getCollisionHandler().getBoundingBox(this) : null;
     }
 
     /**
@@ -77,7 +121,7 @@
      */
     public boolean M()
     {
-        return true;
+        return this.canBePushed;
     }
 
     public EntityMinecart(World var1, double var2, double var4, double var6, int var8)
@@ -126,50 +170,9 @@
                 }
 
                 this.die();
-                this.a(Item.MINECART.id, 1, 0.0F);
-
-                if (this.type == 1)
-                {
-                    EntityMinecart var3 = this;
-
-                    for (int var4 = 0; var4 < var3.getSize(); ++var4)
-                    {
-                        ItemStack var5 = var3.getItem(var4);
-
-                        if (var5 != null)
-                        {
-                            float var6 = this.random.nextFloat() * 0.8F + 0.1F;
-                            float var7 = this.random.nextFloat() * 0.8F + 0.1F;
-                            float var8 = this.random.nextFloat() * 0.8F + 0.1F;
-
-                            while (var5.count > 0)
-                            {
-                                int var9 = this.random.nextInt(21) + 10;
-
-                                if (var9 > var5.count)
-                                {
-                                    var9 = var5.count;
+                this.dropCartAsItem();
                                 }
 
-                                var5.count -= var9;
-                                EntityItem var10 = new EntityItem(this.world, this.locX + (double)var6, this.locY + (double)var7, this.locZ + (double)var8, new ItemStack(var5.id, var9, var5.getData()));
-                                float var11 = 0.05F;
-                                var10.motX = (double)((float)this.random.nextGaussian() * var11);
-                                var10.motY = (double)((float)this.random.nextGaussian() * var11 + 0.2F);
-                                var10.motZ = (double)((float)this.random.nextGaussian() * var11);
-                                this.world.addEntity(var10);
-                            }
-                        }
-                    }
-
-                    this.a(Block.CHEST.id, 1, 0.0F);
-                }
-                else if (this.type == 2)
-                {
-                    this.a(Block.FURNACE.id, 1, 0.0F);
-                }
-            }
-
             return true;
         }
         else
@@ -178,6 +181,14 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public void ac()
+    {
+        this.func_70494_i(-this.func_70493_k());
+        this.func_70497_h(10);
+        this.setDamage(this.getDamage() + this.getDamage() * 10);
+    }
+
     /**
      * Returns true if other Entities should be prevented from moving through this Entity.
      */
@@ -269,7 +280,7 @@
             this.C();
         }
 
-        if (this.h() && this.random.nextInt(4) == 0)
+        if (this.h() && this.random.nextInt(4) == 0 && this.type == 2 && this.getClass() == EntityMinecart.class)
         {
             this.world.addParticle("largesmoke", this.locX, this.locY + 0.8D, this.locZ, 0.0D, 0.0D, 0.0D);
         }
@@ -278,14 +289,14 @@
         {
             if (this.j > 0)
             {
-                double var45 = this.locX + (this.as - this.locX) / (double)this.j;
-                double var46 = this.locY + (this.at - this.locY) / (double)this.j;
+                double var1 = this.locX + (this.as - this.locX) / (double)this.j;
+                double var3 = this.locY + (this.at - this.locY) / (double)this.j;
                 double var5 = this.locZ + (this.au - this.locZ) / (double)this.j;
                 double var7 = MathHelper.g(this.av - (double)this.yaw);
                 this.yaw = (float)((double)this.yaw + var7 / (double)this.j);
                 this.pitch = (float)((double)this.pitch + (this.aw - (double)this.pitch) / (double)this.j);
                 --this.j;
-                this.setPosition(var45, var46, var5);
+                this.setPosition(var1, var3, var5);
                 this.b(this.yaw, this.pitch);
             }
             else
@@ -300,30 +311,30 @@
             this.lastY = this.locY;
             this.lastZ = this.locZ;
             this.motY -= 0.03999999910593033D;
-            int var1 = MathHelper.floor(this.locX);
+            int var45 = MathHelper.floor(this.locX);
             int var2 = MathHelper.floor(this.locY);
-            int var3 = MathHelper.floor(this.locZ);
+            int var46 = MathHelper.floor(this.locZ);
 
-            if (BlockMinecartTrack.e_(this.world, var1, var2 - 1, var3))
+            if (BlockMinecartTrack.e_(this.world, var45, var2 - 1, var46))
             {
                 --var2;
             }
 
             double var4 = 0.4D;
             double var6 = 0.0078125D;
-            int var8 = this.world.getTypeId(var1, var2, var3);
+            int var8 = this.world.getTypeId(var45, var2, var46);
 
-            if (BlockMinecartTrack.d(var8))
+            if (this.canUseRail() && BlockMinecartTrack.d(var8))
             {
                 Vec3D var9 = this.func_70489_a(this.locX, this.locY, this.locZ);
-                int var10 = this.world.getData(var1, var2, var3);
+                int var10 = ((BlockMinecartTrack)Block.byId[var8]).getBasicRailMetadata(this.world, this, var45, var2, var46);
                 this.locY = (double)var2;
                 boolean var11 = false;
                 boolean var12 = false;
 
                 if (var8 == Block.GOLDEN_RAIL.id)
                 {
-                    var11 = (var10 & 8) != 0;
+                    var11 = (this.world.getData(var45, var2, var46) & 8) != 0;
                     var12 = !var11;
                 }
 
@@ -337,26 +348,7 @@
                     this.locY = (double)(var2 + 1);
                 }
 
-                if (var10 == 2)
-                {
-                    this.motX -= var6;
-                }
-
-                if (var10 == 3)
-                {
-                    this.motX += var6;
-                }
-
-                if (var10 == 4)
-                {
-                    this.motZ += var6;
-                }
-
-                if (var10 == 5)
-                {
-                    this.motZ -= var6;
-                }
-
+                this.adjustSlopeVelocities(var10);
                 int[][] var13 = field_70500_g[var10];
                 double var14 = (double)(var13[1][0] - var13[0][0]);
                 double var16 = (double)(var13[1][2] - var13[0][2]);
@@ -388,7 +380,7 @@
                     }
                 }
 
-                if (var12)
+                if (var12 && this.shouldDoRailFunctions())
                 {
                     var24 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
 
@@ -407,117 +399,50 @@
                 }
 
                 var24 = 0.0D;
-                var26 = (double)var1 + 0.5D + (double)var13[0][0] * 0.5D;
-                double var28 = (double)var3 + 0.5D + (double)var13[0][2] * 0.5D;
-                double var30 = (double)var1 + 0.5D + (double)var13[1][0] * 0.5D;
-                double var32 = (double)var3 + 0.5D + (double)var13[1][2] * 0.5D;
+                var26 = (double)var45 + 0.5D + (double)var13[0][0] * 0.5D;
+                double var28 = (double)var46 + 0.5D + (double)var13[0][2] * 0.5D;
+                double var30 = (double)var45 + 0.5D + (double)var13[1][0] * 0.5D;
+                double var32 = (double)var46 + 0.5D + (double)var13[1][2] * 0.5D;
                 var14 = var30 - var26;
                 var16 = var32 - var28;
-                double var34;
-                double var36;
 
                 if (var14 == 0.0D)
                 {
-                    this.locX = (double)var1 + 0.5D;
-                    var24 = this.locZ - (double)var3;
+                    this.locX = (double)var45 + 0.5D;
+                    var24 = this.locZ - (double)var46;
                 }
                 else if (var16 == 0.0D)
                 {
-                    this.locZ = (double)var3 + 0.5D;
-                    var24 = this.locX - (double)var1;
+                    this.locZ = (double)var46 + 0.5D;
+                    var24 = this.locX - (double)var45;
                 }
                 else
                 {
-                    var34 = this.locX - var26;
-                    var36 = this.locZ - var28;
+                    double var34 = this.locX - var26;
+                    double var36 = this.locZ - var28;
                     var24 = (var34 * var14 + var36 * var16) * 2.0D;
                 }
 
                 this.locX = var26 + var14 * var24;
                 this.locZ = var28 + var16 * var24;
                 this.setPosition(this.locX, this.locY + (double)this.height, this.locZ);
-                var34 = this.motX;
-                var36 = this.motZ;
+                this.moveMinecartOnRail(var45, var2, var46);
 
-                if (this.passenger != null)
+                if (var13[0][1] != 0 && MathHelper.floor(this.locX) - var45 == var13[0][0] && MathHelper.floor(this.locZ) - var46 == var13[0][2])
                 {
-                    var34 *= 0.75D;
-                    var36 *= 0.75D;
-                }
-
-                if (var34 < -var4)
-                {
-                    var34 = -var4;
-                }
-
-                if (var34 > var4)
-                {
-                    var34 = var4;
-                }
-
-                if (var36 < -var4)
-                {
-                    var36 = -var4;
-                }
-
-                if (var36 > var4)
-                {
-                    var36 = var4;
-                }
-
-                this.move(var34, 0.0D, var36);
-
-                if (var13[0][1] != 0 && MathHelper.floor(this.locX) - var1 == var13[0][0] && MathHelper.floor(this.locZ) - var3 == var13[0][2])
-                {
                     this.setPosition(this.locX, this.locY + (double)var13[0][1], this.locZ);
                 }
-                else if (var13[1][1] != 0 && MathHelper.floor(this.locX) - var1 == var13[1][0] && MathHelper.floor(this.locZ) - var3 == var13[1][2])
+                else if (var13[1][1] != 0 && MathHelper.floor(this.locX) - var45 == var13[1][0] && MathHelper.floor(this.locZ) - var46 == var13[1][2])
                 {
                     this.setPosition(this.locX, this.locY + (double)var13[1][1], this.locZ);
                 }
 
-                if (this.passenger != null)
-                {
-                    this.motX *= 0.996999979019165D;
-                    this.motY *= 0.0D;
-                    this.motZ *= 0.996999979019165D;
-                }
-                else
-                {
-                    if (this.type == 2)
-                    {
-                        double var38 = this.b * this.b + this.c * this.c;
+                this.applyDragAndPushForces();
+                Vec3D var38 = this.func_70489_a(this.locX, this.locY, this.locZ);
 
-                        if (var38 > 1.0E-4D)
+                if (var38 != null && var9 != null)
                         {
-                            var38 = (double)MathHelper.sqrt(var38);
-                            this.b /= var38;
-                            this.c /= var38;
-                            double var40 = 0.04D;
-                            this.motX *= 0.800000011920929D;
-                            this.motY *= 0.0D;
-                            this.motZ *= 0.800000011920929D;
-                            this.motX += this.b * var40;
-                            this.motZ += this.c * var40;
-                        }
-                        else
-                        {
-                            this.motX *= 0.8999999761581421D;
-                            this.motY *= 0.0D;
-                            this.motZ *= 0.8999999761581421D;
-                        }
-                    }
-
-                    this.motX *= 0.9599999785423279D;
-                    this.motY *= 0.0D;
-                    this.motZ *= 0.9599999785423279D;
-                }
-
-                Vec3D var52 = this.func_70489_a(this.locX, this.locY, this.locZ);
-
-                if (var52 != null && var9 != null)
-                {
-                    double var39 = (var9.d - var52.d) * 0.05D;
+                    double var39 = (var9.d - var38.d) * 0.05D;
                     var22 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
 
                     if (var22 > 0.0D)
@@ -526,47 +451,29 @@
                         this.motZ = this.motZ / var22 * (var22 + var39);
                     }
 
-                    this.setPosition(this.locX, var52.d, this.locZ);
+                    this.setPosition(this.locX, var38.d, this.locZ);
                 }
 
-                int var51 = MathHelper.floor(this.locX);
-                int var53 = MathHelper.floor(this.locZ);
+                int var52 = MathHelper.floor(this.locX);
+                int var40 = MathHelper.floor(this.locZ);
 
-                if (var51 != var1 || var53 != var3)
+                if (var52 != var45 || var40 != var46)
                 {
                     var22 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
-                    this.motX = var22 * (double)(var51 - var1);
-                    this.motZ = var22 * (double)(var53 - var3);
+                    this.motX = var22 * (double)(var52 - var45);
+                    this.motZ = var22 * (double)(var40 - var46);
                 }
 
-                double var41;
+                this.updatePushForces();
 
-                if (this.type == 2)
+                if (this.shouldDoRailFunctions())
                 {
-                    var41 = this.b * this.b + this.c * this.c;
-
-                    if (var41 > 1.0E-4D && this.motX * this.motX + this.motZ * this.motZ > 0.001D)
-                    {
-                        var41 = (double)MathHelper.sqrt(var41);
-                        this.b /= var41;
-                        this.c /= var41;
-
-                        if (this.b * this.motX + this.c * this.motZ < 0.0D)
-                        {
-                            this.b = 0.0D;
-                            this.c = 0.0D;
+                    ((BlockMinecartTrack)Block.byId[var8]).onMinecartPass(this.world, this, var45, var2, var46);
                         }
-                        else
-                        {
-                            this.b = this.motX;
-                            this.c = this.motZ;
-                        }
-                    }
-                }
 
-                if (var11)
+                if (var11 && this.shouldDoRailFunctions())
                 {
-                    var41 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
+                    double var41 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
 
                     if (var41 > 0.01D)
                     {
@@ -576,22 +483,22 @@
                     }
                     else if (var10 == 1)
                     {
-                        if (this.world.s(var1 - 1, var2, var3))
+                        if (this.world.s(var45 - 1, var2, var46))
                         {
                             this.motX = 0.02D;
                         }
-                        else if (this.world.s(var1 + 1, var2, var3))
+                        else if (this.world.s(var45 + 1, var2, var46))
                         {
                             this.motX = -0.02D;
                         }
                     }
                     else if (var10 == 0)
                     {
-                        if (this.world.s(var1, var2, var3 - 1))
+                        if (this.world.s(var45, var2, var46 - 1))
                         {
                             this.motZ = 0.02D;
                         }
-                        else if (this.world.s(var1, var2, var3 + 1))
+                        else if (this.world.s(var45, var2, var46 + 1))
                         {
                             this.motZ = -0.02D;
                         }
@@ -600,43 +507,9 @@
             }
             else
             {
-                if (this.motX < -var4)
-                {
-                    this.motX = -var4;
+                this.moveMinecartOffRail(var45, var2, var46);
                 }
 
-                if (this.motX > var4)
-                {
-                    this.motX = var4;
-                }
-
-                if (this.motZ < -var4)
-                {
-                    this.motZ = -var4;
-                }
-
-                if (this.motZ > var4)
-                {
-                    this.motZ = var4;
-                }
-
-                if (this.onGround)
-                {
-                    this.motX *= 0.5D;
-                    this.motY *= 0.5D;
-                    this.motZ *= 0.5D;
-                }
-
-                this.move(this.motX, this.motY, this.motZ);
-
-                if (!this.onGround)
-                {
-                    this.motX *= 0.949999988079071D;
-                    this.motY *= 0.949999988079071D;
-                    this.motZ *= 0.949999988079071D;
-                }
-            }
-
             this.D();
             this.pitch = 0.0F;
             double var47 = this.lastX - this.locX;
@@ -661,17 +534,28 @@
             }
 
             this.b(this.yaw, this.pitch);
-            List var15 = this.world.getEntities(this, this.boundingBox.grow(0.20000000298023224D, 0.0D, 0.20000000298023224D));
+            AxisAlignedBB var15 = null;
 
-            if (var15 != null && !var15.isEmpty())
+            if (getCollisionHandler() != null)
             {
-                for (int var50 = 0; var50 < var15.size(); ++var50)
+                var15 = getCollisionHandler().getMinecartCollisionBox(this);
+            }
+            else
                 {
-                    Entity var17 = (Entity)var15.get(var50);
+                var15 = this.boundingBox.grow(0.2D, 0.0D, 0.2D);
+            }
 
-                    if (var17 != this.passenger && var17.M() && var17 instanceof EntityMinecart)
+            List var50 = this.world.getEntities(this, var15);
+
+            if (var50 != null && !var50.isEmpty())
                     {
-                        var17.collide(this);
+                for (int var17 = 0; var17 < var50.size(); ++var17)
+                {
+                    Entity var51 = (Entity)var50.get(var17);
+
+                    if (var51 != this.passenger && var51.M() && var51 instanceof EntityMinecart)
+                    {
+                        var51.collide(this);
                     }
                 }
             }
@@ -686,20 +570,61 @@
                 this.passenger = null;
             }
 
-            if (this.e > 0)
+            this.updateFuel();
+            MinecraftForge.EVENT_BUS.post(new MinecartUpdateEvent(this, (float)var45, (float)var2, (float)var46));
+        }
+    }
+
+    @SideOnly(Side.CLIENT)
+    public Vec3D a(double var1, double var3, double var5, double var7)
             {
-                --this.e;
+        int var9 = MathHelper.floor(var1);
+        int var10 = MathHelper.floor(var3);
+        int var11 = MathHelper.floor(var5);
+
+        if (BlockMinecartTrack.e_(this.world, var9, var10 - 1, var11))
+        {
+            --var10;
             }
 
-            if (this.e <= 0)
+        int var12 = this.world.getTypeId(var9, var10, var11);
+
+        if (!BlockMinecartTrack.d(var12))
             {
-                this.b = this.c = 0.0D;
+            return null;
             }
+        else
+        {
+            int var13 = ((BlockMinecartTrack)Block.byId[var12]).getBasicRailMetadata(this.world, this, var9, var10, var11);
+            var3 = (double)var10;
 
-            this.e(this.e > 0);
+            if (var13 >= 2 && var13 <= 5)
+            {
+                var3 = (double)(var10 + 1);
         }
+
+            int[][] var14 = field_70500_g[var13];
+            double var15 = (double)(var14[1][0] - var14[0][0]);
+            double var17 = (double)(var14[1][2] - var14[0][2]);
+            double var19 = Math.sqrt(var15 * var15 + var17 * var17);
+            var15 /= var19;
+            var17 /= var19;
+            var1 += var15 * var7;
+            var5 += var17 * var7;
+
+            if (var14[0][1] != 0 && MathHelper.floor(var1) - var9 == var14[0][0] && MathHelper.floor(var5) - var11 == var14[0][2])
+            {
+                var3 += (double)var14[0][1];
     }
+            else if (var14[1][1] != 0 && MathHelper.floor(var1) - var9 == var14[1][0] && MathHelper.floor(var5) - var11 == var14[1][2])
+            {
+                var3 += (double)var14[1][1];
+            }
 
+            return this.func_70489_a(var1, var3, var5);
+        }
+    }
+
     public Vec3D func_70489_a(double var1, double var3, double var5)
     {
         int var7 = MathHelper.floor(var1);
@@ -715,14 +640,9 @@
 
         if (BlockMinecartTrack.d(var10))
         {
-            int var11 = this.world.getData(var7, var8, var9);
+            int var11 = ((BlockMinecartTrack)Block.byId[var10]).getBasicRailMetadata(this.world, this, var7, var8, var9);
             var3 = (double)var8;
 
-            if (((BlockMinecartTrack)Block.byId[var10]).p())
-            {
-                var11 &= 7;
-            }
-
             if (var11 >= 2 && var11 <= 5)
             {
                 var3 = (double)(var8 + 1);
@@ -786,13 +706,14 @@
     {
         var1.setInt("Type", this.type);
 
-        if (this.type == 2)
+        if (this.isPoweredCart())
         {
             var1.setDouble("PushX", this.b);
             var1.setDouble("PushZ", this.c);
-            var1.setShort("Fuel", (short)this.e);
+            var1.setInt("Fuel", this.e);
         }
-        else if (this.type == 1)
+
+        if (this.getSize() > 0)
         {
             NBTTagList var2 = new NBTTagList();
 
@@ -818,13 +739,22 @@
     {
         this.type = var1.getInt("Type");
 
-        if (this.type == 2)
+        if (this.isPoweredCart())
         {
             this.b = var1.getDouble("PushX");
             this.c = var1.getDouble("PushZ");
+
+            try
+            {
+                this.e = var1.getInt("Fuel");
+            }
+            catch (ClassCastException var6)
+            {
             this.e = var1.getShort("Fuel");
         }
-        else if (this.type == 1)
+        }
+
+        if (this.getSize() > 0)
         {
             NBTTagList var2 = var1.getList("Items");
             this.items = new ItemStack[this.getSize()];
@@ -842,17 +772,29 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public float R()
+    {
+        return 0.0F;
+    }
+
     /**
      * Applies a velocity to each of the entities pushing them away from each other. Args: entity
      */
     public void collide(Entity var1)
     {
-        if (!this.world.isStatic)
+        MinecraftForge.EVENT_BUS.post(new MinecartCollisionEvent(this, var1));
+
+        if (getCollisionHandler() != null)
         {
-            if (var1 != this.passenger)
+            getCollisionHandler().onEntityCollision(this, var1);
+        }
+        else
             {
-                if (var1 instanceof EntityLiving && !(var1 instanceof EntityHuman) && !(var1 instanceof EntityIronGolem) && this.type == 0 && this.motX * this.motX + this.motZ * this.motZ > 0.01D && this.passenger == null && var1.vehicle == null)
+            if (!this.world.isStatic && var1 != this.passenger)
                 {
+                if (var1 instanceof EntityLiving && !(var1 instanceof EntityHuman) && !(var1 instanceof EntityIronGolem) && this.canBeRidden() && this.motX * this.motX + this.motZ * this.motZ > 0.01D && this.passenger == null && var1.vehicle == null)
+                {
                     var1.mount(this);
                 }
 
@@ -897,7 +839,7 @@
                         double var18 = var1.motX + this.motX;
                         double var20 = var1.motZ + this.motZ;
 
-                        if (((EntityMinecart)var1).type == 2 && this.type != 2)
+                        if (((EntityMinecart)var1).isPoweredCart() && !this.isPoweredCart())
                         {
                             this.motX *= 0.20000000298023224D;
                             this.motZ *= 0.20000000298023224D;
@@ -905,7 +847,7 @@
                             var1.motX *= 0.949999988079071D;
                             var1.motZ *= 0.949999988079071D;
                         }
-                        else if (((EntityMinecart)var1).type != 2 && this.type == 2)
+                        else if (!((EntityMinecart)var1).isPoweredCart() && this.isPoweredCart())
                         {
                             var1.motX *= 0.20000000298023224D;
                             var1.motZ *= 0.20000000298023224D;
@@ -940,7 +882,7 @@
      */
     public int getSize()
     {
-        return 27;
+        return this.type == 1 && this.getClass() == EntityMinecart.class ? 27 : 0;
     }
 
     /**
@@ -1043,8 +985,14 @@
      */
     public boolean c(EntityHuman var1)
     {
-        if (this.type == 0)
+        if (MinecraftForge.EVENT_BUS.post(new MinecartInteractEvent(this, var1)))
         {
+            return true;
+        }
+        else
+        {
+            if (this.canBeRidden())
+            {
             if (this.passenger != null && this.passenger instanceof EntityHuman && this.passenger != var1)
             {
                 return true;
@@ -1055,14 +1003,14 @@
                 var1.mount(this);
             }
         }
-        else if (this.type == 1)
+            else if (this.getSize() > 0)
         {
             if (!this.world.isStatic)
             {
                 var1.openContainer(this);
             }
         }
-        else if (this.type == 2)
+            else if (this.type == 2 && this.getClass() == EntityMinecart.class)
         {
             ItemStack var2 = var1.inventory.getItemInHand();
 
@@ -1082,7 +1030,22 @@
 
         return true;
     }
+    }
 
+    @SideOnly(Side.CLIENT)
+    public void a(double var1, double var3, double var5, float var7, float var8, int var9)
+    {
+        this.as = var1;
+        this.at = var3;
+        this.au = var5;
+        this.av = (double)var7;
+        this.aw = (double)var8;
+        this.j = var9 + 2;
+        this.motX = this.ax;
+        this.motY = this.ay;
+        this.motZ = this.az;
+    }
+
     /**
      * Do not make give this method the name canInteractWith because it clashes with Container
      */
@@ -1091,10 +1054,18 @@
         return this.dead ? false : var1.e(this) <= 64.0D;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void h(double var1, double var3, double var5)
+    {
+        this.ax = this.motX = var1;
+        this.ay = this.motY = var3;
+        this.az = this.motZ = var5;
+    }
+
     /**
      * Is this minecart powered (Fuel > 0)
      */
-    protected boolean h()
+    public boolean h()
     {
         return (this.datawatcher.getByte(16) & 1) != 0;
     }
@@ -1155,4 +1126,330 @@
     {
         return this.datawatcher.getInt(18);
     }
+
+    public void dropCartAsItem()
+    {
+        Iterator var1 = this.getItemsDropped().iterator();
+
+        while (var1.hasNext())
+        {
+            ItemStack var2 = (ItemStack)var1.next();
+            this.a(var2, 0.0F);
 }
+    }
+
+    public List getItemsDropped()
+    {
+        ArrayList var1 = new ArrayList();
+        var1.add(new ItemStack(Item.MINECART));
+
+        switch (this.type)
+        {
+            case 1:
+                var1.add(new ItemStack(Block.CHEST));
+                break;
+
+            case 2:
+                var1.add(new ItemStack(Block.FURNACE));
+        }
+
+        return var1;
+    }
+
+    public ItemStack getCartItem()
+    {
+        return MinecartRegistry.getItemForCart(this);
+    }
+
+    public boolean isPoweredCart()
+    {
+        return this.type == 2 && this.getClass() == EntityMinecart.class;
+    }
+
+    public boolean isStorageCart()
+    {
+        return this.type == 1 && this.getClass() == EntityMinecart.class;
+    }
+
+    public boolean canBeRidden()
+    {
+        return this.type == 0 && this.getClass() == EntityMinecart.class;
+    }
+
+    public boolean canUseRail()
+    {
+        return this.canUseRail;
+    }
+
+    public void setCanUseRail(boolean var1)
+    {
+        this.canUseRail = var1;
+    }
+
+    public boolean shouldDoRailFunctions()
+    {
+        return true;
+    }
+
+    public int getMinecartType()
+    {
+        return this.type;
+    }
+
+    public static IMinecartCollisionHandler getCollisionHandler()
+    {
+        return collisionHandler;
+    }
+
+    public static void setCollisionHandler(IMinecartCollisionHandler var0)
+    {
+        collisionHandler = var0;
+    }
+
+    protected double getDrag()
+    {
+        return this.passenger != null ? defaultDragRidden : defaultDragEmpty;
+    }
+
+    protected void applyDragAndPushForces()
+    {
+        if (this.isPoweredCart())
+        {
+            double var1 = (double)MathHelper.sqrt(this.b * this.b + this.c * this.c);
+
+            if (var1 > 0.01D)
+            {
+                this.b /= var1;
+                this.c /= var1;
+                double var3 = 0.04D;
+                this.motX *= 0.8D;
+                this.motY *= 0.0D;
+                this.motZ *= 0.8D;
+                this.motX += this.b * var3;
+                this.motZ += this.c * var3;
+            }
+            else
+            {
+                this.motX *= 0.9D;
+                this.motY *= 0.0D;
+                this.motZ *= 0.9D;
+            }
+        }
+
+        this.motX *= this.getDrag();
+        this.motY *= 0.0D;
+        this.motZ *= this.getDrag();
+    }
+
+    protected void updatePushForces()
+    {
+        if (this.isPoweredCart())
+        {
+            double var1 = (double)MathHelper.sqrt(this.b * this.b + this.c * this.c);
+
+            if (var1 > 0.01D && this.motX * this.motX + this.motZ * this.motZ > 0.001D)
+            {
+                this.b /= var1;
+                this.c /= var1;
+
+                if (this.b * this.motX + this.c * this.motZ < 0.0D)
+                {
+                    this.b = 0.0D;
+                    this.c = 0.0D;
+                }
+                else
+                {
+                    this.b = this.motX;
+                    this.c = this.motZ;
+                }
+            }
+        }
+    }
+
+    protected void moveMinecartOnRail(int var1, int var2, int var3)
+    {
+        int var4 = this.world.getTypeId(var1, var2, var3);
+
+        if (BlockMinecartTrack.d(var4))
+        {
+            float var5 = ((BlockMinecartTrack)Block.byId[var4]).getRailMaxSpeed(this.world, this, var1, var2, var3);
+            double var6 = (double)Math.min(var5, this.getMaxSpeedRail());
+            double var8 = this.motX;
+            double var10 = this.motZ;
+
+            if (this.passenger != null)
+            {
+                var8 *= 0.75D;
+                var10 *= 0.75D;
+            }
+
+            if (var8 < -var6)
+            {
+                var8 = -var6;
+            }
+
+            if (var8 > var6)
+            {
+                var8 = var6;
+            }
+
+            if (var10 < -var6)
+            {
+                var10 = -var6;
+            }
+
+            if (var10 > var6)
+            {
+                var10 = var6;
+            }
+
+            this.move(var8, 0.0D, var10);
+        }
+    }
+
+    protected void moveMinecartOffRail(int var1, int var2, int var3)
+    {
+        double var4 = (double)this.getMaxSpeedGround();
+
+        if (!this.onGround)
+        {
+            var4 = (double)this.getMaxSpeedAirLateral();
+        }
+
+        if (this.motX < -var4)
+        {
+            this.motX = -var4;
+        }
+
+        if (this.motX > var4)
+        {
+            this.motX = var4;
+        }
+
+        if (this.motZ < -var4)
+        {
+            this.motZ = -var4;
+        }
+
+        if (this.motZ > var4)
+        {
+            this.motZ = var4;
+        }
+
+        double var6 = this.motY;
+
+        if (this.getMaxSpeedAirVertical() > 0.0F && this.motY > (double)this.getMaxSpeedAirVertical())
+        {
+            var6 = (double)this.getMaxSpeedAirVertical();
+
+            if (Math.abs(this.motX) < 0.30000001192092896D && Math.abs(this.motZ) < 0.30000001192092896D)
+            {
+                var6 = 0.15000000596046448D;
+                this.motY = var6;
+            }
+        }
+
+        if (this.onGround)
+        {
+            this.motX *= 0.5D;
+            this.motY *= 0.5D;
+            this.motZ *= 0.5D;
+        }
+
+        this.move(this.motX, var6, this.motZ);
+
+        if (!this.onGround)
+        {
+            this.motX *= this.getDragAir();
+            this.motY *= this.getDragAir();
+            this.motZ *= this.getDragAir();
+        }
+    }
+
+    protected void updateFuel()
+    {
+        if (this.e > 0)
+        {
+            --this.e;
+        }
+
+        if (this.e <= 0)
+        {
+            this.b = this.c = 0.0D;
+        }
+
+        this.e(this.e > 0);
+    }
+
+    protected void adjustSlopeVelocities(int var1)
+    {
+        double var2 = 0.0078125D;
+
+        if (var1 == 2)
+        {
+            this.motX -= var2;
+        }
+        else if (var1 == 3)
+        {
+            this.motX += var2;
+        }
+        else if (var1 == 4)
+        {
+            this.motZ += var2;
+        }
+        else if (var1 == 5)
+        {
+            this.motZ -= var2;
+        }
+    }
+
+    public float getMaxSpeedRail()
+    {
+        return this.maxSpeedRail;
+    }
+
+    public void setMaxSpeedRail(float var1)
+    {
+        this.maxSpeedRail = var1;
+    }
+
+    public float getMaxSpeedGround()
+    {
+        return this.maxSpeedGround;
+    }
+
+    public void setMaxSpeedGround(float var1)
+    {
+        this.maxSpeedGround = var1;
+    }
+
+    public float getMaxSpeedAirLateral()
+    {
+        return this.maxSpeedAirLateral;
+    }
+
+    public void setMaxSpeedAirLateral(float var1)
+    {
+        this.maxSpeedAirLateral = var1;
+    }
+
+    public float getMaxSpeedAirVertical()
+    {
+        return this.maxSpeedAirVertical;
+    }
+
+    public void setMaxSpeedAirVertical(float var1)
+    {
+        this.maxSpeedAirVertical = var1;
+    }
+
+    public double getDragAir()
+    {
+        return this.dragAir;
+    }
+
+    public void setDragAir(double var1)
+    {
+        this.dragAir = var1;
+    }
+}
Index: EntityMushroomCow.java
===================================================================
--- EntityMushroomCow.java	(revision 3)
+++ EntityMushroomCow.java	(working copy)
@@ -1,6 +1,9 @@
 package net.minecraft.server;
 
-public class EntityMushroomCow extends EntityCow
+import java.util.ArrayList;
+import net.minecraftforge.common.IShearable;
+
+public class EntityMushroomCow extends EntityCow implements IShearable
 {
     public EntityMushroomCow(World var1)
     {
@@ -31,32 +34,8 @@
             }
         }
 
-        if (var2 != null && var2.id == Item.SHEARS.id && this.getAge() >= 0)
-        {
-            this.die();
-            this.world.addParticle("largeexplode", this.locX, this.locY + (double)(this.length / 2.0F), this.locZ, 0.0D, 0.0D, 0.0D);
-
-            if (!this.world.isStatic)
-            {
-                EntityCow var3 = new EntityCow(this.world);
-                var3.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
-                var3.setHealth(this.getHealth());
-                var3.aw = this.aw;
-                this.world.addEntity(var3);
-
-                for (int var4 = 0; var4 < 5; ++var4)
-                {
-                    this.world.addEntity(new EntityItem(this.world, this.locX, this.locY + (double)this.length, this.locZ, new ItemStack(Block.RED_MUSHROOM)));
-                }
-            }
-
-            return true;
-        }
-        else
-        {
             return super.c(var1);
         }
-    }
 
     /**
      * This function is used when two same-species animals in 'love mode' breed to generate the new baby animal.
@@ -65,4 +44,28 @@
     {
         return new EntityMushroomCow(this.world);
     }
+
+    public boolean isShearable(ItemStack var1, World var2, int var3, int var4, int var5)
+    {
+        return this.getAge() >= 0;
 }
+
+    public ArrayList onSheared(ItemStack var1, World var2, int var3, int var4, int var5, int var6)
+    {
+        this.die();
+        EntityCow var7 = new EntityCow(this.world);
+        var7.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
+        var7.setHealth(this.getHealth());
+        var7.aw = this.aw;
+        this.world.addEntity(var7);
+        this.world.addParticle("largeexplode", this.locX, this.locY + (double)(this.length / 2.0F), this.locZ, 0.0D, 0.0D, 0.0D);
+        ArrayList var8 = new ArrayList();
+
+        for (int var9 = 0; var9 < 5; ++var9)
+        {
+            var8.add(new ItemStack(Block.RED_MUSHROOM));
+        }
+
+        return var8;
+    }
+}
Index: EntityOcelot.java
===================================================================
--- EntityOcelot.java	(revision 3)
+++ EntityOcelot.java	(working copy)
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+
 public class EntityOcelot extends EntityTameableAnimal
 {
     /**
@@ -73,6 +76,28 @@
         return !this.isTamed();
     }
 
+    @SideOnly(Side.CLIENT)
+    public String O()
+    {
+        switch (this.getCatType())
+        {
+            case 0:
+                return "/mob/ozelot.png";
+
+            case 1:
+                return "/mob/cat_black.png";
+
+            case 2:
+                return "/mob/cat_red.png";
+
+            case 3:
+                return "/mob/cat_siamese.png";
+
+            default:
+                return super.O();
+        }
+    }
+
     /**
      * Returns true if the newer Entity AI code should be run
      */
@@ -300,8 +325,9 @@
                 }
 
                 int var4 = this.world.getTypeId(var1, var2 - 1, var3);
+                Block var5 = Block.byId[var4];
 
-                if (var4 == Block.GRASS.id || var4 == Block.LEAVES.id)
+                if (var4 == Block.GRASS.id || var5 != null && var5.isLeaves(this.world, var1, var2 - 1, var3))
                 {
                     return true;
                 }
Index: EntityPlayer.java
===================================================================
--- EntityPlayer.java	(revision 3)
+++ EntityPlayer.java	(working copy)
@@ -7,6 +7,9 @@
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.entity.player.PlayerDropsEvent;
 
 public class EntityPlayer extends EntityHuman implements ICrafting
 {
@@ -58,7 +61,7 @@
     /**
      * The currently in use window ID. Incremented every time a window is opened.
      */
-    private int containerCounter = 0;
+    public int containerCounter = 0;
 
     /**
      * set to true when player is moving quantity of items from one inventory to another(crafting) but item in either
@@ -79,19 +82,10 @@
         var4.player = this;
         this.itemInWorldManager = var4;
         this.cs = var1.getServerConfigurationManager().o();
-        ChunkCoordinates var5 = var2.getSpawn();
+        ChunkCoordinates var5 = var2.worldProvider.getRandomizedSpawnPoint();
         int var6 = var5.x;
         int var7 = var5.z;
         int var8 = var5.y;
-
-        if (!var2.worldProvider.f && var2.getWorldData().getGameType() != EnumGamemode.ADVENTURE)
-        {
-            int var9 = Math.max(5, var1.getSpawnProtection() - 6);
-            var6 += this.random.nextInt(var9 * 2) - var9;
-            var7 += this.random.nextInt(var9 * 2) - var9;
-            var8 = var2.i(var6, var7);
-        }
-
         this.setPositionRotation((double)var6 + 0.5D, (double)var8, (double)var7 + 0.5D, 0.0F, 0.0F);
         this.server = var1;
         this.X = 0.0F;
@@ -171,7 +165,7 @@
                 if (var4 != null && this.world.isLoaded(var4.x << 4, 0, var4.z << 4))
                 {
                     var1.add(this.world.getChunkAt(var4.x, var4.z));
-                    var3.addAll(((WorldServer)this.world).getTileEntities(var4.x * 16, 0, var4.z * 16, var4.x * 16 + 16, 256, var4.z * 16 + 16));
+                    var3.addAll(((WorldServer)this.world).getTileEntities(var4.x * 16, 0, var4.z * 16, var4.x * 16 + 15, 256, var4.z * 16 + 15));
                 }
             }
 
@@ -244,13 +238,31 @@
      */
     public void die(DamageSource var1)
     {
+        if (!ForgeHooks.onLivingDeath(this, var1))
+        {
         this.server.getServerConfigurationManager().sendAll(new Packet3Chat(var1.getLocalizedDeathMessage(this)));
 
         if (!this.world.getGameRules().getBoolean("keepInventory"))
         {
+                this.captureDrops = true;
+                this.capturedDrops.clear();
             this.inventory.l();
+                this.captureDrops = false;
+                PlayerDropsEvent var2 = new PlayerDropsEvent(this, var1, this.capturedDrops, this.lastDamageByPlayerTime > 0);
+
+                if (!MinecraftForge.EVENT_BUS.post(var2))
+                {
+                    Iterator var3 = this.capturedDrops.iterator();
+
+                    while (var3.hasNext())
+                    {
+                        EntityItem var4 = (EntityItem)var3.next();
+                        this.a(var4);
         }
     }
+            }
+        }
+    }
 
     /**
      * Called when the entity is attacked.
@@ -418,7 +430,7 @@
     /**
      * get the next window id to use
      */
-    private void nextContainerCounter()
+    public void nextContainerCounter()
     {
         this.containerCounter = this.containerCounter % 100 + 1;
     }
@@ -553,14 +565,11 @@
      */
     public void a(Container var1, int var2, ItemStack var3)
     {
-        if (!(var1.getSlot(var2) instanceof SlotResult))
+        if (!(var1.getSlot(var2) instanceof SlotResult) && !this.h)
         {
-            if (!this.h)
-            {
                 this.netServerHandler.sendPacket(new Packet103SetSlot(var1.windowId, var2, var3));
             }
         }
-    }
 
     public void updateInventory(Container var1)
     {
@@ -618,10 +627,8 @@
      */
     public void a(Statistic var1, int var2)
     {
-        if (var1 != null)
+        if (var1 != null && !var1.f)
         {
-            if (!var1.f)
-            {
                 while (var2 > 100)
                 {
                     this.netServerHandler.sendPacket(new Packet200Statistic(var1.e, 100));
@@ -631,7 +638,6 @@
                 this.netServerHandler.sendPacket(new Packet200Statistic(var1.e, var2));
             }
         }
-    }
 
     public void l()
     {
Index: EntitySheep.java
===================================================================
--- EntitySheep.java	(revision 3)
+++ EntitySheep.java	(working copy)
@@ -1,8 +1,12 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import java.util.ArrayList;
 import java.util.Random;
+import net.minecraftforge.common.IShearable;
 
-public class EntitySheep extends EntityAnimal
+public class EntitySheep extends EntityAnimal implements IShearable
 {
     /**
      * Holds the RGB table of the sheep colors - in OpenGL glColor3f values - used to render the sheep colored fleece.
@@ -94,33 +98,44 @@
         return Block.WOOL.id;
     }
 
-    /**
-     * Called when a player interacts with a mob. e.g. gets milk from a cow, gets into the saddle on a pig.
-     */
-    public boolean c(EntityHuman var1)
+    @SideOnly(Side.CLIENT)
+    public void a(byte var1)
     {
-        ItemStack var2 = var1.inventory.getItemInHand();
-
-        if (var2 != null && var2.id == Item.SHEARS.id && !this.isSheared() && !this.isBaby())
+        if (var1 == 10)
         {
-            if (!this.world.isStatic)
+            this.e = 40;
+        }
+        else
             {
-                this.setSheared(true);
-                int var3 = 1 + this.random.nextInt(3);
+            super.a(var1);
+        }
+    }
 
-                for (int var4 = 0; var4 < var3; ++var4)
+    @SideOnly(Side.CLIENT)
+    public float j(float var1)
                 {
-                    EntityItem var5 = this.a(new ItemStack(Block.WOOL.id, 1, this.getColor()), 1.0F);
-                    var5.motY += (double)(this.random.nextFloat() * 0.05F);
-                    var5.motX += (double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
-                    var5.motZ += (double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
+        return this.e <= 0 ? 0.0F : (this.e >= 4 && this.e <= 36 ? 1.0F : (this.e < 4 ? ((float)this.e - var1) / 4.0F : -((float)(this.e - 40) - var1) / 4.0F));
                 }
-            }
 
-            var2.damage(1, var1);
-            this.world.makeSound(this, "mob.sheep.shear", 1.0F, 1.0F);
+    @SideOnly(Side.CLIENT)
+    public float k(float var1)
+    {
+        if (this.e > 4 && this.e <= 36)
+        {
+            float var2 = ((float)(this.e - 4) - var1) / 32.0F;
+            return ((float)Math.PI / 5F) + ((float)Math.PI * 7F / 100F) * MathHelper.sin(var2 * 28.7F);
         }
+        else
+        {
+            return this.e > 0 ? ((float)Math.PI / 5F) : this.pitch / (180F / (float)Math.PI);
+        }
+    }
 
+    /**
+     * Called when a player interacts with a mob. e.g. gets milk from a cow, gets into the saddle on a pig.
+     */
+    public boolean c(EntityHuman var1)
+    {
         return super.c(var1);
     }
 
@@ -269,4 +284,24 @@
     {
         this.setColor(a(this.world.random));
     }
+
+    public boolean isShearable(ItemStack var1, World var2, int var3, int var4, int var5)
+    {
+        return !this.isSheared() && !this.isBaby();
 }
+
+    public ArrayList onSheared(ItemStack var1, World var2, int var3, int var4, int var5, int var6)
+    {
+        ArrayList var7 = new ArrayList();
+        this.setSheared(true);
+        int var8 = 1 + this.random.nextInt(3);
+
+        for (int var9 = 0; var9 < var8; ++var9)
+        {
+            var7.add(new ItemStack(Block.WOOL.id, 1, this.getColor()));
+        }
+
+        this.world.makeSound(this, "mob.sheep.shear", 1.0F, 1.0F);
+        return var7;
+    }
+}
Index: EntitySlime.java
===================================================================
--- EntitySlime.java	(revision 3)
+++ EntitySlime.java	(working copy)
@@ -271,7 +271,7 @@
     {
         Chunk var1 = this.world.getChunkAtWorldCoords(MathHelper.floor(this.locX), MathHelper.floor(this.locZ));
 
-        if (this.world.getWorldData().getType() == WorldType.FLAT && this.random.nextInt(4) != 1)
+        if (this.world.getWorldData().getType().handleSlimeSpawnReduction(this.random, this.world))
         {
             return false;
         }
Index: EntityTracker.java
===================================================================
--- EntityTracker.java	(revision 3)
+++ EntityTracker.java	(working copy)
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.registry.EntityRegistry;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -26,6 +27,8 @@
 
     public void addEntity(Entity var1)
     {
+        if (!EntityRegistry.instance().tryTrackingEntity(this, var1))
+        {
         if (var1 instanceof EntityPlayer)
         {
             this.addEntity(var1, 512, 2);
@@ -139,6 +142,7 @@
             this.addEntity(var1, 160, Integer.MAX_VALUE, false);
         }
     }
+    }
 
     public void addEntity(Entity var1, int var2, int var3)
     {
Index: EntityTrackerEntry.java
===================================================================
--- EntityTrackerEntry.java	(revision 3)
+++ EntityTrackerEntry.java	(working copy)
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.network.FMLNetworkHandler;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -310,7 +311,15 @@
                     this.j = this.tracker.motX;
                     this.k = this.tracker.motY;
                     this.l = this.tracker.motZ;
+                    int var7 = MathHelper.floor(this.tracker.locX * 32.0D);
+                    int var8 = MathHelper.floor(this.tracker.locY * 32.0D);
+                    int var9 = MathHelper.floor(this.tracker.locZ * 32.0D);
 
+                    if (var7 != this.xLoc || var8 != this.yLoc || var9 != this.zLoc)
+                    {
+                        FMLNetworkHandler.makeEntitySpawnAdjustment(this.tracker.id, var1, this.xLoc, this.yLoc, this.zLoc);
+                    }
+
                     if (this.isMoving && !(var6 instanceof Packet24MobSpawn))
                     {
                         var1.netServerHandler.sendPacket(new Packet28EntityVelocity(this.tracker.id, this.tracker.motX, this.tracker.motY, this.tracker.motZ));
@@ -323,22 +332,22 @@
 
                     if (this.tracker instanceof EntityLiving)
                     {
-                        for (int var7 = 0; var7 < 5; ++var7)
+                        for (int var10 = 0; var10 < 5; ++var10)
                         {
-                            ItemStack var8 = ((EntityLiving)this.tracker).getEquipment(var7);
+                            ItemStack var11 = ((EntityLiving)this.tracker).getEquipment(var10);
 
-                            if (var8 != null)
+                            if (var11 != null)
                             {
-                                var1.netServerHandler.sendPacket(new Packet5EntityEquipment(this.tracker.id, var7, var8));
+                                var1.netServerHandler.sendPacket(new Packet5EntityEquipment(this.tracker.id, var10, var11));
                             }
                         }
                     }
 
                     if (this.tracker instanceof EntityHuman)
                     {
-                        EntityHuman var11 = (EntityHuman)this.tracker;
+                        EntityHuman var15 = (EntityHuman)this.tracker;
 
-                        if (var11.isSleeping())
+                        if (var15.isSleeping())
                         {
                             var1.netServerHandler.sendPacket(new Packet17EntityLocationAction(this.tracker, 0, MathHelper.floor(this.tracker.locX), MathHelper.floor(this.tracker.locY), MathHelper.floor(this.tracker.locZ)));
                         }
@@ -346,13 +355,13 @@
 
                     if (this.tracker instanceof EntityLiving)
                     {
-                        EntityLiving var10 = (EntityLiving)this.tracker;
-                        Iterator var12 = var10.getEffects().iterator();
+                        EntityLiving var13 = (EntityLiving)this.tracker;
+                        Iterator var14 = var13.getEffects().iterator();
 
-                        while (var12.hasNext())
+                        while (var14.hasNext())
                         {
-                            MobEffect var9 = (MobEffect)var12.next();
-                            var1.netServerHandler.sendPacket(new Packet41MobEffect(this.tracker.id, var9));
+                            MobEffect var12 = (MobEffect)var14.next();
+                            var1.netServerHandler.sendPacket(new Packet41MobEffect(this.tracker.id, var12));
                         }
                     }
                 }
@@ -388,36 +397,44 @@
             System.out.println("Fetching addPacket for removed entity");
         }
 
-        if (this.tracker instanceof EntityItem)
+        Packet var1 = FMLNetworkHandler.getEntitySpawningPacket(this.tracker);
+
+        if (var1 != null)
         {
-            EntityItem var9 = (EntityItem)this.tracker;
-            Packet21PickupSpawn var10 = new Packet21PickupSpawn(var9);
-            var9.locX = (double)var10.b / 32.0D;
-            var9.locY = (double)var10.c / 32.0D;
-            var9.locZ = (double)var10.d / 32.0D;
-            return var10;
+            return var1;
         }
+        else if (this.tracker instanceof EntityItem)
+        {
+            EntityItem var11 = (EntityItem)this.tracker;
+            Packet21PickupSpawn var8 = new Packet21PickupSpawn(var11);
+            var11.locX = (double)var8.b / 32.0D;
+            var11.locY = (double)var8.c / 32.0D;
+            var11.locZ = (double)var8.d / 32.0D;
+            return var8;
+        }
         else if (this.tracker instanceof EntityPlayer)
         {
             return new Packet20NamedEntitySpawn((EntityHuman)this.tracker);
         }
         else
         {
+            EntityMinecart var2;
+
             if (this.tracker instanceof EntityMinecart)
             {
-                EntityMinecart var1 = (EntityMinecart)this.tracker;
+                var2 = (EntityMinecart)this.tracker;
 
-                if (var1.type == 0)
+                if (var2.type == 0)
                 {
                     return new Packet23VehicleSpawn(this.tracker, 10);
                 }
 
-                if (var1.type == 1)
+                if (var2.type == 1)
                 {
                     return new Packet23VehicleSpawn(this.tracker, 11);
                 }
 
-                if (var1.type == 2)
+                if (var2.type == 2)
                 {
                     return new Packet23VehicleSpawn(this.tracker, 12);
                 }
@@ -431,13 +448,13 @@
             {
                 if (this.tracker instanceof EntityFishingHook)
                 {
-                    EntityHuman var8 = ((EntityFishingHook)this.tracker).owner;
-                    return new Packet23VehicleSpawn(this.tracker, 90, var8 != null ? var8.id : this.tracker.id);
+                    EntityHuman var10 = ((EntityFishingHook)this.tracker).owner;
+                    return new Packet23VehicleSpawn(this.tracker, 90, var10 != null ? var10.id : this.tracker.id);
                 }
                 else if (this.tracker instanceof EntityArrow)
                 {
-                    Entity var7 = ((EntityArrow)this.tracker).shooter;
-                    return new Packet23VehicleSpawn(this.tracker, 60, var7 != null ? var7.id : this.tracker.id);
+                    Entity var9 = ((EntityArrow)this.tracker).shooter;
+                    return new Packet23VehicleSpawn(this.tracker, 60, var9 != null ? var9.id : this.tracker.id);
                 }
                 else if (this.tracker instanceof EntitySnowball)
                 {
@@ -461,36 +478,36 @@
                 }
                 else
                 {
-                    Packet23VehicleSpawn var2;
+                    Packet23VehicleSpawn var5;
 
                     if (this.tracker instanceof EntityFireball)
                     {
-                        EntityFireball var6 = (EntityFireball)this.tracker;
+                        EntityFireball var7 = (EntityFireball)this.tracker;
                         var2 = null;
-                        byte var3 = 63;
+                        byte var4 = 63;
 
                         if (this.tracker instanceof EntitySmallFireball)
                         {
-                            var3 = 64;
+                            var4 = 64;
                         }
                         else if (this.tracker instanceof EntityWitherSkull)
                         {
-                            var3 = 66;
+                            var4 = 66;
                         }
 
-                        if (var6.shooter != null)
+                        if (var7.shooter != null)
                         {
-                            var2 = new Packet23VehicleSpawn(this.tracker, var3, ((EntityFireball)this.tracker).shooter.id);
+                            var5 = new Packet23VehicleSpawn(this.tracker, var4, ((EntityFireball)this.tracker).shooter.id);
                         }
                         else
                         {
-                            var2 = new Packet23VehicleSpawn(this.tracker, var3, 0);
+                            var5 = new Packet23VehicleSpawn(this.tracker, var4, 0);
                         }
 
-                        var2.e = (int)(var6.dirX * 8000.0D);
-                        var2.f = (int)(var6.dirY * 8000.0D);
-                        var2.g = (int)(var6.dirZ * 8000.0D);
-                        return var2;
+                        var5.e = (int)(var7.dirX * 8000.0D);
+                        var5.f = (int)(var7.dirY * 8000.0D);
+                        var5.g = (int)(var7.dirZ * 8000.0D);
+                        return var5;
                     }
                     else if (this.tracker instanceof EntityEgg)
                     {
@@ -506,8 +523,8 @@
                     }
                     else if (this.tracker instanceof EntityFallingBlock)
                     {
-                        EntityFallingBlock var5 = (EntityFallingBlock)this.tracker;
-                        return new Packet23VehicleSpawn(this.tracker, 70, var5.id | var5.field_70285_b << 16);
+                        EntityFallingBlock var6 = (EntityFallingBlock)this.tracker;
+                        return new Packet23VehicleSpawn(this.tracker, 70, var6.id | var6.field_70285_b << 16);
                     }
                     else if (this.tracker instanceof EntityPainting)
                     {
@@ -515,12 +532,12 @@
                     }
                     else if (this.tracker instanceof EntityItemFrame)
                     {
-                        EntityItemFrame var4 = (EntityItemFrame)this.tracker;
-                        var2 = new Packet23VehicleSpawn(this.tracker, 71, var4.field_82332_a);
-                        var2.b = MathHelper.d((float)(var4.x * 32));
-                        var2.c = MathHelper.d((float)(var4.y * 32));
-                        var2.d = MathHelper.d((float)(var4.z * 32));
-                        return var2;
+                        EntityItemFrame var3 = (EntityItemFrame)this.tracker;
+                        var5 = new Packet23VehicleSpawn(this.tracker, 71, var3.field_82332_a);
+                        var5.b = MathHelper.d((float)(var3.x * 32));
+                        var5.c = MathHelper.d((float)(var3.y * 32));
+                        var5.d = MathHelper.d((float)(var3.z * 32));
+                        return var5;
                     }
                     else if (this.tracker instanceof EntityExperienceOrb)
                     {
Index: EntityTypes.java
===================================================================
--- EntityTypes.java	(revision 3)
+++ EntityTypes.java	(working copy)
@@ -7,13 +7,13 @@
 public class EntityTypes
 {
     /** Provides a mapping between entity classes and a string */
-    private static Map b = new HashMap();
+    public static Map b = new HashMap();
 
     /** Provides a mapping between a string and an entity classes */
-    private static Map c = new HashMap();
+    public static Map c = new HashMap();
 
     /** provides a mapping between an entityID and an Entity Class */
-    private static Map d = new HashMap();
+    public static Map d = new HashMap();
 
     /** provides a mapping between an Entity Class and an entity ID */
     private static Map e = new HashMap();
@@ -27,7 +27,7 @@
     /**
      * adds a mapping between Entity classes and both a string representation and an ID
      */
-    private static void a(Class var0, String var1, int var2)
+    public static void a(Class var0, String var1, int var2)
     {
         b.put(var1, var0);
         c.put(var0, var1);
@@ -39,7 +39,7 @@
     /**
      * Adds a entity mapping with egg info.
      */
-    private static void a(Class var0, String var1, int var2, int var3, int var4)
+    public static void a(Class var0, String var1, int var2, int var3, int var4)
     {
         a(var0, var1, var2);
         a.put(Integer.valueOf(var2), new MonsterEggInfo(var2, var3, var4));
Index: Explosion.java
===================================================================
--- Explosion.java	(revision 3)
+++ Explosion.java	(working copy)
@@ -46,9 +46,9 @@
         int var3;
         int var4;
         int var5;
-        double var15;
-        double var17;
-        double var19;
+        double var6;
+        double var8;
+        double var10;
 
         for (var3 = 0; var3 < this.field_77289_h; ++var3)
         {
@@ -58,40 +58,40 @@
                 {
                     if (var3 == 0 || var3 == this.field_77289_h - 1 || var4 == 0 || var4 == this.field_77289_h - 1 || var5 == 0 || var5 == this.field_77289_h - 1)
                     {
-                        double var6 = (double)((float)var3 / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
-                        double var8 = (double)((float)var4 / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
-                        double var10 = (double)((float)var5 / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
-                        double var12 = Math.sqrt(var6 * var6 + var8 * var8 + var10 * var10);
-                        var6 /= var12;
-                        var8 /= var12;
-                        var10 /= var12;
-                        float var14 = this.size * (0.7F + this.world.random.nextFloat() * 0.6F);
-                        var15 = this.posX;
-                        var17 = this.posY;
-                        var19 = this.posZ;
+                        double var12 = (double)((float)var3 / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
+                        double var14 = (double)((float)var4 / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
+                        double var16 = (double)((float)var5 / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
+                        double var18 = Math.sqrt(var12 * var12 + var14 * var14 + var16 * var16);
+                        var12 /= var18;
+                        var14 /= var18;
+                        var16 /= var18;
+                        float var20 = this.size * (0.7F + this.world.random.nextFloat() * 0.6F);
+                        var6 = this.posX;
+                        var8 = this.posY;
+                        var10 = this.posZ;
 
-                        for (float var21 = 0.3F; var14 > 0.0F; var14 -= var21 * 0.75F)
+                        for (float var21 = 0.3F; var20 > 0.0F; var20 -= var21 * 0.75F)
                         {
-                            int var22 = MathHelper.floor(var15);
-                            int var23 = MathHelper.floor(var17);
-                            int var24 = MathHelper.floor(var19);
+                            int var22 = MathHelper.floor(var6);
+                            int var23 = MathHelper.floor(var8);
+                            int var24 = MathHelper.floor(var10);
                             int var25 = this.world.getTypeId(var22, var23, var24);
 
                             if (var25 > 0)
                             {
                                 Block var26 = Block.byId[var25];
-                                float var27 = this.source != null ? this.source.func_82146_a(this, var26, var22, var23, var24) : var26.a(this.source);
-                                var14 -= (var27 + 0.3F) * var21;
+                                float var27 = this.source != null ? this.source.func_82146_a(this, var26, var22, var23, var24) : var26.getExplosionResistance(this.source, this.world, var22, var23, var24, this.posX, this.posY, this.posZ);
+                                var20 -= (var27 + 0.3F) * var21;
                             }
 
-                            if (var14 > 0.0F)
+                            if (var20 > 0.0F)
                             {
                                 var2.add(new ChunkPosition(var22, var23, var24));
                             }
 
-                            var15 += var6 * (double)var21;
-                            var17 += var8 * (double)var21;
-                            var19 += var10 * (double)var21;
+                            var6 += var12 * (double)var21;
+                            var8 += var14 * (double)var21;
+                            var10 += var16 * (double)var21;
                         }
                     }
                 }
@@ -104,38 +104,38 @@
         var4 = MathHelper.floor(this.posX + (double)this.size + 1.0D);
         var5 = MathHelper.floor(this.posY - (double)this.size - 1.0D);
         int var28 = MathHelper.floor(this.posY + (double)this.size + 1.0D);
-        int var7 = MathHelper.floor(this.posZ - (double)this.size - 1.0D);
+        int var13 = MathHelper.floor(this.posZ - (double)this.size - 1.0D);
         int var29 = MathHelper.floor(this.posZ + (double)this.size + 1.0D);
-        List var9 = this.world.getEntities(this.source, AxisAlignedBB.a().a((double)var3, (double)var5, (double)var7, (double)var4, (double)var28, (double)var29));
+        List var15 = this.world.getEntities(this.source, AxisAlignedBB.a().a((double)var3, (double)var5, (double)var13, (double)var4, (double)var28, (double)var29));
         Vec3D var30 = this.world.getVec3DPool().create(this.posX, this.posY, this.posZ);
 
-        for (int var11 = 0; var11 < var9.size(); ++var11)
+        for (int var17 = 0; var17 < var15.size(); ++var17)
         {
-            Entity var31 = (Entity)var9.get(var11);
-            double var13 = var31.f(this.posX, this.posY, this.posZ) / (double)this.size;
+            Entity var31 = (Entity)var15.get(var17);
+            double var19 = var31.f(this.posX, this.posY, this.posZ) / (double)this.size;
 
-            if (var13 <= 1.0D)
+            if (var19 <= 1.0D)
             {
-                var15 = var31.locX - this.posX;
-                var17 = var31.locY + (double)var31.getHeadHeight() - this.posY;
-                var19 = var31.locZ - this.posZ;
-                double var33 = (double)MathHelper.sqrt(var15 * var15 + var17 * var17 + var19 * var19);
+                var6 = var31.locX - this.posX;
+                var8 = var31.locY + (double)var31.getHeadHeight() - this.posY;
+                var10 = var31.locZ - this.posZ;
+                double var33 = (double)MathHelper.sqrt(var6 * var6 + var8 * var8 + var10 * var10);
 
                 if (var33 != 0.0D)
                 {
-                    var15 /= var33;
-                    var17 /= var33;
-                    var19 /= var33;
+                    var6 /= var33;
+                    var8 /= var33;
+                    var10 /= var33;
                     double var32 = (double)this.world.a(var30, var31.boundingBox);
-                    double var34 = (1.0D - var13) * var32;
+                    double var34 = (1.0D - var19) * var32;
                     var31.damageEntity(DamageSource.EXPLOSION, (int)((var34 * var34 + var34) / 2.0D * 8.0D * (double)this.size + 1.0D));
-                    var31.motX += var15 * var34;
-                    var31.motY += var17 * var34;
-                    var31.motZ += var19 * var34;
+                    var31.motX += var6 * var34;
+                    var31.motY += var8 * var34;
+                    var31.motZ += var10 * var34;
 
                     if (var31 instanceof EntityHuman)
                     {
-                        this.field_77288_k.put((EntityHuman)var31, this.world.getVec3DPool().create(var15 * var34, var17 * var34, var19 * var34));
+                        this.field_77288_k.put((EntityHuman)var31, this.world.getVec3DPool().create(var6 * var34, var8 * var34, var10 * var34));
                     }
                 }
             }
Index: ItemBlock.java
===================================================================
--- ItemBlock.java	(revision 3)
+++ ItemBlock.java	(working copy)
@@ -1,5 +1,9 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import java.util.List;
+
 public class ItemBlock extends Item
 {
     /** The block ID of the Block associated with this ItemBlock */
@@ -10,6 +14,7 @@
         super(var1);
         this.id = var1 + 256;
         this.c(Block.byId[var1 + 256].a(2));
+        this.isDefaultTexture = Block.byId[var1 + 256].isDefaultTexture;
     }
 
     /**
@@ -32,7 +37,7 @@
         {
             var7 = 1;
         }
-        else if (var11 != Block.VINE.id && var11 != Block.LONG_GRASS.id && var11 != Block.DEAD_BUSH.id)
+        else if (var11 != Block.VINE.id && var11 != Block.LONG_GRASS.id && var11 != Block.DEAD_BUSH.id && (Block.byId[var11] == null || !Block.byId[var11].isBlockReplaceable(var3, var4, var5, var6)))
         {
             if (var7 == 0)
             {
@@ -81,14 +86,8 @@
         {
             Block var12 = Block.byId[this.id];
 
-            if (var3.setTypeIdAndData(var4, var5, var6, this.id, this.filterData(var1.getData())))
+            if (this.placeBlockAt(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10))
             {
-                if (var3.getTypeId(var4, var5, var6) == this.id)
-                {
-                    Block.byId[this.id].postPlace(var3, var4, var5, var6, var7, var8, var9, var10);
-                    Block.byId[this.id].postPlace(var3, var4, var5, var6, var2);
-                }
-
                 var3.makeSound((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var12.stepSound.func_82593_b(), (var12.stepSound.getVolume1() + 1.0F) / 2.0F, var12.stepSound.getVolume2() * 0.8F);
                 --var1.count;
             }
@@ -101,6 +100,51 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public boolean a(World var1, int var2, int var3, int var4, int var5, EntityHuman var6, ItemStack var7)
+    {
+        int var8 = var1.getTypeId(var2, var3, var4);
+
+        if (var8 == Block.SNOW.id)
+        {
+            var5 = 1;
+        }
+        else if (var8 != Block.VINE.id && var8 != Block.LONG_GRASS.id && var8 != Block.DEAD_BUSH.id && (Block.byId[var8] == null || !Block.byId[var8].isBlockReplaceable(var1, var2, var3, var4)))
+        {
+            if (var5 == 0)
+            {
+                --var3;
+            }
+
+            if (var5 == 1)
+            {
+                ++var3;
+            }
+
+            if (var5 == 2)
+            {
+                --var4;
+            }
+
+            if (var5 == 3)
+            {
+                ++var4;
+            }
+
+            if (var5 == 4)
+            {
+                --var2;
+            }
+
+            if (var5 == 5)
+            {
+                ++var2;
+            }
+        }
+
+        return var1.mayPlace(this.g(), var2, var3, var4, false, var5, (Entity)null);
+    }
+
     public String c_(ItemStack var1)
     {
         return Block.byId[this.id].a();
@@ -110,4 +154,34 @@
     {
         return Block.byId[this.id].a();
     }
+
+    @SideOnly(Side.CLIENT)
+    public CreativeModeTab w()
+    {
+        return Block.byId[this.id].E();
 }
+
+    @SideOnly(Side.CLIENT)
+    public void a(int var1, CreativeModeTab var2, List var3)
+    {
+        Block.byId[this.id].a(var1, var2, var3);
+    }
+
+    public boolean placeBlockAt(ItemStack var1, EntityHuman var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10)
+    {
+        if (!var3.setTypeIdAndData(var4, var5, var6, this.id, this.filterData(var1.getData())))
+        {
+            return false;
+        }
+        else
+        {
+            if (var3.getTypeId(var4, var5, var6) == this.id)
+            {
+                Block.byId[this.id].postPlace(var3, var4, var5, var6, var7, var8, var9, var10);
+                Block.byId[this.id].postPlace(var3, var4, var5, var6, var2);
+            }
+
+            return true;
+        }
+    }
+}
Index: ItemBow.java
===================================================================
--- ItemBow.java	(revision 3)
+++ ItemBow.java	(working copy)
@@ -1,5 +1,9 @@
 package net.minecraft.server;
 
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.entity.player.ArrowLooseEvent;
+import net.minecraftforge.event.entity.player.ArrowNockEvent;
+
 public class ItemBow extends Item
 {
     public ItemBow(int var1)
@@ -15,56 +19,62 @@
      */
     public void a(ItemStack var1, World var2, EntityHuman var3, int var4)
     {
-        boolean var5 = var3.abilities.canInstantlyBuild || EnchantmentManager.getEnchantmentLevel(Enchantment.ARROW_INFINITE.id, var1) > 0;
+        int var5 = this.a(var1) - var4;
+        ArrowLooseEvent var6 = new ArrowLooseEvent(var3, var1, var5);
+        MinecraftForge.EVENT_BUS.post(var6);
 
-        if (var5 || var3.inventory.e(Item.ARROW.id))
+        if (!var6.isCanceled())
         {
-            int var6 = this.a(var1) - var4;
-            float var7 = (float)var6 / 20.0F;
-            var7 = (var7 * var7 + var7 * 2.0F) / 3.0F;
+            var5 = var6.charge;
+            boolean var7 = var3.abilities.canInstantlyBuild || EnchantmentManager.getEnchantmentLevel(Enchantment.ARROW_INFINITE.id, var1) > 0;
 
-            if ((double)var7 < 0.1D)
+            if (var7 || var3.inventory.e(Item.ARROW.id))
             {
+                float var8 = (float)var5 / 20.0F;
+                var8 = (var8 * var8 + var8 * 2.0F) / 3.0F;
+
+                if ((double)var8 < 0.1D)
+                {
                 return;
             }
 
-            if (var7 > 1.0F)
+                if (var8 > 1.0F)
             {
-                var7 = 1.0F;
+                    var8 = 1.0F;
             }
 
-            EntityArrow var8 = new EntityArrow(var2, var3, var7 * 2.0F);
+                EntityArrow var9 = new EntityArrow(var2, var3, var8 * 2.0F);
 
-            if (var7 == 1.0F)
+                if (var8 == 1.0F)
             {
-                var8.e(true);
+                    var9.e(true);
             }
 
-            int var9 = EnchantmentManager.getEnchantmentLevel(Enchantment.ARROW_DAMAGE.id, var1);
+                int var10 = EnchantmentManager.getEnchantmentLevel(Enchantment.ARROW_DAMAGE.id, var1);
 
-            if (var9 > 0)
+                if (var10 > 0)
             {
-                var8.b(var8.c() + (double)var9 * 0.5D + 0.5D);
+                    var9.b(var9.c() + (double)var10 * 0.5D + 0.5D);
             }
 
-            int var10 = EnchantmentManager.getEnchantmentLevel(Enchantment.ARROW_KNOCKBACK.id, var1);
+                int var11 = EnchantmentManager.getEnchantmentLevel(Enchantment.ARROW_KNOCKBACK.id, var1);
 
-            if (var10 > 0)
+                if (var11 > 0)
             {
-                var8.a(var10);
+                    var9.a(var11);
             }
 
             if (EnchantmentManager.getEnchantmentLevel(Enchantment.ARROW_FIRE.id, var1) > 0)
             {
-                var8.setOnFire(100);
+                    var9.setOnFire(100);
             }
 
             var1.damage(1, var3);
-            var2.makeSound(var3, "random.bow", 1.0F, 1.0F / (d.nextFloat() * 0.4F + 1.2F) + var7 * 0.5F);
+                var2.makeSound(var3, "random.bow", 1.0F, 1.0F / (d.nextFloat() * 0.4F + 1.2F) + var8 * 0.5F);
 
-            if (var5)
+                if (var7)
             {
-                var8.fromPlayer = 2;
+                    var9.fromPlayer = 2;
             }
             else
             {
@@ -73,10 +83,11 @@
 
             if (!var2.isStatic)
             {
-                var2.addEntity(var8);
+                    var2.addEntity(var9);
             }
         }
     }
+    }
 
     public ItemStack b(ItemStack var1, World var2, EntityHuman var3)
     {
@@ -104,6 +115,15 @@
      */
     public ItemStack a(ItemStack var1, World var2, EntityHuman var3)
     {
+        ArrowNockEvent var4 = new ArrowNockEvent(var3, var1);
+        MinecraftForge.EVENT_BUS.post(var4);
+
+        if (var4.isCanceled())
+        {
+            return var4.result;
+        }
+        else
+        {
         if (var3.abilities.canInstantlyBuild || var3.inventory.e(Item.ARROW.id))
         {
             var3.a(var1, this.a(var1));
@@ -111,6 +131,7 @@
 
         return var1;
     }
+    }
 
     /**
      * Return the enchantability factor of the item, most of the time is based on material.
Index: ItemBucket.java
===================================================================
--- ItemBucket.java	(revision 3)
+++ ItemBucket.java	(working copy)
@@ -1,5 +1,9 @@
 package net.minecraft.server;
 
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.Event$Result;
+import net.minecraftforge.event.entity.player.FillBucketEvent;
+
 public class ItemBucket extends Item
 {
     /** field for checking if the bucket has been filled. */
@@ -31,27 +35,55 @@
         }
         else
         {
+            FillBucketEvent var13 = new FillBucketEvent(var3, var1, var2, var12);
+
+            if (MinecraftForge.EVENT_BUS.post(var13))
+            {
+                return var1;
+            }
+            else if (var13.getResult() == Event$Result.ALLOW)
+            {
+                if (var3.abilities.canInstantlyBuild)
+                {
+                    return var1;
+                }
+                else if (--var1.count <= 0)
+                {
+                    return var13.result;
+                }
+                else
+                {
+                    if (!var3.inventory.pickup(var13.result))
+                    {
+                        var3.drop(var13.result);
+                    }
+
+                    return var1;
+                }
+            }
+            else
+            {
             if (var12.type == EnumMovingObjectType.TILE)
             {
-                int var13 = var12.b;
-                int var14 = var12.c;
-                int var15 = var12.d;
+                    int var14 = var12.b;
+                    int var15 = var12.c;
+                    int var16 = var12.d;
 
-                if (!var2.a(var3, var13, var14, var15))
+                    if (!var2.a(var3, var14, var15, var16))
                 {
                     return var1;
                 }
 
                 if (this.a == 0)
                 {
-                    if (!var3.func_82247_a(var13, var14, var15, var12.face, var1))
+                        if (!var3.func_82247_a(var14, var15, var16, var12.face, var1))
                     {
                         return var1;
                     }
 
-                    if (var2.getMaterial(var13, var14, var15) == Material.WATER && var2.getData(var13, var14, var15) == 0)
+                        if (var2.getMaterial(var14, var15, var16) == Material.WATER && var2.getData(var14, var15, var16) == 0)
                     {
-                        var2.setTypeId(var13, var14, var15, 0);
+                            var2.setTypeId(var14, var15, var16, 0);
 
                         if (var3.abilities.canInstantlyBuild)
                         {
@@ -71,9 +103,9 @@
                         return var1;
                     }
 
-                    if (var2.getMaterial(var13, var14, var15) == Material.LAVA && var2.getData(var13, var14, var15) == 0)
+                        if (var2.getMaterial(var14, var15, var16) == Material.LAVA && var2.getData(var14, var15, var16) == 0)
                     {
-                        var2.setTypeId(var13, var14, var15, 0);
+                            var2.setTypeId(var14, var15, var16, 0);
 
                         if (var3.abilities.canInstantlyBuild)
                         {
@@ -102,40 +134,40 @@
 
                     if (var12.face == 0)
                     {
-                        --var14;
+                            --var15;
                     }
 
                     if (var12.face == 1)
                     {
-                        ++var14;
+                            ++var15;
                     }
 
                     if (var12.face == 2)
                     {
-                        --var15;
+                            --var16;
                     }
 
                     if (var12.face == 3)
                     {
-                        ++var15;
+                            ++var16;
                     }
 
                     if (var12.face == 4)
                     {
-                        --var13;
+                            --var14;
                     }
 
                     if (var12.face == 5)
                     {
-                        ++var13;
+                            ++var14;
                     }
 
-                    if (!var3.func_82247_a(var13, var14, var15, var12.face, var1))
+                        if (!var3.func_82247_a(var14, var15, var16, var12.face, var1))
                     {
                         return var1;
                     }
 
-                    if (this.a(var2, var5, var7, var9, var13, var14, var15) && !var3.abilities.canInstantlyBuild)
+                        if (this.a(var2, var5, var7, var9, var14, var15, var16) && !var3.abilities.canInstantlyBuild)
                     {
                         return new ItemStack(Item.BUCKET);
                     }
@@ -149,6 +181,7 @@
             return var1;
         }
     }
+    }
 
     /**
      * Attempts to place the liquid contained inside the bucket.
Index: ItemDye.java
===================================================================
--- ItemDye.java	(revision 3)
+++ ItemDye.java	(working copy)
@@ -1,5 +1,13 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import java.util.List;
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.Event$Result;
+import net.minecraftforge.event.entity.player.BonemealEvent;
+
 public class ItemDye extends Item
 {
     /** List of dye color names */
@@ -14,6 +22,13 @@
         this.a(CreativeModeTab.l);
     }
 
+    @SideOnly(Side.CLIENT)
+    public int b(int var1)
+    {
+        int var2 = MathHelper.a(var1, 0, 15);
+        return this.textureId + var2 % 8 * 16 + var2 / 8;
+    }
+
     public String c_(ItemStack var1)
     {
         int var2 = MathHelper.a(var1.getData(), 0, 15);
@@ -38,7 +53,23 @@
             if (var1.getData() == 15)
             {
                 var11 = var3.getTypeId(var4, var5, var6);
+                BonemealEvent var13 = new BonemealEvent(var2, var3, var11, var4, var5, var6);
 
+                if (MinecraftForge.EVENT_BUS.post(var13))
+                {
+                    return false;
+                }
+
+                if (var13.getResult() == Event$Result.ALLOW)
+                {
+                    if (!var3.isStatic)
+                    {
+                        --var1.count;
+                    }
+
+                    return true;
+                }
+
                 if (var11 == Block.SAPLING.id)
                 {
                     if (!var3.isStatic)
@@ -108,49 +139,42 @@
                     if (!var3.isStatic)
                     {
                         --var1.count;
-                        label137:
+                        label139:
 
                         for (var12 = 0; var12 < 128; ++var12)
                         {
-                            int var13 = var4;
-                            int var14 = var5 + 1;
-                            int var15 = var6;
+                            int var14 = var4;
+                            int var15 = var5 + 1;
+                            int var16 = var6;
 
-                            for (int var16 = 0; var16 < var12 / 16; ++var16)
+                            for (int var17 = 0; var17 < var12 / 16; ++var17)
                             {
-                                var13 += d.nextInt(3) - 1;
-                                var14 += (d.nextInt(3) - 1) * d.nextInt(3) / 2;
-                                var15 += d.nextInt(3) - 1;
+                                var14 += d.nextInt(3) - 1;
+                                var15 += (d.nextInt(3) - 1) * d.nextInt(3) / 2;
+                                var16 += d.nextInt(3) - 1;
 
-                                if (var3.getTypeId(var13, var14 - 1, var15) != Block.GRASS.id || var3.s(var13, var14, var15))
+                                if (var3.getTypeId(var14, var15 - 1, var16) != Block.GRASS.id || var3.s(var14, var15, var16))
                                 {
-                                    continue label137;
+                                    continue label139;
                                 }
                             }
 
-                            if (var3.getTypeId(var13, var14, var15) == 0)
+                            if (var3.getTypeId(var14, var15, var16) == 0)
                             {
                                 if (d.nextInt(10) != 0)
                                 {
-                                    if (Block.LONG_GRASS.d(var3, var13, var14, var15))
+                                    if (Block.LONG_GRASS.d(var3, var14, var15, var16))
                                     {
-                                        var3.setTypeIdAndData(var13, var14, var15, Block.LONG_GRASS.id, 1);
+                                        var3.setTypeIdAndData(var14, var15, var16, Block.LONG_GRASS.id, 1);
                                     }
                                 }
-                                else if (d.nextInt(3) != 0)
+                                else
                                 {
-                                    if (Block.YELLOW_FLOWER.d(var3, var13, var14, var15))
-                                    {
-                                        var3.setTypeId(var13, var14, var15, Block.YELLOW_FLOWER.id);
+                                    ForgeHooks.plantGrass(var3, var14, var15, var16);
                                     }
                                 }
-                                else if (Block.RED_ROSE.d(var3, var13, var14, var15))
-                                {
-                                    var3.setTypeId(var13, var14, var15, Block.RED_ROSE.id);
                                 }
                             }
-                        }
-                    }
 
                     return true;
                 }
@@ -238,4 +262,13 @@
             return false;
         }
     }
+
+    @SideOnly(Side.CLIENT)
+    public void a(int var1, CreativeModeTab var2, List var3)
+    {
+        for (int var4 = 0; var4 < 16; ++var4)
+        {
+            var3.add(new ItemStack(var1, 1, var4));
 }
+    }
+}
Index: ItemHoe.java
===================================================================
--- ItemHoe.java	(revision 3)
+++ ItemHoe.java	(working copy)
@@ -1,5 +1,11 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.Event$Result;
+import net.minecraftforge.event.entity.player.UseHoeEvent;
+
 public class ItemHoe extends Item
 {
     protected EnumToolMaterial a;
@@ -25,32 +31,52 @@
         }
         else
         {
-            int var11 = var3.getTypeId(var4, var5, var6);
-            int var12 = var3.getTypeId(var4, var5 + 1, var6);
+            UseHoeEvent var11 = new UseHoeEvent(var2, var1, var3, var4, var5, var6);
 
-            if ((var7 == 0 || var12 != 0 || var11 != Block.GRASS.id) && var11 != Block.DIRT.id)
+            if (MinecraftForge.EVENT_BUS.post(var11))
             {
                 return false;
             }
+            else if (var11.getResult() == Event$Result.ALLOW)
+            {
+                var1.damage(1, var2);
+                return true;
+            }
             else
             {
-                Block var13 = Block.SOIL;
-                var3.makeSound((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var13.stepSound.getName(), (var13.stepSound.getVolume1() + 1.0F) / 2.0F, var13.stepSound.getVolume2() * 0.8F);
+                int var12 = var3.getTypeId(var4, var5, var6);
+                int var13 = var3.getTypeId(var4, var5 + 1, var6);
 
+                if ((var7 == 0 || var13 != 0 || var12 != Block.GRASS.id) && var12 != Block.DIRT.id)
+                {
+                    return false;
+                }
+                else
+                {
+                    Block var14 = Block.SOIL;
+                    var3.makeSound((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var14.stepSound.getName(), (var14.stepSound.getVolume1() + 1.0F) / 2.0F, var14.stepSound.getVolume2() * 0.8F);
+
                 if (var3.isStatic)
                 {
                     return true;
                 }
                 else
                 {
-                    var3.setTypeId(var4, var5, var6, var13.id);
+                        var3.setTypeId(var4, var5, var6, var14.id);
                     var1.damage(1, var2);
                     return true;
                 }
             }
         }
     }
+    }
 
+    @SideOnly(Side.CLIENT)
+    public boolean n_()
+    {
+        return true;
+    }
+
     public String func_77842_f()
     {
         return this.a.toString();
Index: ItemInWorldManager.java
===================================================================
--- ItemInWorldManager.java	(revision 3)
+++ ItemInWorldManager.java	(working copy)
@@ -1,7 +1,16 @@
 package net.minecraft.server;
 
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.Event$Result;
+import net.minecraftforge.event.ForgeEventFactory;
+import net.minecraftforge.event.entity.player.PlayerDestroyItemEvent;
+import net.minecraftforge.event.entity.player.PlayerInteractEvent;
+import net.minecraftforge.event.entity.player.PlayerInteractEvent$Action;
+
 public class ItemInWorldManager
 {
+    private double blockReachDistance = 5.0D;
+
     /** The world object that this object is connected to. */
     public World world;
 
@@ -69,31 +78,31 @@
     {
         ++this.currentTick;
         int var1;
-        float var4;
-        int var5;
+        float var2;
+        int var3;
 
         if (this.field_73097_j)
         {
             var1 = this.currentTick - this.field_73093_n;
-            int var2 = this.world.getTypeId(this.k, this.l, this.m);
+            int var4 = this.world.getTypeId(this.k, this.l, this.m);
 
-            if (var2 == 0)
+            if (var4 == 0)
             {
                 this.field_73097_j = false;
             }
             else
             {
-                Block var3 = Block.byId[var2];
-                var4 = var3.getDamage(this.player, this.player.world, this.k, this.l, this.m) * (float)(var1 + 1);
-                var5 = (int)(var4 * 10.0F);
+                Block var5 = Block.byId[var4];
+                var2 = var5.getDamage(this.player, this.player.world, this.k, this.l, this.m) * (float)(var1 + 1);
+                var3 = (int)(var2 * 10.0F);
 
-                if (var5 != this.o)
+                if (var3 != this.o)
                 {
-                    this.world.g(this.player.id, this.k, this.l, this.m, var5);
-                    this.o = var5;
+                    this.world.g(this.player.id, this.k, this.l, this.m, var3);
+                    this.o = var3;
                 }
 
-                if (var4 >= 1.0F)
+                if (var2 >= 1.0F)
                 {
                     this.field_73097_j = false;
                     this.breakBlock(this.k, this.l, this.m);
@@ -114,13 +123,13 @@
             else
             {
                 int var7 = this.currentTick - this.lastDigTick;
-                var4 = var6.getDamage(this.player, this.player.world, this.f, this.g, this.h) * (float)(var7 + 1);
-                var5 = (int)(var4 * 10.0F);
+                var2 = var6.getDamage(this.player, this.player.world, this.f, this.g, this.h) * (float)(var7 + 1);
+                var3 = (int)(var2 * 10.0F);
 
-                if (var5 != this.o)
+                if (var3 != this.o)
                 {
-                    this.world.g(this.player.id, this.f, this.g, this.h, var5);
-                    this.o = var5;
+                    this.world.g(this.player.id, this.f, this.g, this.h, var3);
+                    this.o = var3;
                 }
             }
         }
@@ -130,6 +139,14 @@
     {
         if (!this.gamemode.isAdventure() || this.player.func_82246_f(var1, var2, var3))
         {
+            PlayerInteractEvent var5 = ForgeEventFactory.onPlayerInteract(this.player, PlayerInteractEvent$Action.LEFT_CLICK_BLOCK, var1, var2, var3, var4);
+
+            if (var5.isCanceled())
+            {
+                this.player.netServerHandler.sendPacket(new Packet53BlockChange(var1, var2, var3, this.world));
+                return;
+            }
+
             if (this.isCreative())
             {
                 if (!this.world.douseFire((EntityHuman)null, var1, var2, var3, var4))
@@ -139,19 +156,38 @@
             }
             else
             {
-                this.world.douseFire(this.player, var1, var2, var3, var4);
                 this.lastDigTick = this.currentTick;
-                float var5 = 1.0F;
-                int var6 = this.world.getTypeId(var1, var2, var3);
+                float var6 = 1.0F;
+                int var7 = this.world.getTypeId(var1, var2, var3);
+                Block var8 = Block.byId[var7];
 
-                if (var6 > 0)
+                if (var8 != null)
                 {
-                    Block.byId[var6].attack(this.world, var1, var2, var3, this.player);
-                    var5 = Block.byId[var6].getDamage(this.player, this.player.world, var1, var2, var3);
+                    if (var5.useBlock != Event$Result.DENY)
+                    {
+                        var8.attack(this.world, var1, var2, var3, this.player);
+                        this.world.douseFire(this.player, var1, var2, var3, var4);
                 }
+                    else
+                    {
+                        this.player.netServerHandler.sendPacket(new Packet53BlockChange(var1, var2, var3, this.world));
+                    }
 
-                if (var6 > 0 && var5 >= 1.0F)
+                    var6 = var8.getDamage(this.player, this.player.world, var1, var2, var3);
+                }
+
+                if (var5.useItem == Event$Result.DENY)
                 {
+                    if (var6 >= 1.0F)
+                    {
+                        this.player.netServerHandler.sendPacket(new Packet53BlockChange(var1, var2, var3, this.world));
+                    }
+
+                    return;
+                }
+
+                if (var7 > 0 && var6 >= 1.0F)
+                {
                     this.breakBlock(var1, var2, var3);
                 }
                 else
@@ -160,9 +196,9 @@
                     this.f = var1;
                     this.g = var2;
                     this.h = var3;
-                    int var7 = (int)(var5 * 10.0F);
-                    this.world.g(this.player.id, var1, var2, var3, var7);
-                    this.o = var7;
+                    int var9 = (int)(var6 * 10.0F);
+                    this.world.g(this.player.id, var1, var2, var3, var9);
+                    this.o = var9;
                 }
             }
         }
@@ -221,7 +257,7 @@
             var4.a(this.world, var1, var2, var3, var5, this.player);
         }
 
-        boolean var6 = this.world.setTypeId(var1, var2, var3, 0);
+        boolean var6 = var4 != null && var4.removeBlockByPlayer(this.world, this.player, var1, var2, var3);
 
         if (var4 != null && var6)
         {
@@ -242,39 +278,58 @@
         }
         else
         {
-            int var4 = this.world.getTypeId(var1, var2, var3);
-            int var5 = this.world.getData(var1, var2, var3);
-            this.world.a(this.player, 2001, var1, var2, var3, var4 + (this.world.getData(var1, var2, var3) << 12));
-            boolean var6 = this.d(var1, var2, var3);
+            ItemStack var4 = this.player.bP();
 
+            if (var4 != null && var4.getItem().onBlockStartBreak(var4, var1, var2, var3, this.player))
+            {
+                return false;
+            }
+            else
+            {
+                int var5 = this.world.getTypeId(var1, var2, var3);
+                int var6 = this.world.getData(var1, var2, var3);
+                this.world.a(this.player, 2001, var1, var2, var3, var5 + (this.world.getData(var1, var2, var3) << 12));
+                boolean var7 = false;
+
             if (this.isCreative())
             {
+                    var7 = this.d(var1, var2, var3);
                 this.player.netServerHandler.sendPacket(new Packet53BlockChange(var1, var2, var3, this.world));
             }
             else
             {
-                ItemStack var7 = this.player.bP();
-                boolean var8 = this.player.b(Block.byId[var4]);
+                    ItemStack var8 = this.player.bP();
+                    boolean var9 = false;
+                    Block var10 = Block.byId[var5];
 
-                if (var7 != null)
+                    if (var10 != null)
                 {
-                    var7.a(this.world, var4, var1, var2, var3, this.player);
+                        var9 = var10.canHarvestBlock(this.player, var6);
+                    }
 
-                    if (var7.count == 0)
+                    if (var8 != null)
                     {
+                        var8.a(this.world, var5, var1, var2, var3, this.player);
+
+                        if (var8.count == 0)
+                        {
                         this.player.bQ();
+                            MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(this.player, var8));
                     }
                 }
 
-                if (var6 && var8)
+                    var7 = this.d(var1, var2, var3);
+
+                    if (var7 && var9)
                 {
-                    Block.byId[var4].a(this.world, this.player, var1, var2, var3, var5);
+                        Block.byId[var5].a(this.world, this.player, var1, var2, var3, var6);
                 }
             }
 
-            return var6;
+                return var7;
         }
     }
+    }
 
     /**
      * Attempts to right-click use an item by the given EntityPlayer in the given World
@@ -306,6 +361,7 @@
             if (var6.count == 0)
             {
                 var1.inventory.items[var1.inventory.itemInHandIndex] = null;
+                MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(this.player, var6));
             }
 
             if (!var1.bI())
@@ -323,31 +379,68 @@
      */
     public boolean interact(EntityHuman var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10)
     {
-        int var11 = var2.getTypeId(var4, var5, var6);
+        PlayerInteractEvent var11 = ForgeEventFactory.onPlayerInteract(var1, PlayerInteractEvent$Action.RIGHT_CLICK_BLOCK, var4, var5, var6, var7);
 
-        if (var11 > 0 && Block.byId[var11].interact(var2, var4, var5, var6, var1, var7, var8, var9, var10))
+        if (var11.isCanceled())
         {
-            return true;
+            this.player.netServerHandler.sendPacket(new Packet53BlockChange(var4, var5, var6, this.world));
+            return false;
         }
-        else if (var3 == null)
+        else
         {
-            return false;
+            Item var12 = var3 != null ? var3.getItem() : null;
+
+            if (var12 != null && var12.onItemUseFirst(var3, var1, var2, var4, var5, var6, var7, var8, var9, var10))
+            {
+                if (var3.count <= 0)
+                {
+                    ForgeEventFactory.onPlayerDestroyItem(this.player, var3);
         }
-        else if (this.isCreative())
+
+                return true;
+            }
+            else
         {
-            int var12 = var3.getData();
-            int var13 = var3.count;
-            boolean var14 = var3.placeItem(var1, var2, var4, var5, var6, var7, var8, var9, var10);
-            var3.setData(var12);
-            var3.count = var13;
-            return var14;
+                int var13 = var2.getTypeId(var4, var5, var6);
+                Block var14 = Block.byId[var13];
+                boolean var15 = false;
+
+                if (var14 != null)
+                {
+                    if (var11.useBlock != Event$Result.DENY)
+                    {
+                        var15 = var14.interact(var2, var4, var5, var6, var1, var7, var8, var9, var10);
         }
         else
         {
-            return var3.placeItem(var1, var2, var4, var5, var6, var7, var8, var9, var10);
+                        this.player.netServerHandler.sendPacket(new Packet53BlockChange(var4, var5, var6, this.world));
+                        var15 = var11.useItem != Event$Result.ALLOW;
         }
     }
 
+                if (var3 != null && !var15)
+                {
+                    int var16 = var3.getData();
+                    int var17 = var3.count;
+                    var15 = var3.placeItem(var1, var2, var4, var5, var6, var7, var8, var9, var10);
+
+                    if (this.isCreative())
+                    {
+                        var3.setData(var16);
+                        var3.count = var17;
+                    }
+
+                    if (var3.count <= 0)
+                    {
+                        ForgeEventFactory.onPlayerDestroyItem(this.player, var3);
+                    }
+                }
+
+                return var15;
+            }
+        }
+    }
+
     /**
      * Sets the world instance.
      */
@@ -355,4 +448,14 @@
     {
         this.world = var1;
     }
+
+    public double getBlockReachDistance()
+    {
+        return this.blockReachDistance;
 }
+
+    public void setBlockReachDistance(double var1)
+    {
+        this.blockReachDistance = var1;
+    }
+}
Index: ItemSeeds.java
===================================================================
--- ItemSeeds.java	(revision 3)
+++ ItemSeeds.java	(working copy)
@@ -1,6 +1,10 @@
 package net.minecraft.server;
 
-public class ItemSeeds extends Item
+import net.minecraftforge.common.EnumPlantType;
+import net.minecraftforge.common.ForgeDirection;
+import net.minecraftforge.common.IPlantable;
+
+public class ItemSeeds extends Item implements IPlantable
 {
     /**
      * The type of block this seed turns into (wheat or pumpkin stems for instance)
@@ -31,8 +35,9 @@
         else if (var2.func_82247_a(var4, var5, var6, var7, var1) && var2.func_82247_a(var4, var5 + 1, var6, var7, var1))
         {
             int var11 = var3.getTypeId(var4, var5, var6);
+            Block var12 = Block.byId[var11];
 
-            if (var11 == this.b && var3.isEmpty(var4, var5 + 1, var6))
+            if (var12 != null && var12.canSustainPlant(var3, var4, var5, var6, ForgeDirection.UP, this) && var3.isEmpty(var4, var5 + 1, var6))
             {
                 var3.setTypeId(var4, var5 + 1, var6, this.id);
                 --var1.count;
@@ -48,4 +53,19 @@
             return false;
         }
     }
+
+    public EnumPlantType getPlantType(World var1, int var2, int var3, int var4)
+    {
+        return this.id == Block.NETHER_WART.id ? EnumPlantType.Nether : EnumPlantType.Crop;
 }
+
+    public int getPlantID(World var1, int var2, int var3, int var4)
+    {
+        return this.id;
+    }
+
+    public int getPlantMetadata(World var1, int var2, int var3, int var4)
+    {
+        return 0;
+    }
+}
Index: ItemWorldMap.java
===================================================================
--- ItemWorldMap.java	(revision 3)
+++ ItemWorldMap.java	(working copy)
@@ -1,5 +1,9 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import java.util.List;
+
 public class ItemWorldMap extends ItemWorldMapBase
 {
     protected ItemWorldMap(int var1)
@@ -8,6 +12,21 @@
         this.a(true);
     }
 
+    @SideOnly(Side.CLIENT)
+    public static WorldMap a(short var0, World var1)
+    {
+        String var2 = "map_" + var0;
+        WorldMap var3 = (WorldMap)var1.a(WorldMap.class, var2);
+
+        if (var3 == null)
+        {
+            var3 = new WorldMap(var2);
+            var1.a(var2, var3);
+        }
+
+        return var3;
+    }
+
     public WorldMap getSavedMap(ItemStack var1, World var2)
     {
         String var3 = "map_" + var1.getData();
@@ -22,7 +41,7 @@
             int var5 = 128 * (1 << var4.scale);
             var4.centerX = Math.round((float)var2.getWorldData().c() / (float)var5) * var5;
             var4.centerZ = Math.round((float)(var2.getWorldData().e() / var5)) * var5;
-            var4.map = (byte)var2.worldProvider.dimension;
+            var4.map = var2.worldProvider.dimension;
             var4.c();
             var2.a(var3, var4);
         }
@@ -68,7 +87,7 @@
                             boolean var21 = var19 * var19 + var20 * var20 > (var11 - 2) * (var11 - 2);
                             int var22 = (var7 / var6 + var13 - var4 / 2) * var6;
                             int var23 = (var8 / var6 + var18 - var5 / 2) * var6;
-                            int[] var24 = new int[256];
+                            int[] var24 = new int[Block.byId.length];
                             Chunk var25 = var1.getChunkAtWorldCoords(var22, var23);
 
                             if (!var25.isEmpty())
@@ -78,9 +97,9 @@
                                 int var28 = 0;
                                 double var29 = 0.0D;
                                 int var31;
+                                int var34;
                                 int var32;
                                 int var33;
-                                int var36;
 
                                 if (var1.worldProvider.f)
                                 {
@@ -105,27 +124,27 @@
                                         for (var32 = 0; var32 < var6; ++var32)
                                         {
                                             var33 = var25.b(var31 + var26, var32 + var27) + 1;
-                                            int var34 = 0;
+                                            int var35 = 0;
 
                                             if (var33 > 1)
                                             {
-                                                boolean var35;
+                                                boolean var36;
 
                                                 do
                                                 {
-                                                    var35 = true;
-                                                    var34 = var25.getTypeId(var31 + var26, var33 - 1, var32 + var27);
+                                                    var36 = true;
+                                                    var35 = var25.getTypeId(var31 + var26, var33 - 1, var32 + var27);
 
-                                                    if (var34 == 0)
+                                                    if (var35 == 0)
                                                     {
-                                                        var35 = false;
+                                                        var36 = false;
                                                     }
-                                                    else if (var33 > 0 && var34 > 0 && Block.byId[var34].material.G == MaterialMapColor.b)
+                                                    else if (var33 > 0 && var35 > 0 && Block.byId[var35].material.G == MaterialMapColor.b)
                                                     {
-                                                        var35 = false;
+                                                        var36 = false;
                                                     }
 
-                                                    if (!var35)
+                                                    if (!var36)
                                                     {
                                                         --var33;
 
@@ -134,28 +153,28 @@
                                                             break;
                                                         }
 
-                                                        var34 = var25.getTypeId(var31 + var26, var33 - 1, var32 + var27);
+                                                        var35 = var25.getTypeId(var31 + var26, var33 - 1, var32 + var27);
                                                     }
                                                 }
-                                                while (var33 > 0 && !var35);
+                                                while (var33 > 0 && !var36);
 
-                                                if (var33 > 0 && var34 != 0 && Block.byId[var34].material.isLiquid())
+                                                if (var33 > 0 && var35 != 0 && Block.byId[var35].material.isLiquid())
                                                 {
-                                                    var36 = var33 - 1;
+                                                    var34 = var33 - 1;
                                                     boolean var37 = false;
-                                                    int var43;
+                                                    int var38;
 
                                                     do
                                                     {
-                                                        var43 = var25.getTypeId(var31 + var26, var36--, var32 + var27);
+                                                        var38 = var25.getTypeId(var31 + var26, var34--, var32 + var27);
                                                         ++var28;
                                                     }
-                                                    while (var36 > 0 && var43 != 0 && Block.byId[var43].material.isLiquid());
+                                                    while (var34 > 0 && var38 != 0 && Block.byId[var38].material.isLiquid());
                                                 }
                                             }
 
                                             var29 += (double)var33 / (double)(var6 * var6);
-                                            ++var24[var34];
+                                            ++var24[var35];
                                         }
                                     }
                                 }
@@ -164,7 +183,7 @@
                                 var31 = 0;
                                 var32 = 0;
 
-                                for (var33 = 0; var33 < 256; ++var33)
+                                for (var33 = 0; var33 < Block.byId.length; ++var33)
                                 {
                                     if (var24[var33] > var31)
                                     {
@@ -174,19 +193,19 @@
                                 }
 
                                 double var40 = (var29 - var16) * 4.0D / (double)(var6 + 4) + ((double)(var13 + var18 & 1) - 0.5D) * 0.4D;
-                                byte var39 = 1;
+                                byte var43 = 1;
 
                                 if (var40 > 0.6D)
                                 {
-                                    var39 = 2;
+                                    var43 = 2;
                                 }
 
                                 if (var40 < -0.6D)
                                 {
-                                    var39 = 0;
+                                    var43 = 0;
                                 }
 
-                                var36 = 0;
+                                var34 = 0;
 
                                 if (var32 > 0)
                                 {
@@ -195,20 +214,20 @@
                                     if (var42 == MaterialMapColor.n)
                                     {
                                         var40 = (double)var28 * 0.1D + (double)(var13 + var18 & 1) * 0.2D;
-                                        var39 = 1;
+                                        var43 = 1;
 
                                         if (var40 < 0.5D)
                                         {
-                                            var39 = 2;
+                                            var43 = 2;
                                         }
 
                                         if (var40 > 0.9D)
                                         {
-                                            var39 = 0;
+                                            var43 = 0;
                                         }
                                     }
 
-                                    var36 = var42.q;
+                                    var34 = var42.q;
                                 }
 
                                 var16 = var29;
@@ -216,9 +235,9 @@
                                 if (var18 >= 0 && var19 * var19 + var20 * var20 < var11 * var11 && (!var21 || (var13 + var18 & 1) != 0))
                                 {
                                     byte var41 = var3.colors[var13 + var18 * var4];
-                                    byte var38 = (byte)(var36 * 4 + var39);
+                                    byte var39 = (byte)(var34 * 4 + var43);
 
-                                    if (var41 != var38)
+                                    if (var41 != var39)
                                     {
                                         if (var14 > var18)
                                         {
@@ -230,7 +249,7 @@
                                             var15 = var18;
                                         }
 
-                                        var3.colors[var13 + var18 * var4] = var38;
+                                        var3.colors[var13 + var18 * var4] = var39;
                                     }
                                 }
                             }
@@ -299,4 +318,23 @@
             var2.a("map_" + var1.getData(), var5);
         }
     }
+
+    @SideOnly(Side.CLIENT)
+    public void a(ItemStack var1, EntityHuman var2, List var3, boolean var4)
+    {
+        WorldMap var5 = this.getSavedMap(var1, var2.world);
+
+        if (var4)
+        {
+            if (var5 == null)
+            {
+                var3.add("Unknown map");
 }
+            else
+            {
+                var3.add("Scaling at 1:" + (1 << var5.scale));
+                var3.add("(Level " + var5.scale + "/" + 4 + ")");
+            }
+        }
+    }
+}
Index: MinecraftServer.java
===================================================================
--- MinecraftServer.java	(revision 3)
+++ MinecraftServer.java	(working copy)
@@ -1,5 +1,10 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.FMLCommonHandler;
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import cpw.mods.fml.relauncher.ArgsWrapper;
+import cpw.mods.fml.relauncher.FMLRelauncher;
 import java.awt.GraphicsEnvironment;
 import java.io.File;
 import java.io.IOException;
@@ -7,10 +12,15 @@
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
+import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.WorldEvent$Load;
+import net.minecraftforge.event.world.WorldEvent$Unload;
 
 public abstract class MinecraftServer implements Runnable, IMojangStatistics, ICommandListener
 {
@@ -88,14 +98,14 @@
     public final long[] h = new long[100];
     public final long[] i = new long[100];
     public final long[] j = new long[100];
-
-    /** Stats are [dimension][tick%100] system.nanoTime is stored. */
-    public long[][] k;
+    public Hashtable worldTickTimes = new Hashtable();
     private KeyPair I;
 
     /** Username of the server owner (for integrated servers) */
     private String J;
     private String K;
+    @SideOnly(Side.CLIENT)
+    private String L;
     private boolean demoMode;
     private boolean N;
 
@@ -168,99 +178,84 @@
         this.S = par1Str;
     }
 
+    @SideOnly(Side.CLIENT)
+
+    public synchronized String d()
+    {
+        return this.S;
+    }
+
     protected void a(String var1, String var2, long var3, WorldType var5, String var6)
     {
         this.b(var1);
         this.c("menu.loadingLevel");
-        this.worldServer = new WorldServer[3];
-        this.k = new long[this.worldServer.length][100];
         IDataManager var7 = this.convertable.a(var1, true);
-        WorldData var9 = var7.getWorldData();
-        WorldSettings var8;
+        WorldData var8 = var7.getWorldData();
+        WorldSettings var9;
 
-        if (var9 == null)
+        if (var8 == null)
         {
-            var8 = new WorldSettings(var3, this.getGamemode(), this.getGenerateStructures(), this.isHardcore(), var5);
-            var8.func_82750_a(var6);
+            var9 = new WorldSettings(var3, this.getGamemode(), this.getGenerateStructures(), this.isHardcore(), var5);
+            var9.func_82750_a(var6);
         }
         else
         {
-            var8 = new WorldSettings(var9);
+            var9 = new WorldSettings(var8);
         }
 
         if (this.N)
         {
-            var8.a();
+            var9.a();
         }
 
-        for (int var10 = 0; var10 < this.worldServer.length; ++var10)
-        {
-            byte var11 = 0;
+        Object var10 = this.M() ? new DemoWorldServer(this, var7, var2, 0, this.methodProfiler) : new WorldServer(this, var7, var2, 0, var9, this.methodProfiler);
+        Integer[] var11 = DimensionManager.getStaticDimensionIDs();
+        int var12 = var11.length;
 
-            if (var10 == 1)
+        for (int var13 = 0; var13 < var12; ++var13)
             {
-                var11 = -1;
-            }
+            int var14 = var11[var13].intValue();
+            Object var15 = var14 == 0 ? var10 : new SecondaryWorldServer(this, var7, var2, var14, var9, (WorldServer)var10, this.methodProfiler);
+            ((WorldServer)var15).addIWorldAccess(new WorldManager(this, (WorldServer)var15));
 
-            if (var10 == 2)
-            {
-                var11 = 1;
-            }
-
-            if (var10 == 0)
-            {
-                if (this.M())
-                {
-                    this.worldServer[var10] = new DemoWorldServer(this, var7, var2, var11, this.methodProfiler);
-                }
-                else
-                {
-                    this.worldServer[var10] = new WorldServer(this, var7, var2, var11, var8, this.methodProfiler);
-                }
-            }
-            else
-            {
-                this.worldServer[var10] = new SecondaryWorldServer(this, var7, var2, var11, var8, this.worldServer[0], this.methodProfiler);
-            }
-
-            this.worldServer[var10].addIWorldAccess(new WorldManager(this, this.worldServer[var10]));
-
             if (!this.I())
             {
-                this.worldServer[var10].getWorldData().setGameType(this.getGamemode());
+                ((WorldServer)var15).getWorldData().setGameType(this.getGamemode());
             }
 
             this.t.setPlayerFileData(this.worldServer);
+            MinecraftForge.EVENT_BUS.post(new WorldEvent$Load((World)var15));
         }
 
+        this.t.setPlayerFileData(new WorldServer[] {(WorldServer)var10});
         this.c(this.getDifficulty());
         this.e();
     }
 
     protected void e()
     {
-        int var5 = 0;
+        int var1 = 0;
         this.c("menu.generatingTerrain");
-        byte var6 = 0;
-        log.info("Preparing start region for level " + var6);
-        WorldServer var7 = this.worldServer[var6];
-        ChunkCoordinates var8 = var7.getSpawn();
-        long var9 = System.currentTimeMillis();
+        byte var2 = 0;
+        log.info("Preparing start region for level " + var2);
+        WorldServer var3 = this.worldServer[var2];
+        ChunkCoordinates var4 = var3.getSpawn();
+        long var5 = System.currentTimeMillis();
 
-        for (int var11 = -192; var11 <= 192 && this.isRunning(); var11 += 16)
+        for (int var7 = -192; var7 <= 192 && this.isRunning(); var7 += 16)
         {
-            for (int var12 = -192; var12 <= 192 && this.isRunning(); var12 += 16)
+            for (int var8 = -192; var8 <= 192 && this.isRunning(); var8 += 16)
             {
-                long var13 = System.currentTimeMillis();
+                long var9 = System.currentTimeMillis();
 
-                if (var13 - var9 > 1000L)
+                if (var9 - var5 > 1000L)
                 {
-                    this.a_("Preparing spawn area", var5 * 100 / 625);
-                    var9 = var13;
+                    this.a_("Preparing spawn area", var1 * 100 / 625);
+                    var5 = var9;
                 }
 
-                ++var5;
-                var7.chunkProviderServer.getChunkAt(var8.x + var11 >> 4, var8.z + var12 >> 4);
+                ++var1;
+                var3.chunkProviderServer.getChunkAt(var4.x + var7 >> 4, var4.z + var8 >> 4);
             }
         }
 
@@ -363,7 +358,9 @@
             for (int var3 = 0; var3 < var2; ++var3)
             {
                 WorldServer var4 = var1[var3];
+                MinecraftForge.EVENT_BUS.post(new WorldEvent$Unload(var4));
                 var4.saveLevel();
+                DimensionManager.setWorld(var4.worldProvider.dimension, (WorldServer)null);
             }
 
             if (this.n != null && this.n.d())
@@ -405,7 +402,9 @@
         {
             if (this.init())
             {
+                FMLCommonHandler.instance().handleServerStarted();
                 long var1 = System.currentTimeMillis();
+                FMLCommonHandler.instance().onWorldLoadTick(this.worldServer);
 
                 for (long var50 = 0L; this.isRunning; this.Q = true)
                 {
@@ -444,6 +443,8 @@
 
                     Thread.sleep(1L);
                 }
+
+                FMLCommonHandler.instance().handleServerStopping();
             }
             else
             {
@@ -514,10 +515,12 @@
     /**
      * Main function called by run() every loop.
      */
-    protected void q()
+    public void q()
     {
+        FMLCommonHandler.instance().rescheduleTicks(Side.SERVER);
         long var1 = System.nanoTime();
         AxisAlignedBB.a().a();
+        FMLCommonHandler.instance().onPreServerTick();
         ++this.ticks;
 
         if (this.T)
@@ -563,55 +566,63 @@
 
         this.methodProfiler.b();
         this.methodProfiler.b();
+        FMLCommonHandler.instance().onPostServerTick();
     }
 
     public void r()
     {
         this.methodProfiler.a("levels");
+        Integer[] var1 = DimensionManager.getIDs();
+        int var2 = var1.length;
 
-        for (int var1 = 0; var1 < this.worldServer.length; ++var1)
+        for (int var3 = 0; var3 < var2; ++var3)
         {
-            long var2 = System.nanoTime();
+            Integer var4 = var1[var3];
+            long var5 = System.nanoTime();
 
-            if (var1 == 0 || this.getAllowNether())
+            if (var4.intValue() == 0 || this.getAllowNether())
             {
-                WorldServer var4 = this.worldServer[var1];
-                this.methodProfiler.a(var4.getWorldData().getName());
+                WorldServer var7 = DimensionManager.getWorld(var4.intValue());
+                this.methodProfiler.a(var7.getWorldData().getName());
                 this.methodProfiler.a("pools");
-                var4.getVec3DPool().a();
+                var7.getVec3DPool().a();
                 this.methodProfiler.b();
 
                 if (this.ticks % 20 == 0)
                 {
                     this.methodProfiler.a("timeSync");
-                    this.t.a(new Packet4UpdateTime(var4.getTime(), var4.F()), var4.worldProvider.dimension);
+                    this.t.a(new Packet4UpdateTime(var7.getTime(), var7.F()), var7.worldProvider.dimension);
                     this.methodProfiler.b();
                 }
 
                 this.methodProfiler.a("tick");
-                var4.doTick();
-                var4.tickEntities();
+                FMLCommonHandler.instance().onPreWorldTick(var7);
+                var7.doTick();
+                var7.tickEntities();
+                FMLCommonHandler.instance().onPostWorldTick(var7);
                 this.methodProfiler.b();
                 this.methodProfiler.a("tracker");
-                var4.getTracker().updatePlayers();
+                var7.getTracker().updatePlayers();
                 this.methodProfiler.b();
                 this.methodProfiler.b();
             }
 
-            this.k[var1][this.ticks % 100] = System.nanoTime() - var2;
+            ((long[])this.worldTickTimes.get(var4))[this.ticks % 100] = System.nanoTime() - var5;
         }
 
+        this.methodProfiler.c("dim_unloading");
+        DimensionManager.unloadWorlds(this.worldTickTimes);
         this.methodProfiler.c("connection");
         this.ae().b();
         this.methodProfiler.c("players");
         this.t.tick();
         this.methodProfiler.c("tickables");
-        Iterator var5 = this.p.iterator();
+        Iterator var8 = this.p.iterator();
 
-        while (var5.hasNext())
+        while (var8.hasNext())
         {
-            IUpdatePlayerListBox var6 = (IUpdatePlayerListBox)var5.next();
-            var6.a();
+            IUpdatePlayerListBox var9 = (IUpdatePlayerListBox)var8.next();
+            var9.a();
         }
 
         this.methodProfiler.b();
@@ -622,122 +633,6 @@
         return true;
     }
 
-    public void func_82010_a(IUpdatePlayerListBox var1)
-    {
-        this.p.add(var1);
-    }
-
-    public static void main(String[] par0ArrayOfStr)
-    {
-        StatisticList.func_75919_a();
-
-        try
-        {
-            boolean var1 = !GraphicsEnvironment.isHeadless();
-            String var2 = null;
-            String var3 = ".";
-            String var4 = null;
-            boolean var5 = false;
-            boolean var6 = false;
-            int var7 = -1;
-
-            for (int var8 = 0; var8 < par0ArrayOfStr.length; ++var8)
-            {
-                String var9 = par0ArrayOfStr[var8];
-                String var10 = var8 == par0ArrayOfStr.length - 1 ? null : par0ArrayOfStr[var8 + 1];
-                boolean var11 = false;
-
-                if (!var9.equals("nogui") && !var9.equals("--nogui"))
-                {
-                    if (var9.equals("--port") && var10 != null)
-                    {
-                        var11 = true;
-
-                        try
-                        {
-                            var7 = Integer.parseInt(var10);
-                        }
-                        catch (NumberFormatException var13)
-                        {
-                            ;
-                        }
-                    }
-                    else if (var9.equals("--singleplayer") && var10 != null)
-                    {
-                        var11 = true;
-                        var2 = var10;
-                    }
-                    else if (var9.equals("--universe") && var10 != null)
-                    {
-                        var11 = true;
-                        var3 = var10;
-                    }
-                    else if (var9.equals("--world") && var10 != null)
-                    {
-                        var11 = true;
-                        var4 = var10;
-                    }
-                    else if (var9.equals("--demo"))
-                    {
-                        var5 = true;
-                    }
-                    else if (var9.equals("--bonusChest"))
-                    {
-                        var6 = true;
-                    }
-                }
-                else
-                {
-                    var1 = false;
-                }
-
-                if (var11)
-                {
-                    ++var8;
-                }
-            }
-
-            DedicatedServer var15 = new DedicatedServer(new File(var3));
-
-            if (var2 != null)
-            {
-                var15.k(var2);
-            }
-
-            if (var4 != null)
-            {
-                var15.l(var4);
-            }
-
-            if (var7 >= 0)
-            {
-                var15.setPort(var7);
-            }
-
-            if (var5)
-            {
-                var15.b(true);
-            }
-
-            if (var6)
-            {
-                var15.c(true);
-            }
-
-            if (var1)
-            {
-                var15.func_82011_an();
-            }
-
-            var15.t();
-            Runtime.getRuntime().addShutdownHook(new ThreadShutdown(var15));
-        }
-        catch (Exception var14)
-        {
-            log.log(Level.SEVERE, "Failed to start the minecraft server", var14);
-        }
-    }
-
     public void t()
     {
         (new ThreadServerApplication(this, "Server thread")).start();
@@ -772,9 +667,23 @@
      */
     public WorldServer getWorldServer(int var1)
     {
-        return var1 == -1 ? this.worldServer[1] : (var1 == 1 ? this.worldServer[2] : this.worldServer[0]);
+        WorldServer var2 = DimensionManager.getWorld(var1);
+
+        if (var2 == null)
+        {
+            DimensionManager.initDimension(var1);
+            var2 = DimensionManager.getWorld(var1);
     }
 
+        return var2;
+    }
+
+    @SideOnly(Side.SERVER)
+    public void func_82010_a(IUpdatePlayerListBox var1)
+    {
+        this.p.add(var1);
+    }
+
     /**
      * Returns the server's hostname.
      */
@@ -878,7 +787,7 @@
 
     public String getServerModName()
     {
-        return "vanilla";
+        return "forge,fml";
     }
 
     /**
@@ -1067,6 +976,18 @@
         this.K = par1Str;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void m(String var1)
+    {
+        this.L = var1;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public String K()
+    {
+        return this.L;
+    }
+
     public void a(KeyPair par1KeyPair)
     {
         this.I = par1KeyPair;
@@ -1145,6 +1066,7 @@
 
             if (var2 != null)
             {
+                MinecraftForge.EVENT_BUS.post(new WorldEvent$Unload(var2));
                 var2.saveLevel();
             }
         }
@@ -1329,6 +1251,12 @@
 
     public abstract ServerConnection ae();
 
+    @SideOnly(Side.CLIENT)
+    public boolean af()
+    {
+        return this.Q;
+    }
+
     public boolean ag()
     {
         return false;
@@ -1349,6 +1277,12 @@
         this.T = true;
     }
 
+    @SideOnly(Side.CLIENT)
+    public MojangStatisticsGenerator aj()
+    {
+        return this.n;
+    }
+
     /**
      * Return the position for this command sender.
      */
@@ -1372,4 +1306,123 @@
     {
         return var0.t;
     }
+
+    @SideOnly(Side.SERVER)
+    public static void main(String[] par0ArrayOfStr)
+    {
+        FMLRelauncher.handleServerRelaunch(new ArgsWrapper(par0ArrayOfStr));
 }
+
+    @SideOnly(Side.SERVER)
+    public static void fmlReentry(ArgsWrapper var0)
+    {
+        String[] var1 = var0.args;
+        StatisticList.func_75919_a();
+
+        try
+        {
+            boolean var2 = !GraphicsEnvironment.isHeadless();
+            String var3 = null;
+            String var4 = ".";
+            String var5 = null;
+            boolean var6 = false;
+            boolean var7 = false;
+            int var8 = -1;
+
+            for (int var9 = 0; var9 < var1.length; ++var9)
+            {
+                String var10 = var1[var9];
+                String var11 = var9 == var1.length - 1 ? null : var1[var9 + 1];
+                boolean var12 = false;
+
+                if (!var10.equals("nogui") && !var10.equals("--nogui"))
+                {
+                    if (var10.equals("--port") && var11 != null)
+                    {
+                        var12 = true;
+
+                        try
+                        {
+                            var8 = Integer.parseInt(var11);
+                        }
+                        catch (NumberFormatException var14)
+                        {
+                            ;
+                        }
+                    }
+                    else if (var10.equals("--singleplayer") && var11 != null)
+                    {
+                        var12 = true;
+                        var3 = var11;
+                    }
+                    else if (var10.equals("--universe") && var11 != null)
+                    {
+                        var12 = true;
+                        var4 = var11;
+                    }
+                    else if (var10.equals("--world") && var11 != null)
+                    {
+                        var12 = true;
+                        var5 = var11;
+                    }
+                    else if (var10.equals("--demo"))
+                    {
+                        var6 = true;
+                    }
+                    else if (var10.equals("--bonusChest"))
+                    {
+                        var7 = true;
+                    }
+                }
+                else
+                {
+                    var2 = false;
+                }
+
+                if (var12)
+                {
+                    ++var9;
+                }
+            }
+
+            DedicatedServer var16 = new DedicatedServer(new File(var4));
+
+            if (var3 != null)
+            {
+                var16.k(var3);
+            }
+
+            if (var5 != null)
+            {
+                var16.l(var5);
+            }
+
+            if (var8 >= 0)
+            {
+                var16.setPort(var8);
+            }
+
+            if (var6)
+            {
+                var16.b(true);
+            }
+
+            if (var7)
+            {
+                var16.c(true);
+            }
+
+            if (var2)
+            {
+                var16.func_82011_an();
+            }
+
+            var16.t();
+            Runtime.getRuntime().addShutdownHook(new ThreadShutdown(var16));
+        }
+        catch (Exception var15)
+        {
+            log.log(Level.SEVERE, "Failed to start the minecraft server", var15);
+        }
+    }
+}
Index: NetLoginHandler.java
===================================================================
--- NetLoginHandler.java	(revision 3)
+++ NetLoginHandler.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.network.FMLNetworkHandler;
+import java.io.IOException;
 import java.io.Serializable;
 import java.net.InetAddress;
 import java.net.Socket;
@@ -34,14 +36,14 @@
 
     /** While waiting to login, if this field ++'s to 600 it will kick you. */
     private int g = 0;
-    private String h = null;
+    public String h = null;
     private volatile boolean field_72544_i = false;
 
     /** server ID that is randomly generated by this login handler. */
     private String loginKey = "";
     private SecretKey field_72542_k = null;
 
-    public NetLoginHandler(MinecraftServer var1, Socket var2, String var3)
+    public NetLoginHandler(MinecraftServer var1, Socket var2, String var3) throws IOException
     {
         this.server = var1;
         this.networkManager = new NetworkManager(var2, var3, this, var1.F().getPrivate());
@@ -59,7 +61,7 @@
             this.d();
         }
 
-        if (this.g++ == 600)
+        if (this.g++ == 6000)
         {
             this.disconnect("Took too long to log in");
         }
@@ -148,15 +150,21 @@
         }
     }
 
-    public void a(Packet1Login var1) {}
+    public void a(Packet1Login var1)
+    {
+        FMLNetworkHandler.handleLoginPacketOnServer(this, var1);
+    }
 
     /**
      * on success the specified username is connected to the minecraftInstance, otherwise they are packet255'd
      */
     public void d()
     {
-        String var1 = this.server.getServerConfigurationManager().attemptLogin(this.networkManager.getSocketAddress(), this.h);
+        FMLNetworkHandler.onConnectionReceivedFromClient(this, this.server, this.networkManager.getSocketAddress(), this.h);
+    }
 
+    public void completeConnection(String var1)
+    {
         if (var1 != null)
         {
             this.disconnect(var1);
@@ -193,11 +201,11 @@
             if (var1.field_82559_a == 1)
             {
                 List var4 = Arrays.asList(new Serializable[] {Integer.valueOf(1), Integer.valueOf(47), this.server.getVersion(), this.server.getMotd(), Integer.valueOf(var2.getPlayerCount()), Integer.valueOf(var2.getMaxPlayers())});
-                Object var6;
+                Object var5;
 
-                for (Iterator var5 = var4.iterator(); var5.hasNext(); var3 = var3 + var6.toString().replaceAll("\u0000", ""))
+                for (Iterator var6 = var4.iterator(); var6.hasNext(); var3 = var3 + var5.toString().replaceAll("\u0000", ""))
                 {
-                    var6 = var5.next();
+                    var5 = var6.next();
 
                     if (var3 == null)
                     {
@@ -288,8 +296,20 @@
         return var0.h;
     }
 
-    static boolean func_72531_a(NetLoginHandler var0, boolean var1)
+    public static boolean func_72531_a(NetLoginHandler var0, boolean var1)
     {
         return var0.field_72544_i = var1;
     }
+
+    public void a(Packet250CustomPayload var1)
+    {
+        FMLNetworkHandler.handlePacket250Packet(var1, this.networkManager, this);
 }
+
+    public void handleVanilla250Packet(Packet250CustomPayload var1) {}
+
+    public EntityHuman getPlayer()
+    {
+        return null;
+    }
+}
Index: NetServerHandler.java
===================================================================
--- NetServerHandler.java	(revision 3)
+++ NetServerHandler.java	(working copy)
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.network.FMLNetworkHandler;
 import java.io.ByteArrayInputStream;
 import java.io.DataInputStream;
 import java.io.IOException;
@@ -7,6 +8,10 @@
 import java.util.Iterator;
 import java.util.Random;
 import java.util.logging.Logger;
+import net.minecraftforge.event.Event$Result;
+import net.minecraftforge.event.ForgeEventFactory;
+import net.minecraftforge.event.entity.player.PlayerInteractEvent;
+import net.minecraftforge.event.entity.player.PlayerInteractEvent$Action;
 
 public class NetServerHandler extends NetHandler
 {
@@ -29,7 +34,7 @@
     private int f;
 
     /** holds the amount of tick the player is floating */
-    private int g;
+    public int g;
     private boolean field_72584_h;
     private int i;
     private long j;
@@ -146,23 +151,26 @@
                 double var5;
                 double var7;
                 double var9;
-                double var13;
+                double var11;
+                float var13;
+                float var14;
+                double var15;
 
                 if (this.player.vehicle != null)
                 {
-                    float var34 = this.player.yaw;
-                    float var4 = this.player.pitch;
+                    var13 = this.player.yaw;
+                    var14 = this.player.pitch;
                     this.player.vehicle.V();
                     var5 = this.player.locX;
                     var7 = this.player.locY;
                     var9 = this.player.locZ;
-                    double var35 = 0.0D;
-                    var13 = 0.0D;
+                    var15 = 0.0D;
+                    var11 = 0.0D;
 
                     if (var1.hasLook)
                     {
-                        var34 = var1.yaw;
-                        var4 = var1.pitch;
+                        var13 = var1.yaw;
+                        var14 = var1.pitch;
                     }
 
                     if (var1.hasPos && var1.y == -999.0D && var1.stance == -999.0D)
@@ -174,16 +182,16 @@
                             return;
                         }
 
-                        var35 = var1.x;
-                        var13 = var1.z;
+                        var15 = var1.x;
+                        var11 = var1.z;
                     }
 
                     this.player.onGround = var1.g;
                     this.player.g();
-                    this.player.move(var35, 0.0D, var13);
-                    this.player.setLocation(var5, var7, var9, var34, var4);
-                    this.player.motX = var35;
-                    this.player.motZ = var13;
+                    this.player.move(var15, 0.0D, var11);
+                    this.player.setLocation(var5, var7, var9, var13, var14);
+                    this.player.motX = var15;
+                    this.player.motZ = var11;
 
                     if (this.player.vehicle != null)
                     {
@@ -195,6 +203,11 @@
                         this.player.vehicle.V();
                     }
 
+                    if (!this.checkMovement)
+                    {
+                        return;
+                    }
+
                     this.minecraftServer.getServerConfigurationManager().d(this.player);
                     this.y = this.player.locX;
                     this.z = this.player.locY;
@@ -218,8 +231,8 @@
                 var5 = this.player.locX;
                 var7 = this.player.locY;
                 var9 = this.player.locZ;
-                float var11 = this.player.yaw;
-                float var12 = this.player.pitch;
+                var13 = this.player.yaw;
+                var14 = this.player.pitch;
 
                 if (var1.hasPos && var1.y == -999.0D && var1.stance == -999.0D)
                 {
@@ -231,12 +244,12 @@
                     var5 = var1.x;
                     var7 = var1.y;
                     var9 = var1.z;
-                    var13 = var1.stance - var1.y;
+                    var11 = var1.stance - var1.y;
 
-                    if (!this.player.isSleeping() && (var13 > 1.65D || var13 < 0.1D))
+                    if (!this.player.isSleeping() && (var11 > 1.65D || var11 < 0.1D))
                     {
                         this.disconnect("Illegal stance");
-                        logger.warning(this.player.name + " had an illegal stance: " + var13);
+                        logger.warning(this.player.name + " had an illegal stance: " + var11);
                         return;
                     }
 
@@ -249,30 +262,30 @@
 
                 if (var1.hasLook)
                 {
-                    var11 = var1.yaw;
-                    var12 = var1.pitch;
+                    var13 = var1.yaw;
+                    var14 = var1.pitch;
                 }
 
                 this.player.g();
                 this.player.W = 0.0F;
-                this.player.setLocation(this.y, this.z, this.q, var11, var12);
+                this.player.setLocation(this.y, this.z, this.q, var13, var14);
 
                 if (!this.checkMovement)
                 {
                     return;
                 }
 
-                var13 = var5 - this.player.locX;
-                double var15 = var7 - this.player.locY;
+                var11 = var5 - this.player.locX;
+                var15 = var7 - this.player.locY;
                 double var17 = var9 - this.player.locZ;
-                double var19 = Math.min(Math.abs(var13), Math.abs(this.player.motX));
+                double var19 = Math.min(Math.abs(var11), Math.abs(this.player.motX));
                 double var21 = Math.min(Math.abs(var15), Math.abs(this.player.motY));
                 double var23 = Math.min(Math.abs(var17), Math.abs(this.player.motZ));
                 double var25 = var19 * var19 + var21 * var21 + var23 * var23;
 
                 if (var25 > 100.0D && (!this.minecraftServer.I() || !this.minecraftServer.H().equals(this.player.name)))
                 {
-                    logger.warning(this.player.name + " moved too quickly! " + var13 + "," + var15 + "," + var17 + " (" + var19 + ", " + var21 + ", " + var23 + ")");
+                    logger.warning(this.player.name + " moved too quickly! " + var11 + "," + var15 + "," + var17 + " (" + var19 + ", " + var21 + ", " + var23 + ")");
                     this.a(this.y, this.z, this.q, this.player.yaw, this.player.pitch);
                     return;
                 }
@@ -285,11 +298,16 @@
                     this.player.j(0.2F);
                 }
 
-                this.player.move(var13, var15, var17);
+                if (!this.checkMovement)
+                {
+                    return;
+                }
+
+                this.player.move(var11, var15, var17);
                 this.player.onGround = var1.g;
-                this.player.checkMovement(var13, var15, var17);
+                this.player.checkMovement(var11, var15, var17);
                 double var29 = var15;
-                var13 = var5 - this.player.locX;
+                var11 = var5 - this.player.locX;
                 var15 = var7 - this.player.locY;
 
                 if (var15 > -0.5D || var15 < 0.5D)
@@ -298,7 +316,7 @@
                 }
 
                 var17 = var9 - this.player.locZ;
-                var25 = var13 * var13 + var15 * var15 + var17 * var17;
+                var25 = var11 * var11 + var15 * var15 + var17 * var17;
                 boolean var31 = false;
 
                 if (var25 > 0.0625D && !this.player.isSleeping() && !this.player.itemInWorldManager.isCreative())
@@ -307,18 +325,23 @@
                     logger.warning(this.player.name + " moved wrongly!");
                 }
 
-                this.player.setLocation(var5, var7, var9, var11, var12);
+                if (!this.checkMovement)
+                {
+                    return;
+                }
+
+                this.player.setLocation(var5, var7, var9, var13, var14);
                 boolean var32 = var2.getCubes(this.player, this.player.boundingBox.clone().shrink((double)var27, (double)var27, (double)var27)).isEmpty();
 
-                if (var28 && (var31 || !var32) && !this.player.isSleeping())
+                if (var28 && (var31 || !var32) && !this.player.isSleeping() && !this.player.Y)
                 {
-                    this.a(this.y, this.z, this.q, var11, var12);
+                    this.a(this.y, this.z, this.q, var13, var14);
                     return;
                 }
 
                 AxisAlignedBB var33 = this.player.boundingBox.clone().grow((double)var27, (double)var27, (double)var27).a(0.0D, -0.55D, 0.0D);
 
-                if (!this.minecraftServer.getAllowFlight() && !this.player.itemInWorldManager.isCreative() && !var2.c(var33))
+                if (!this.minecraftServer.getAllowFlight() && !this.player.itemInWorldManager.isCreative() && !var2.c(var33) && !this.player.abilities.canFly)
                 {
                     if (var29 >= -0.03125D)
                     {
@@ -337,6 +360,11 @@
                     this.g = 0;
                 }
 
+                if (!this.checkMovement)
+                {
+                    return;
+                }
+
                 this.player.onGround = var1.g;
                 this.minecraftServer.getServerConfigurationManager().d(this.player);
                 this.player.b(this.player.locY - var3, var1.g);
@@ -394,8 +422,10 @@
                 double var10 = this.player.locY - ((double)var6 + 0.5D) + 1.5D;
                 double var12 = this.player.locZ - ((double)var7 + 0.5D);
                 double var14 = var8 * var8 + var10 * var10 + var12 * var12;
+                double var16 = this.player.itemInWorldManager.getBlockReachDistance() + 1.0D;
+                var16 *= var16;
 
-                if (var14 > 36.0D)
+                if (var14 > var16)
                 {
                     return;
                 }
@@ -419,6 +449,7 @@
             {
                 if (var20 <= this.minecraftServer.getSpawnProtection() && !var3)
                 {
+                    ForgeEventFactory.onPlayerInteract(this.player, PlayerInteractEvent$Action.LEFT_CLICK_BLOCK, var5, var6, var7, 0);
                     this.player.netServerHandler.sendPacket(new Packet53BlockChange(var5, var6, var7, var2));
                 }
                 else
@@ -477,8 +508,13 @@
                 return;
             }
 
+            PlayerInteractEvent var10 = ForgeEventFactory.onPlayerInteract(this.player, PlayerInteractEvent$Action.RIGHT_CLICK_AIR, 0, 0, 0, -1);
+
+            if (var10.useItem != Event$Result.DENY)
+            {
             this.player.itemInWorldManager.useItem(this.player, var2, var3);
         }
+        }
         else if (var1.f() >= this.minecraftServer.getMaxBuildHeight() - 1 && (var1.getFace() == 1 || var1.f() >= this.minecraftServer.getMaxBuildHeight()))
         {
             this.player.netServerHandler.sendPacket(new Packet3Chat("\u00a77Height limit for building is " + this.minecraftServer.getMaxBuildHeight()));
@@ -486,16 +522,19 @@
         }
         else
         {
-            ChunkCoordinates var10 = var2.getSpawn();
-            int var11 = MathHelper.a(var5 - var10.x);
-            int var12 = MathHelper.a(var7 - var10.z);
+            ChunkCoordinates var15 = var2.getSpawn();
+            int var11 = MathHelper.a(var5 - var15.x);
+            int var12 = MathHelper.a(var7 - var15.z);
 
             if (var11 > var12)
             {
                 var12 = var11;
             }
 
-            if (this.checkMovement && this.player.e((double)var5 + 0.5D, (double)var6 + 0.5D, (double)var7 + 0.5D) < 64.0D && (var12 > this.minecraftServer.getSpawnProtection() || var9))
+            double var13 = this.player.itemInWorldManager.getBlockReachDistance() + 1.0D;
+            var13 *= var13;
+
+            if (this.checkMovement && this.player.e((double)var5 + 0.5D, (double)var6 + 0.5D, (double)var7 + 0.5D) < var13 && (var12 > this.minecraftServer.getSpawnProtection() || var9))
             {
                 this.player.itemInWorldManager.interact(this.player, var2, var3, var5, var6, var7, var8, var1.j(), var1.l(), var1.m());
             }
@@ -552,13 +591,13 @@
         {
             this.player.h = true;
             this.player.inventory.items[this.player.inventory.itemInHandIndex] = ItemStack.b(this.player.inventory.items[this.player.inventory.itemInHandIndex]);
-            Slot var13 = this.player.activeContainer.a(this.player.inventory, this.player.inventory.itemInHandIndex);
+            Slot var16 = this.player.activeContainer.a(this.player.inventory, this.player.inventory.itemInHandIndex);
             this.player.activeContainer.b();
             this.player.h = false;
 
             if (!ItemStack.matches(this.player.inventory.getItemInHand(), var1.getItemStack()))
             {
-                this.sendPacket(new Packet103SetSlot(this.player.activeContainer.windowId, var13.g, this.player.inventory.getItemInHand()));
+                this.sendPacket(new Packet103SetSlot(this.player.activeContainer.windowId, var16.g, this.player.inventory.getItemInHand()));
             }
         }
     }
@@ -625,6 +664,8 @@
 
     public void a(Packet3Chat var1)
     {
+        var1 = FMLNetworkHandler.handleChatMessage(this, var1);
+
         if (this.player.getChatFlags() == 2)
         {
             this.sendPacket(new Packet3Chat("Cannot send chat message."));
@@ -793,7 +834,7 @@
                     return;
                 }
 
-                this.player = this.minecraftServer.getServerConfigurationManager().moveToWorld(this.player, 0, false);
+                this.player = this.minecraftServer.getServerConfigurationManager().moveToWorld(this.player, this.player.dimension, false);
             }
         }
     }
@@ -927,43 +968,43 @@
                 }
             }
 
-            int var6;
+            int var5;
             int var8;
 
-            for (var8 = 0; var8 < 4; ++var8)
+            for (var5 = 0; var5 < 4; ++var5)
             {
-                boolean var5 = true;
+                boolean var6 = true;
 
-                if (var1.lines[var8].length() > 15)
+                if (var1.lines[var5].length() > 15)
                 {
-                    var5 = false;
+                    var6 = false;
                 }
                 else
                 {
-                    for (var6 = 0; var6 < var1.lines[var8].length(); ++var6)
+                    for (var8 = 0; var8 < var1.lines[var5].length(); ++var8)
                     {
-                        if (SharedConstants.allowedCharacters.indexOf(var1.lines[var8].charAt(var6)) < 0)
+                        if (SharedConstants.allowedCharacters.indexOf(var1.lines[var5].charAt(var8)) < 0)
                         {
-                            var5 = false;
+                            var6 = false;
                         }
                     }
                 }
 
-                if (!var5)
+                if (!var6)
                 {
-                    var1.lines[var8] = "!?";
+                    var1.lines[var5] = "!?";
                 }
             }
 
             if (var3 instanceof TileEntitySign)
             {
-                var8 = var1.x;
+                var5 = var1.x;
                 int var9 = var1.y;
-                var6 = var1.z;
+                var8 = var1.z;
                 TileEntitySign var7 = (TileEntitySign)var3;
                 System.arraycopy(var1.lines, 0, var7.lines, 0, 4);
                 var7.update();
-                var2.notify(var8, var9, var6);
+                var2.notify(var5, var9, var8);
             }
         }
     }
@@ -999,11 +1040,11 @@
     public void a(Packet203TabComplete var1)
     {
         StringBuilder var2 = new StringBuilder();
-        String var4;
+        String var3;
 
-        for (Iterator var3 = this.minecraftServer.a(this.player, var1.d()).iterator(); var3.hasNext(); var2.append(var4))
+        for (Iterator var4 = this.minecraftServer.a(this.player, var1.d()).iterator(); var4.hasNext(); var2.append(var3))
         {
-            var4 = (String)var3.next();
+            var3 = (String)var4.next();
 
             if (var2.length() > 0)
             {
@@ -1021,6 +1062,11 @@
 
     public void a(Packet250CustomPayload var1)
     {
+        FMLNetworkHandler.handlePacket250Packet(var1, this.networkManager, this);
+    }
+
+    public void handleVanilla250Packet(Packet250CustomPayload var1)
+    {
         DataInputStream var2;
         ItemStack var3;
         ItemStack var4;
@@ -1044,9 +1090,9 @@
                     var4.setTag(var3.getTag());
                 }
             }
-            catch (Exception var12)
+            catch (Exception var14)
             {
-                var12.printStackTrace();
+                var14.printStackTrace();
             }
         }
         else if ("MC|BSign".equals(var1.tag))
@@ -1069,36 +1115,37 @@
                     var4.id = Item.WRITTEN_BOOK.id;
                 }
             }
-            catch (Exception var11)
+            catch (Exception var13)
             {
-                var11.printStackTrace();
+                var13.printStackTrace();
             }
         }
         else
         {
-            int var14;
+            int var5;
 
             if ("MC|TrSel".equals(var1.tag))
             {
                 try
                 {
                     var2 = new DataInputStream(new ByteArrayInputStream(var1.data));
-                    var14 = var2.readInt();
-                    Container var16 = this.player.activeContainer;
+                    var5 = var2.readInt();
+                    Container var6 = this.player.activeContainer;
 
-                    if (var16 instanceof ContainerMerchant)
+                    if (var6 instanceof ContainerMerchant)
                     {
-                        ((ContainerMerchant)var16).b(var14);
+                        ((ContainerMerchant)var6).b(var5);
                     }
                 }
-                catch (Exception var10)
+                catch (Exception var12)
                 {
-                    var10.printStackTrace();
+                    var12.printStackTrace();
                 }
             }
             else
             {
-                int var18;
+                String var8;
+                int var15;
 
                 if ("MC|AdvCdm".equals(var1.tag))
                 {
@@ -1111,22 +1158,22 @@
                         try
                         {
                             var2 = new DataInputStream(new ByteArrayInputStream(var1.data));
-                            var14 = var2.readInt();
-                            var18 = var2.readInt();
-                            int var5 = var2.readInt();
-                            String var6 = Packet.a(var2, 256);
-                            TileEntity var7 = this.player.world.getTileEntity(var14, var18, var5);
+                            var5 = var2.readInt();
+                            var15 = var2.readInt();
+                            int var7 = var2.readInt();
+                            var8 = Packet.a(var2, 256);
+                            TileEntity var9 = this.player.world.getTileEntity(var5, var15, var7);
 
-                            if (var7 != null && var7 instanceof TileEntityCommand)
+                            if (var9 != null && var9 instanceof TileEntityCommand)
                             {
-                                ((TileEntityCommand)var7).func_82352_b(var6);
-                                this.player.world.notify(var14, var18, var5);
-                                this.player.sendMessage("Command set: " + var6);
+                                ((TileEntityCommand)var9).func_82352_b(var8);
+                                this.player.world.notify(var5, var15, var7);
+                                this.player.sendMessage("Command set: " + var8);
                             }
                         }
-                        catch (Exception var9)
+                        catch (Exception var11)
                         {
-                            var9.printStackTrace();
+                            var11.printStackTrace();
                         }
                     }
                     else
@@ -1141,45 +1188,63 @@
                         try
                         {
                             var2 = new DataInputStream(new ByteArrayInputStream(var1.data));
-                            var14 = var2.readInt();
-                            var18 = var2.readInt();
-                            ContainerBeacon var17 = (ContainerBeacon)this.player.activeContainer;
-                            Slot var19 = var17.getSlot(0);
+                            var5 = var2.readInt();
+                            var15 = var2.readInt();
+                            ContainerBeacon var16 = (ContainerBeacon)this.player.activeContainer;
+                            Slot var18 = var16.getSlot(0);
 
-                            if (var19.d())
+                            if (var18.d())
                             {
-                                var19.a(1);
-                                TileEntityBeacon var20 = var17.func_82863_d();
-                                var20.func_82128_d(var14);
-                                var20.func_82127_e(var18);
-                                var20.update();
+                                var18.a(1);
+                                TileEntityBeacon var19 = var16.func_82863_d();
+                                var19.func_82128_d(var5);
+                                var19.func_82127_e(var15);
+                                var19.update();
                             }
                         }
-                        catch (Exception var8)
+                        catch (Exception var10)
                         {
-                            var8.printStackTrace();
+                            var10.printStackTrace();
                         }
                     }
                 }
                 else if ("MC|ItemName".equals(var1.tag) && this.player.activeContainer instanceof ContainerAnvil)
                 {
-                    ContainerAnvil var13 = (ContainerAnvil)this.player.activeContainer;
+                    ContainerAnvil var17 = (ContainerAnvil)this.player.activeContainer;
 
                     if (var1.data != null && var1.data.length >= 1)
                     {
-                        String var15 = SharedConstants.func_71565_a(new String(var1.data));
+                        var8 = SharedConstants.func_71565_a(new String(var1.data));
 
-                        if (var15.length() <= 30)
+                        if (var8.length() <= 30)
                         {
-                            var13.func_82850_a(var15);
+                            var17.func_82850_a(var8);
                         }
                     }
                     else
                     {
-                        var13.func_82850_a("");
+                        var17.func_82850_a("");
                     }
                 }
             }
         }
     }
+
+    /**
+     * Contains logic for handling packets containing arbitrary unique item data. Currently this is only for maps.
+     */
+    public void a(Packet131ItemData var1)
+    {
+        FMLNetworkHandler.handlePacket131Packet(this, var1);
 }
+
+    public EntityPlayer getPlayer()
+    {
+        return this.player;
+    }
+
+    public EntityHuman getPlayer()
+    {
+        return this.getPlayer();
+    }
+}
Index: NetworkManager.java
===================================================================
--- NetworkManager.java	(revision 3)
+++ NetworkManager.java	(working copy)
@@ -1,8 +1,12 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import cpw.mods.fml.common.network.FMLNetworkHandler;
 import java.io.BufferedOutputStream;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
+import java.io.IOException;
 import java.net.Socket;
 import java.net.SocketAddress;
 import java.net.SocketException;
@@ -20,7 +24,7 @@
     public static AtomicInteger field_74469_b = new AtomicInteger();
 
     /** The object used for synchronization on the send queue. */
-    private Object h = new Object();
+    private Object h;
 
     /** The socket used by this network manager. */
     private Socket socket;
@@ -35,23 +39,23 @@
     private volatile DataOutputStream output;
 
     /** Whether the network is currently operational. */
-    private volatile boolean m = true;
+    private volatile boolean m;
 
     /**
      * Whether this network manager is currently terminating (and should ignore further errors).
      */
-    private volatile boolean n = false;
+    private volatile boolean n;
 
     /**
      * Linked list of packets that have been read and are awaiting processing.
      */
-    private List inboundQueue = Collections.synchronizedList(new ArrayList());
+    private List inboundQueue;
 
     /** Linked list of packets awaiting sending. */
-    private List highPriorityQueue = Collections.synchronizedList(new ArrayList());
+    private List highPriorityQueue;
 
     /** Linked list of packets with chunk data that are awaiting sending. */
-    private List lowPriorityQueue = Collections.synchronizedList(new ArrayList());
+    private List lowPriorityQueue;
 
     /** A reference to the NetHandler object. */
     private NetHandler packetListener;
@@ -59,7 +63,7 @@
     /**
      * Whether this server is currently terminating. If this is a client, this is always false.
      */
-    private boolean s = false;
+    private boolean s;
 
     /** The thread used for writing. */
     private Thread t;
@@ -68,25 +72,47 @@
     private Thread u;
 
     /** A String indicating why the network has shutdown. */
-    private String v = "";
+    private String v;
     private Object[] field_74480_w;
-    private int field_74490_x = 0;
+    private int field_74490_x;
 
     /**
      * The length in bytes of the packets in both send queues (data and chunkData).
      */
-    private int y = 0;
+    private int y;
     public static int[] field_74470_c = new int[256];
     public static int[] field_74467_d = new int[256];
-    public int field_74468_e = 0;
-    boolean f = false;
-    boolean g = false;
-    private SecretKey z = null;
-    private PrivateKey field_74463_A = null;
-    private int field_74464_B = 50;
+    public int field_74468_e;
+    boolean f;
+    boolean g;
+    private SecretKey z;
+    private PrivateKey field_74463_A;
+    private int field_74464_B;
 
-    public NetworkManager(Socket var1, String var2, NetHandler var3, PrivateKey var4)
+    @SideOnly(Side.CLIENT)
+    public NetworkManager(Socket var1, String var2, NetHandler var3) throws IOException
     {
+        this(var1, var2, var3, (PrivateKey)null);
+    }
+
+    public NetworkManager(Socket var1, String var2, NetHandler var3, PrivateKey var4) throws IOException
+    {
+        this.h = new Object();
+        this.m = true;
+        this.n = false;
+        this.inboundQueue = Collections.synchronizedList(new ArrayList());
+        this.highPriorityQueue = Collections.synchronizedList(new ArrayList());
+        this.lowPriorityQueue = Collections.synchronizedList(new ArrayList());
+        this.s = false;
+        this.v = "";
+        this.field_74490_x = 0;
+        this.y = 0;
+        this.field_74468_e = 0;
+        this.f = false;
+        this.g = false;
+        this.z = null;
+        this.field_74463_A = null;
+        this.field_74464_B = 50;
         this.field_74463_A = var4;
         this.socket = var1;
         this.j = var1.getRemoteSocketAddress();
@@ -110,6 +136,14 @@
         this.t.start();
     }
 
+    @SideOnly(Side.CLIENT)
+    public void f()
+    {
+        this.a();
+        this.t = null;
+        this.u = null;
+    }
+
     /**
      * Sets the NetHandler for this NetworkManager. Server-only.
      */
@@ -126,6 +160,7 @@
         if (!this.s)
         {
             Object var2 = this.h;
+            Object var3 = this.h;
 
             synchronized (this.h)
             {
@@ -154,8 +189,8 @@
         try
         {
             Packet var2;
-            int var10001;
-            int[] var10000;
+            int var3;
+            int[] var4;
 
             if (this.field_74468_e == 0 || System.currentTimeMillis() - ((Packet)this.highPriorityQueue.get(0)).timestamp >= (long)this.field_74468_e)
             {
@@ -175,9 +210,9 @@
                         this.k();
                     }
 
-                    var10000 = field_74467_d;
-                    var10001 = var2.k();
-                    var10000[var10001] += var2.a() + 1;
+                    var4 = field_74467_d;
+                    var3 = var2.k();
+                    var4[var3] += var2.a() + 1;
                     var1 = true;
                 }
             }
@@ -189,9 +224,9 @@
                 if (var2 != null)
                 {
                     Packet.a(var2, this.output);
-                    var10000 = field_74467_d;
-                    var10001 = var2.k();
-                    var10000[var10001] += var2.a() + 1;
+                    var4 = field_74467_d;
+                    var3 = var2.k();
+                    var4[var3] += var2.a() + 1;
                     this.field_74464_B = 0;
                     var1 = true;
                 }
@@ -199,11 +234,11 @@
 
             return var1;
         }
-        catch (Exception var3)
+        catch (Exception var5)
         {
             if (!this.n)
             {
-                this.a(var3);
+                this.a(var5);
             }
 
             return false;
@@ -215,6 +250,7 @@
         Packet var2 = null;
         List var3 = var1 ? this.lowPriorityQueue : this.highPriorityQueue;
         Object var4 = this.h;
+        Object var5 = this.h;
 
         synchronized (this.h)
         {
@@ -243,20 +279,18 @@
         {
             List var3 = var2 ? this.lowPriorityQueue : this.highPriorityQueue;
             Iterator var4 = var3.iterator();
-            Packet var5;
 
-            do
+            while (var4.hasNext())
             {
-                if (!var4.hasNext())
+                Packet var5 = (Packet)var4.next();
+
+                if (var5.k() == var1.k())
                 {
-                    return false;
+                    return var1.a(var5);
                 }
-
-                var5 = (Packet)var4.next();
             }
-            while (var5.k() != var1.k());
 
-            return var1.a(var5);
+            return false;
         }
     }
 
@@ -300,9 +334,9 @@
                     this.j();
                 }
 
-                int[] var10000 = field_74470_c;
-                int var10001 = var2.k();
-                var10000[var10001] += var2.a() + 1;
+                int[] var3 = field_74470_c;
+                int var4 = var2.k();
+                var3[var4] += var2.a() + 1;
 
                 if (!this.s)
                 {
@@ -326,11 +360,11 @@
 
             return var1;
         }
-        catch (Exception var3)
+        catch (Exception var5)
         {
             if (!this.n)
             {
-                this.a(var3);
+                this.a(var5);
             }
 
             return false;
@@ -411,6 +445,7 @@
         if (this.n && this.inboundQueue.isEmpty())
         {
             this.packetListener.a(this.v, this.field_74480_w);
+            FMLNetworkHandler.onConnectionClosed(this, this.packetListener.getPlayer());
         }
     }
 
@@ -436,7 +471,7 @@
         }
     }
 
-    private void j()
+    private void j() throws IOException
     {
         this.f = true;
         this.input = new DataInputStream(MinecraftEncryption.a(this.z, this.socket.getInputStream()));
@@ -445,7 +480,7 @@
     /**
      * flushes the stream and replaces it with an encryptedOutputStream
      */
-    private void k()
+    private void k() throws IOException
     {
         this.output.flush();
         this.g = true;
Index: Packet.java
===================================================================
--- Packet.java	(revision 3)
+++ Packet.java	(working copy)
@@ -90,7 +90,7 @@
     /**
      * Writes a byte array to the DataOutputStream
      */
-    public static void a(DataOutputStream var0, byte[] var1)
+    public static void a(DataOutputStream var0, byte[] var1) throws IOException
     {
         var0.writeShort(var1.length);
         var0.write(var1);
@@ -99,7 +99,7 @@
     /**
      * the first short in the stream indicates the number of bytes to read
      */
-    public static byte[] b(DataInputStream var0)
+    public static byte[] b(DataInputStream var0) throws IOException
     {
         short var1 = var0.readShort();
 
@@ -126,32 +126,32 @@
     /**
      * Read a packet, prefixed by its ID, from the data stream.
      */
-    public static Packet a(DataInputStream var0, boolean var1, Socket var2)
+    public static Packet a(DataInputStream var0, boolean var1, Socket var2) throws IOException
     {
         boolean var3 = false;
         Packet var4 = null;
         int var5 = var2.getSoTimeout();
-        int var8;
+        int var6;
 
         try
         {
-            var8 = var0.read();
+            var6 = var0.read();
 
-            if (var8 == -1)
+            if (var6 == -1)
             {
                 return null;
             }
 
-            if (var1 && !c.contains(Integer.valueOf(var8)) || !var1 && !b.contains(Integer.valueOf(var8)))
+            if (var1 && !c.contains(Integer.valueOf(var6)) || !var1 && !b.contains(Integer.valueOf(var6)))
             {
-                throw new IOException("Bad packet id " + var8);
+                throw new IOException("Bad packet id " + var6);
             }
 
-            var4 = d(var8);
+            var4 = d(var6);
 
             if (var4 == null)
             {
-                throw new IOException("Bad packet id " + var8);
+                throw new IOException("Bad packet id " + var6);
             }
 
             if (var4 instanceof Packet254GetInfo)
@@ -163,13 +163,13 @@
             ++n;
             o += (long)var4.a();
         }
-        catch (EOFException var7)
+        catch (EOFException var8)
         {
             System.out.println("Reached end of stream");
             return null;
         }
 
-        PacketCounter.a(var8, (long)var4.a());
+        PacketCounter.a(var6, (long)var4.a());
         ++n;
         o += (long)var4.a();
         var2.setSoTimeout(var5);
@@ -179,7 +179,7 @@
     /**
      * Writes a packet, prefixed by its ID, to the data stream.
      */
-    public static void a(Packet var0, DataOutputStream var1)
+    public static void a(Packet var0, DataOutputStream var1) throws IOException
     {
         var1.write(var0.k());
         var0.a(var1);
@@ -190,7 +190,7 @@
     /**
      * Writes a String to the DataOutputStream
      */
-    public static void a(String var0, DataOutputStream var1)
+    public static void a(String var0, DataOutputStream var1) throws IOException
     {
         if (var0.length() > 32767)
         {
@@ -206,7 +206,7 @@
     /**
      * Reads a string from a packet
      */
-    public static String a(DataInputStream var0, int var1)
+    public static String a(DataInputStream var0, int var1) throws IOException
     {
         short var2 = var0.readShort();
 
@@ -234,12 +234,12 @@
     /**
      * Abstract. Reads the raw packet data from the data stream.
      */
-    public abstract void a(DataInputStream var1);
+    public abstract void a(DataInputStream var1) throws IOException;
 
     /**
      * Abstract. Writes the raw packet data to the data stream.
      */
-    public abstract void a(DataOutputStream var1);
+    public abstract void a(DataOutputStream var1) throws IOException;
 
     /**
      * Passes this Packet on to the NetHandler for processing.
@@ -285,7 +285,7 @@
     /**
      * Reads a ItemStack from the InputStream
      */
-    public static ItemStack c(DataInputStream var0)
+    public static ItemStack c(DataInputStream var0) throws IOException
     {
         ItemStack var1 = null;
         short var2 = var0.readShort();
@@ -304,7 +304,7 @@
     /**
      * Writes the ItemStack's ID (short), then size (byte), then damage. (short)
      */
-    public static void a(ItemStack var0, DataOutputStream var1)
+    public static void a(ItemStack var0, DataOutputStream var1) throws IOException
     {
         if (var0 == null)
         {
@@ -329,7 +329,7 @@
     /**
      * Reads a compressed NBTTagCompound from the InputStream
      */
-    public static NBTTagCompound d(DataInputStream var0)
+    public static NBTTagCompound d(DataInputStream var0) throws IOException
     {
         short var1 = var0.readShort();
 
@@ -348,7 +348,7 @@
     /**
      * Writes a compressed NBTTagCompound to the OutputStream
      */
-    protected static void a(NBTTagCompound var0, DataOutputStream var1)
+    protected static void a(NBTTagCompound var0, DataOutputStream var1) throws IOException
     {
         if (var0 == null)
         {
@@ -426,7 +426,7 @@
         a(107, true, true, Packet107SetCreativeSlot.class);
         a(108, false, true, Packet108ButtonClick.class);
         a(130, true, true, Packet130UpdateSign.class);
-        a(131, true, false, Packet131ItemData.class);
+        a(131, true, true, Packet131ItemData.class);
         a(132, true, false, Packet132TileEntityData.class);
         a(200, true, false, Packet200Statistic.class);
         a(201, true, false, Packet201PlayerInfo.class);
Index: Packet51MapChunk.java
===================================================================
--- Packet51MapChunk.java	(revision 3)
+++ Packet51MapChunk.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
@@ -73,7 +75,7 @@
     /**
      * Abstract. Reads the raw packet data from the data stream.
      */
-    public void a(DataInputStream var1)
+    public void a(DataInputStream var1) throws IOException
     {
         this.a = var1.readInt();
         this.b = var1.readInt();
@@ -97,34 +99,42 @@
         }
 
         var3 = 12288 * var2;
+        int var4 = 0;
 
+        for (int var5 = 0; var5 < 16; ++var5)
+        {
+            var4 += this.d >> var5 & 1;
+        }
+
+        var3 += 2048 * var4;
+
         if (this.e)
         {
             var3 += 256;
         }
 
         this.field_73596_g = new byte[var3];
-        Inflater var4 = new Inflater();
-        var4.setInput(buildBuffer, 0, this.size);
+        Inflater var12 = new Inflater();
+        var12.setInput(buildBuffer, 0, this.size);
 
         try
         {
-            var4.inflate(this.field_73596_g);
+            var12.inflate(this.field_73596_g);
         }
-        catch (DataFormatException var9)
+        catch (DataFormatException var10)
         {
             throw new IOException("Bad compressed data format");
         }
         finally
         {
-            var4.end();
+            var12.end();
         }
     }
 
     /**
      * Abstract. Writes the raw packet data to the data stream.
      */
-    public void a(DataOutputStream var1)
+    public void a(DataOutputStream var1) throws IOException
     {
         var1.writeInt(this.a);
         var1.writeInt(this.b);
@@ -190,15 +200,15 @@
             }
         }
 
-        NibbleArray var10;
+        NibbleArray var11;
 
         for (var8 = 0; var8 < var4.length; ++var8)
         {
             if (var4[var8] != null && (!var1 || !var4[var8].a()) && (var2 & 1 << var8) != 0)
             {
-                var10 = var4[var8].j();
-                System.arraycopy(var10.a, 0, var7, var3, var10.a.length);
-                var3 += var10.a.length;
+                var11 = var4[var8].j();
+                System.arraycopy(var11.a, 0, var7, var3, var11.a.length);
+                var3 += var11.a.length;
             }
         }
 
@@ -206,9 +216,9 @@
         {
             if (var4[var8] != null && (!var1 || !var4[var8].a()) && (var2 & 1 << var8) != 0)
             {
-                var10 = var4[var8].k();
-                System.arraycopy(var10.a, 0, var7, var3, var10.a.length);
-                var3 += var10.a.length;
+                var11 = var4[var8].k();
+                System.arraycopy(var11.a, 0, var7, var3, var11.a.length);
+                var3 += var11.a.length;
             }
         }
 
@@ -216,9 +226,9 @@
         {
             if (var4[var8] != null && (!var1 || !var4[var8].a()) && (var2 & 1 << var8) != 0)
             {
-                var10 = var4[var8].l();
-                System.arraycopy(var10.a, 0, var7, var3, var10.a.length);
-                var3 += var10.a.length;
+                var11 = var4[var8].l();
+                System.arraycopy(var11.a, 0, var7, var3, var11.a.length);
+                var3 += var11.a.length;
             }
         }
 
@@ -228,22 +238,28 @@
             {
                 if (var4[var8] != null && (!var1 || !var4[var8].a()) && var4[var8].i() != null && (var2 & 1 << var8) != 0)
                 {
-                    var10 = var4[var8].i();
-                    System.arraycopy(var10.a, 0, var7, var3, var10.a.length);
-                    var3 += var10.a.length;
+                    var11 = var4[var8].i();
+                    System.arraycopy(var11.a, 0, var7, var3, var11.a.length);
+                    var3 += var11.a.length;
                 }
             }
         }
 
         if (var1)
         {
-            byte[] var11 = var0.m();
-            System.arraycopy(var11, 0, var7, var3, var11.length);
-            var3 += var11.length;
+            byte[] var10 = var0.m();
+            System.arraycopy(var10, 0, var7, var3, var10.length);
+            var3 += var10.length;
         }
 
         var6.field_74582_a = new byte[var3];
         System.arraycopy(var7, 0, var6.field_74582_a, 0, var3);
         return var6;
     }
+
+    @SideOnly(Side.CLIENT)
+    public byte[] d()
+    {
+        return this.field_73596_g;
 }
+}
Index: Packet56MapChunkBulk.java
===================================================================
--- Packet56MapChunkBulk.java	(revision 3)
+++ Packet56MapChunkBulk.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
@@ -70,7 +72,7 @@
     /**
      * Abstract. Reads the raw packet data from the data stream.
      */
-    public void a(DataInputStream var1)
+    public void a(DataInputStream var1) throws IOException
     {
         short var2 = var1.readShort();
         this.field_73585_g = var1.readInt();
@@ -94,7 +96,7 @@
         {
             var4.inflate(var3);
         }
-        catch (DataFormatException var11)
+        catch (DataFormatException var13)
         {
             throw new IOException("Bad compressed data format");
         }
@@ -119,7 +121,14 @@
                 var7 += this.field_73590_a[var6] >> var8 & 1;
             }
 
-            var8 = 2048 * 5 * var7 + 256;
+            int var9 = 0;
+
+            for (int var10 = 0; var10 < 16; ++var10)
+            {
+                var9 += this.field_73588_b[var6] >> var10 & 1;
+            }
+
+            var8 = 10240 * var7 + 2048 * var9 + 256;
             this.field_73584_f[var6] = new byte[var8];
             System.arraycopy(var3, var5, this.field_73584_f[var6], 0, var8);
             var5 += var8;
@@ -129,7 +138,7 @@
     /**
      * Abstract. Writes the raw packet data to the data stream.
      */
-    public void a(DataOutputStream var1)
+    public void a(DataOutputStream var1) throws IOException
     {
         var1.writeShort(this.field_73589_c.length);
         var1.writeInt(this.field_73585_g);
@@ -160,8 +169,26 @@
         return 6 + this.field_73585_g + 12 * this.func_73581_d();
     }
 
+    @SideOnly(Side.CLIENT)
+    public int a(int var1)
+    {
+        return this.field_73589_c[var1];
+    }
+
+    @SideOnly(Side.CLIENT)
+    public int b(int var1)
+    {
+        return this.field_73586_d[var1];
+    }
+
     public int func_73581_d()
     {
         return this.field_73589_c.length;
     }
+
+    @SideOnly(Side.CLIENT)
+    public byte[] c(int var1)
+    {
+        return this.field_73584_f[var1];
 }
+}
Index: PlayerInstance.java
===================================================================
--- PlayerInstance.java	(revision 3)
+++ PlayerInstance.java	(working copy)
@@ -18,7 +18,6 @@
     /** the number of blocks that need to be updated next tick */
     private int dirtyCount;
     private int field_73260_f;
-
     final PlayerManager playerManager;
 
     public PlayerInstance(PlayerManager var1, int var2, int var3)
@@ -154,7 +153,7 @@
                         if ((this.field_73260_f & 1 << var3) != 0)
                         {
                             var4 = var3 << 4;
-                            List var5 = PlayerManager.a(this.playerManager).getTileEntities(var1, var4, var2, var1 + 16, var4 + 16, var2 + 16);
+                            List var5 = PlayerManager.a(this.playerManager).getTileEntities(var1, var4, var2, var1 + 15, var4 + 16, var2 + 15);
                             Iterator var6 = var5.iterator();
 
                             while (var6.hasNext())
Index: RecipesFurnace.java
===================================================================
--- RecipesFurnace.java	(revision 3)
+++ RecipesFurnace.java	(working copy)
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -10,6 +11,7 @@
     /** The list of smelting results. */
     private Map recipes = new HashMap();
     private Map c = new HashMap();
+    private Map metaSmeltingList = new HashMap();
 
     /**
      * Used to call methods addSmelting and getSmeltingResult.
@@ -49,6 +51,8 @@
         this.c.put(Integer.valueOf(var2.id), Float.valueOf(var3));
     }
 
+    @Deprecated
+
     /**
      * Returns the smelting result of an item.
      */
@@ -66,4 +70,22 @@
     {
         return this.c.containsKey(Integer.valueOf(var1)) ? ((Float)this.c.get(Integer.valueOf(var1))).floatValue() : 0.0F;
     }
+
+    public void addSmelting(int var1, int var2, ItemStack var3)
+    {
+        this.metaSmeltingList.put(Arrays.asList(new Integer[] {Integer.valueOf(var1), Integer.valueOf(var2)}), var3);
 }
+
+    public ItemStack getSmeltingResult(ItemStack var1)
+    {
+        if (var1 == null)
+        {
+            return null;
+        }
+        else
+        {
+            ItemStack var2 = (ItemStack)this.metaSmeltingList.get(Arrays.asList(new Integer[] {Integer.valueOf(var1.id), Integer.valueOf(var1.getData())}));
+            return var2 != null ? var2 : (ItemStack)this.recipes.get(Integer.valueOf(var1.id));
+        }
+    }
+}
Index: ServerConfigurationManagerAbstract.java
===================================================================
--- ServerConfigurationManagerAbstract.java	(revision 3)
+++ ServerConfigurationManagerAbstract.java	(working copy)
@@ -1,5 +1,9 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import cpw.mods.fml.common.network.FMLNetworkHandler;
+import cpw.mods.fml.common.registry.GameRegistry;
 import java.io.File;
 import java.net.SocketAddress;
 import java.text.SimpleDateFormat;
@@ -102,6 +106,7 @@
         }
 
         var2.syncInventory();
+        FMLNetworkHandler.handlePlayerLogin(var2, var6, var1);
     }
 
     /**
@@ -193,6 +198,7 @@
      */
     public void disconnect(EntityPlayer var1)
     {
+        GameRegistry.onPlayerLogout(var1);
         this.b(var1);
         WorldServer var2 = var1.p();
         var2.kill(var1);
@@ -293,66 +299,75 @@
      */
     public EntityPlayer moveToWorld(EntityPlayer var1, int var2, boolean var3)
     {
+        WorldServer var4 = this.server.getWorldServer(var2);
+
+        if (var4 == null || !var4.worldProvider.e())
+        {
+            var2 = 0;
+        }
+
         var1.p().getTracker().untrackPlayer(var1);
         var1.p().getTracker().untrackEntity(var1);
         var1.p().getPlayerManager().removePlayer(var1);
         this.players.remove(var1);
         this.server.getWorldServer(var1.dimension).removeEntity(var1);
-        ChunkCoordinates var4 = var1.getBed();
-        boolean var5 = var1.func_82245_bX();
+        ChunkCoordinates var5 = var1.getBed();
+        boolean var6 = var1.func_82245_bX();
         var1.dimension = var2;
-        Object var6;
+        Object var7;
 
         if (this.server.M())
         {
-            var6 = new DemoItemInWorldManager(this.server.getWorldServer(var1.dimension));
+            var7 = new DemoItemInWorldManager(this.server.getWorldServer(var1.dimension));
         }
         else
         {
-            var6 = new ItemInWorldManager(this.server.getWorldServer(var1.dimension));
+            var7 = new ItemInWorldManager(this.server.getWorldServer(var1.dimension));
         }
 
-        EntityPlayer var7 = new EntityPlayer(this.server, this.server.getWorldServer(var1.dimension), var1.name, (ItemInWorldManager)var6);
-        var7.netServerHandler = var1.netServerHandler;
-        var7.copyTo(var1, var3);
-        var7.id = var1.id;
-        WorldServer var8 = this.server.getWorldServer(var1.dimension);
-        this.func_72381_a(var7, var1, var8);
-        ChunkCoordinates var9;
+        EntityPlayer var8 = new EntityPlayer(this.server, this.server.getWorldServer(var1.dimension), var1.name, (ItemInWorldManager)var7);
+        var8.netServerHandler = var1.netServerHandler;
+        var8.copyTo(var1, var3);
+        var8.dimension = var2;
+        var8.id = var1.id;
+        WorldServer var9 = this.server.getWorldServer(var1.dimension);
+        this.func_72381_a(var8, var1, var9);
+        ChunkCoordinates var10;
 
-        if (var4 != null)
+        if (var5 != null)
         {
-            var9 = EntityHuman.getBed(this.server.getWorldServer(var1.dimension), var4, var5);
+            var10 = EntityHuman.getBed(this.server.getWorldServer(var1.dimension), var5, var6);
 
-            if (var9 != null)
+            if (var10 != null)
             {
-                var7.setPositionRotation((double)((float)var9.x + 0.5F), (double)((float)var9.y + 0.1F), (double)((float)var9.z + 0.5F), 0.0F, 0.0F);
-                var7.setRespawnPosition(var4, var5);
+                var8.setPositionRotation((double)((float)var10.x + 0.5F), (double)((float)var10.y + 0.1F), (double)((float)var10.z + 0.5F), 0.0F, 0.0F);
+                var8.setRespawnPosition(var5, var6);
             }
             else
             {
-                var7.netServerHandler.sendPacket(new Packet70Bed(0, 0));
+                var8.netServerHandler.sendPacket(new Packet70Bed(0, 0));
             }
         }
 
-        var8.chunkProviderServer.getChunkAt((int)var7.locX >> 4, (int)var7.locZ >> 4);
+        var9.chunkProviderServer.getChunkAt((int)var8.locX >> 4, (int)var8.locZ >> 4);
 
-        while (!var8.getCubes(var7, var7.boundingBox).isEmpty())
+        while (!var9.getCubes(var8, var8.boundingBox).isEmpty())
         {
-            var7.setPosition(var7.locX, var7.locY + 1.0D, var7.locZ);
+            var8.setPosition(var8.locX, var8.locY + 1.0D, var8.locZ);
         }
 
-        var7.netServerHandler.sendPacket(new Packet9Respawn(var7.dimension, (byte)var7.world.difficulty, var7.world.getWorldData().getType(), var7.world.getHeight(), var7.itemInWorldManager.getGameMode()));
-        var9 = var8.getSpawn();
-        var7.netServerHandler.a(var7.locX, var7.locY, var7.locZ, var7.yaw, var7.pitch);
-        var7.netServerHandler.sendPacket(new Packet6SpawnPosition(var9.x, var9.y, var9.z));
-        var7.netServerHandler.sendPacket(new Packet43SetExperience(var7.exp, var7.expTotal, var7.expLevel));
-        this.b(var7, var8);
-        var8.getPlayerManager().addPlayer(var7);
-        var8.addEntity(var7);
-        this.players.add(var7);
-        var7.syncInventory();
-        return var7;
+        var8.netServerHandler.sendPacket(new Packet9Respawn(var8.dimension, (byte)var8.world.difficulty, var8.world.getWorldData().getType(), var8.world.getHeight(), var8.itemInWorldManager.getGameMode()));
+        var10 = var9.getSpawn();
+        var8.netServerHandler.a(var8.locX, var8.locY, var8.locZ, var8.yaw, var8.pitch);
+        var8.netServerHandler.sendPacket(new Packet6SpawnPosition(var10.x, var10.y, var10.z));
+        var8.netServerHandler.sendPacket(new Packet43SetExperience(var8.exp, var8.expTotal, var8.expLevel));
+        this.b(var8, var9);
+        var9.getPlayerManager().addPlayer(var8);
+        var9.addEntity(var8);
+        this.players.add(var8);
+        var8.syncInventory();
+        GameRegistry.onPlayerRespawn(var8);
+        return var8;
     }
 
     /**
@@ -360,26 +375,33 @@
      */
     public void changeDimension(EntityPlayer var1, int var2)
     {
-        int var3 = var1.dimension;
-        WorldServer var4 = this.server.getWorldServer(var1.dimension);
+        this.transferPlayerToDimension(var1, var2, new PortalTravelAgent());
+    }
+
+    public void transferPlayerToDimension(EntityPlayer var1, int var2, PortalTravelAgent var3)
+    {
+        int var4 = var1.dimension;
+        WorldServer var5 = this.server.getWorldServer(var1.dimension);
         var1.dimension = var2;
-        WorldServer var5 = this.server.getWorldServer(var1.dimension);
-        var1.netServerHandler.sendPacket(new Packet9Respawn(var1.dimension, (byte)var1.world.difficulty, var5.getWorldData().getType(), var5.getHeight(), var1.itemInWorldManager.getGameMode()));
-        var4.removeEntity(var1);
+        WorldServer var6 = this.server.getWorldServer(var1.dimension);
+        var1.netServerHandler.sendPacket(new Packet9Respawn(var1.dimension, (byte)var1.world.difficulty, var6.getWorldData().getType(), var6.getHeight(), var1.itemInWorldManager.getGameMode()));
+        var5.removeEntity(var1);
         var1.dead = false;
-        this.a(var1, var3, var4, var5);
-        this.func_72375_a(var1, var4);
+        this.a(var1, var4, var5, var6, var3);
+        this.func_72375_a(var1, var5);
         var1.netServerHandler.a(var1.locX, var1.locY, var1.locZ, var1.yaw, var1.pitch);
-        var1.itemInWorldManager.a(var5);
-        this.b(var1, var5);
+        var1.itemInWorldManager.a(var6);
+        this.b(var1, var6);
         this.updateClient(var1);
-        Iterator var6 = var1.getEffects().iterator();
+        Iterator var7 = var1.getEffects().iterator();
 
-        while (var6.hasNext())
+        while (var7.hasNext())
         {
-            MobEffect var7 = (MobEffect)var6.next();
-            var1.netServerHandler.sendPacket(new Packet41MobEffect(var1.id, var7));
+            MobEffect var8 = (MobEffect)var7.next();
+            var1.netServerHandler.sendPacket(new Packet41MobEffect(var1.id, var8));
         }
+
+        GameRegistry.onPlayerChangedDimension(var1);
     }
 
     /**
@@ -387,53 +409,41 @@
      */
     public void a(Entity var1, int var2, WorldServer var3, WorldServer var4)
     {
-        double var5 = var1.locX;
-        double var7 = var1.locZ;
-        double var9 = 8.0D;
-        double var11 = var1.locX;
-        double var13 = var1.locY;
-        double var15 = var1.locZ;
-        float var17 = var1.yaw;
+        this.a(var1, var2, var3, var4, new PortalTravelAgent());
+    }
 
-        if (var1.dimension == -1)
+    /**
+     * Transfers an entity from a world to another world.
+     */
+    public void a(Entity var1, int var2, WorldServer var3, WorldServer var4, PortalTravelAgent var5)
         {
-            var5 /= var9;
-            var7 /= var9;
-            var1.setPositionRotation(var5, var1.locY, var7, var1.yaw, var1.pitch);
+        WorldProvider var6 = var3.worldProvider;
+        WorldProvider var7 = var4.worldProvider;
+        double var8 = var6.getMovementFactor() / var7.getMovementFactor();
+        double var10 = var1.locX * var8;
+        double var12 = var1.locZ * var8;
+        double var14 = var1.locX;
+        double var16 = var1.locY;
+        double var18 = var1.locZ;
+        float var20 = var1.yaw;
 
-            if (var1.isAlive())
+        if (var1.dimension == 1)
             {
-                var3.entityJoinedWorld(var1, false);
-            }
-        }
-        else if (var1.dimension == 0)
-        {
-            var5 *= var9;
-            var7 *= var9;
-            var1.setPositionRotation(var5, var1.locY, var7, var1.yaw, var1.pitch);
+            ChunkCoordinates var21;
 
-            if (var1.isAlive())
-            {
-                var3.entityJoinedWorld(var1, false);
-            }
-        }
-        else
-        {
-            ChunkCoordinates var18;
-
             if (var2 == 1)
             {
-                var18 = var4.getSpawn();
+                var21 = var4.getSpawn();
             }
             else
             {
-                var18 = var4.getDimensionSpawn();
+                var21 = var4.getDimensionSpawn();
             }
 
-            var5 = (double)var18.x;
-            var1.locY = (double)var18.y;
-            var7 = (double)var18.z;
-            var1.setPositionRotation(var5, var1.locY, var7, 90.0F, 0.0F);
+            var10 = (double)var21.x;
+            var1.locY = (double)var21.y;
+            var12 = (double)var21.z;
+            var1.setPositionRotation(var10, var1.locY, var12, 90.0F, 0.0F);
 
             if (var1.isAlive())
             {
@@ -443,15 +453,15 @@
 
         if (var2 != 1)
         {
-            var5 = (double)MathHelper.a((int)var5, -29999872, 29999872);
-            var7 = (double)MathHelper.a((int)var7, -29999872, 29999872);
+            var10 = (double)MathHelper.a((int)var10, -29999872, 29999872);
+            var12 = (double)MathHelper.a((int)var12, -29999872, 29999872);
 
             if (var1.isAlive())
             {
                 var4.addEntity(var1);
-                var1.setPositionRotation(var5, var1.locY, var7, var1.yaw, var1.pitch);
+                var1.setPositionRotation(var10, var1.locY, var12, var1.yaw, var1.pitch);
                 var4.entityJoinedWorld(var1, false);
-                (new PortalTravelAgent()).a(var4, var1, var11, var13, var15, var17);
+                var5.a(var4, var1, var14, var16, var18, var20);
             }
         }
 
@@ -588,20 +598,18 @@
     public EntityPlayer f(String var1)
     {
         Iterator var2 = this.players.iterator();
-        EntityPlayer var3;
 
-        do
+        while (var2.hasNext())
         {
-            if (!var2.hasNext())
+            EntityPlayer var3 = (EntityPlayer)var2.next();
+
+            if (var3.name.equalsIgnoreCase(var1))
             {
-                return null;
+                return var3;
             }
-
-            var3 = (EntityPlayer)var2.next();
         }
-        while (!var3.name.equalsIgnoreCase(var1));
 
-        return var3;
+        return null;
     }
 
     /**
@@ -837,6 +845,12 @@
         return null;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a(EnumGamemode var1)
+    {
+        this.m = var1;
+    }
+
     private void func_72381_a(EntityPlayer var1, EntityPlayer var2, World var3)
     {
         if (var2 != null)
@@ -851,6 +865,12 @@
         var1.itemInWorldManager.b(var3.getWorldData().getGameType());
     }
 
+    @SideOnly(Side.CLIENT)
+    public void b(boolean var1)
+    {
+        this.n = var1;
+    }
+
     /**
      * Kicks everyone with "Server closed" as reason.
      */
Index: SpawnerCreature.java
===================================================================
--- SpawnerCreature.java	(revision 3)
+++ SpawnerCreature.java	(working copy)
@@ -1,9 +1,13 @@
 package net.minecraft.server;
 
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.entity.living.LivingSpecialSpawnEvent;
 
 public final class SpawnerCreature
 {
@@ -39,13 +43,14 @@
         {
             b.clear();
             int var4;
-            int var7;
+            int var5;
+            ChunkCoordIntPair var12;
 
             for (var4 = 0; var4 < var0.players.size(); ++var4)
             {
-                EntityHuman var5 = (EntityHuman)var0.players.get(var4);
-                int var6 = MathHelper.floor(var5.locX / 16.0D);
-                var7 = MathHelper.floor(var5.locZ / 16.0D);
+                EntityHuman var6 = (EntityHuman)var0.players.get(var4);
+                int var7 = MathHelper.floor(var6.locX / 16.0D);
+                var5 = MathHelper.floor(var6.locZ / 16.0D);
                 byte var8 = 8;
 
                 for (int var9 = -var8; var9 <= var8; ++var9)
@@ -53,7 +58,7 @@
                     for (int var10 = -var8; var10 <= var8; ++var10)
                     {
                         boolean var11 = var9 == -var8 || var9 == var8 || var10 == -var8 || var10 == var8;
-                        ChunkCoordIntPair var12 = new ChunkCoordIntPair(var9 + var6, var10 + var7);
+                        var12 = new ChunkCoordIntPair(var9 + var7, var10 + var5);
 
                         if (!var11)
                         {
@@ -68,116 +73,119 @@
             }
 
             var4 = 0;
-            ChunkCoordinates var32 = var0.getSpawn();
-            EnumCreatureType[] var33 = EnumCreatureType.values();
-            var7 = var33.length;
+            ChunkCoordinates var35 = var0.getSpawn();
+            EnumCreatureType[] var36 = EnumCreatureType.values();
+            var5 = var36.length;
 
-            for (int var34 = 0; var34 < var7; ++var34)
+            for (int var37 = 0; var37 < var5; ++var37)
             {
-                EnumCreatureType var35 = var33[var34];
+                EnumCreatureType var38 = var36[var37];
 
-                if ((!var35.d() || var2) && (var35.d() || var1) && (!var35.e() || var3) && var0.a(var35.a()) <= var35.b() * b.size() / 256)
+                if ((!var38.d() || var2) && (var38.d() || var1) && (!var38.e() || var3) && var0.a(var38.a()) <= var38.b() * b.size() / 256)
                 {
-                    Iterator var37 = b.keySet().iterator();
-                    label110:
+                    Iterator var40 = b.keySet().iterator();
+                    ArrayList var39 = new ArrayList(b.keySet());
+                    Collections.shuffle(var39);
+                    var40 = var39.iterator();
+                    label104:
 
-                    while (var37.hasNext())
+                    while (var40.hasNext())
                     {
-                        ChunkCoordIntPair var36 = (ChunkCoordIntPair)var37.next();
+                        var12 = (ChunkCoordIntPair)var40.next();
 
-                        if (!((Boolean)b.get(var36)).booleanValue())
+                        if (!((Boolean)b.get(var12)).booleanValue())
                         {
-                            ChunkPosition var38 = getRandomPosition(var0, var36.x, var36.z);
-                            int var13 = var38.x;
-                            int var14 = var38.y;
-                            int var15 = var38.z;
+                            ChunkPosition var13 = getRandomPosition(var0, var12.x, var12.z);
+                            int var14 = var13.x;
+                            int var15 = var13.y;
+                            int var16 = var13.z;
 
-                            if (!var0.s(var13, var14, var15) && var0.getMaterial(var13, var14, var15) == var35.c())
+                            if (!var0.s(var14, var15, var16) && var0.getMaterial(var14, var15, var16) == var38.c())
                             {
-                                int var16 = 0;
                                 int var17 = 0;
+                                int var18 = 0;
 
-                                while (var17 < 3)
+                                while (var18 < 3)
                                 {
-                                    int var18 = var13;
                                     int var19 = var14;
                                     int var20 = var15;
-                                    byte var21 = 6;
-                                    BiomeMeta var22 = null;
-                                    int var23 = 0;
+                                    int var21 = var16;
+                                    byte var22 = 6;
+                                    BiomeMeta var23 = null;
+                                    int var24 = 0;
 
                                     while (true)
                                     {
-                                        if (var23 < 4)
+                                        if (var24 < 4)
                                         {
-                                            label103:
+                                            label97:
                                             {
-                                                var18 += var0.random.nextInt(var21) - var0.random.nextInt(var21);
-                                                var19 += var0.random.nextInt(1) - var0.random.nextInt(1);
-                                                var20 += var0.random.nextInt(var21) - var0.random.nextInt(var21);
+                                                var19 += var0.random.nextInt(var22) - var0.random.nextInt(var22);
+                                                var20 += var0.random.nextInt(1) - var0.random.nextInt(1);
+                                                var21 += var0.random.nextInt(var22) - var0.random.nextInt(var22);
 
-                                                if (a(var35, var0, var18, var19, var20))
+                                                if (a(var38, var0, var19, var20, var21))
                                                 {
-                                                    float var24 = (float)var18 + 0.5F;
-                                                    float var25 = (float)var19;
-                                                    float var26 = (float)var20 + 0.5F;
+                                                    float var25 = (float)var19 + 0.5F;
+                                                    float var26 = (float)var20;
+                                                    float var27 = (float)var21 + 0.5F;
 
-                                                    if (var0.findNearbyPlayer((double)var24, (double)var25, (double)var26, 24.0D) == null)
+                                                    if (var0.findNearbyPlayer((double)var25, (double)var26, (double)var27, 24.0D) == null)
                                                     {
-                                                        float var27 = var24 - (float)var32.x;
-                                                        float var28 = var25 - (float)var32.y;
-                                                        float var29 = var26 - (float)var32.z;
-                                                        float var30 = var27 * var27 + var28 * var28 + var29 * var29;
+                                                        float var28 = var25 - (float)var35.x;
+                                                        float var29 = var26 - (float)var35.y;
+                                                        float var30 = var27 - (float)var35.z;
+                                                        float var31 = var28 * var28 + var29 * var29 + var30 * var30;
 
-                                                        if (var30 >= 576.0F)
+                                                        if (var31 >= 576.0F)
                                                         {
-                                                            if (var22 == null)
+                                                            if (var23 == null)
                                                             {
-                                                                var22 = var0.a(var35, var18, var19, var20);
+                                                                var23 = var0.a(var38, var19, var20, var21);
 
-                                                                if (var22 == null)
+                                                                if (var23 == null)
                                                                 {
-                                                                    break label103;
+                                                                    break label97;
                                                                 }
                                                             }
 
-                                                            EntityLiving var39;
+                                                            EntityLiving var32;
 
                                                             try
                                                             {
-                                                                var39 = (EntityLiving)var22.b.getConstructor(new Class[] {World.class}).newInstance(new Object[] {var0});
+                                                                var32 = (EntityLiving)var23.b.getConstructor(new Class[] {World.class}).newInstance(new Object[] {var0});
                                                             }
-                                                            catch (Exception var31)
+                                                            catch (Exception var34)
                                                             {
-                                                                var31.printStackTrace();
+                                                                var34.printStackTrace();
                                                                 return var4;
                                                             }
 
-                                                            var39.setPositionRotation((double)var24, (double)var25, (double)var26, var0.random.nextFloat() * 360.0F, 0.0F);
+                                                            var32.setPositionRotation((double)var25, (double)var26, (double)var27, var0.random.nextFloat() * 360.0F, 0.0F);
 
-                                                            if (var39.canSpawn())
+                                                            if (var32.canSpawn())
                                                             {
-                                                                ++var16;
-                                                                var0.addEntity(var39);
-                                                                a(var39, var0, var24, var25, var26);
+                                                                ++var17;
+                                                                var0.addEntity(var32);
+                                                                a(var32, var0, var25, var26, var27);
 
-                                                                if (var16 >= var39.bs())
+                                                                if (var17 >= var32.bs())
                                                                 {
-                                                                    continue label110;
+                                                                    continue label104;
                                                                 }
                                                             }
 
-                                                            var4 += var16;
+                                                            var4 += var17;
                                                         }
                                                     }
                                                 }
 
-                                                ++var23;
+                                                ++var24;
                                                 continue;
                                             }
                                         }
 
-                                        ++var17;
+                                        ++var18;
                                         break;
                                     }
                                 }
@@ -207,7 +215,8 @@
         else
         {
             int var5 = var1.getTypeId(var2, var3 - 1, var4);
-            return var5 != Block.BEDROCK.id && !var1.s(var2, var3, var4) && !var1.getMaterial(var2, var3, var4).isLiquid() && !var1.s(var2, var3 + 1, var4);
+            boolean var6 = Block.byId[var5] != null && Block.byId[var5].canCreatureSpawn(var0, var1, var2, var3 - 1, var4);
+            return var6 && var5 != Block.BEDROCK.id && !var1.s(var2, var3, var4) && !var1.getMaterial(var2, var3, var4).isLiquid() && !var1.s(var2, var3 + 1, var4);
         }
     }
 
@@ -216,8 +225,11 @@
      */
     private static void a(EntityLiving var0, World var1, float var2, float var3, float var4)
     {
+        if (!MinecraftForge.EVENT_BUS.post(new LivingSpecialSpawnEvent(var0, var1, var2, var3, var4)))
+        {
         var0.bD();
     }
+    }
 
     /**
      * Called during chunk generation to spawn initial creatures.
Index: TileEntity.java
===================================================================
--- TileEntity.java	(revision 3)
+++ TileEntity.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -16,7 +18,7 @@
     private static Map b = new HashMap();
 
     /** The reference to the world. */
-    protected World world;
+    public World world;
 
     /** The x coordinate of the tile entity. */
     public int x;
@@ -35,7 +37,7 @@
     /**
      * Adds a new two-way mapping between the class and its string name in both hashmaps.
      */
-    private static void a(Class var0, String var1)
+    public static void a(Class var0, String var1)
     {
         if (a.containsKey(var1))
         {
@@ -48,6 +50,12 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public World n()
+    {
+        return this.world;
+    }
+
     /**
      * Sets the worldObj for this tileEntity.
      */
@@ -155,6 +163,21 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public double a(double var1, double var3, double var5)
+    {
+        double var7 = (double)this.x + 0.5D - var1;
+        double var9 = (double)this.y + 0.5D - var3;
+        double var11 = (double)this.z + 0.5D - var5;
+        return var7 * var7 + var9 * var9 + var11 * var11;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public double m()
+    {
+        return 4096.0D;
+    }
+
     public Block func_70311_o()
     {
         if (this.q == null)
@@ -212,6 +235,15 @@
         this.p = -1;
     }
 
+    public boolean canUpdate()
+    {
+        return true;
+    }
+
+    public void onDataPacket(INetworkManager var1, Packet132TileEntityData var2) {}
+
+    public void onChunkUnload() {}
+
     static
     {
         a(TileEntityFurnace.class, "Furnace");
Index: TileEntityBeacon.java
===================================================================
--- TileEntityBeacon.java	(revision 3)
+++ TileEntityBeacon.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.Iterator;
 import java.util.List;
 
@@ -7,6 +9,10 @@
 {
     /** List of effects that Beacon can apply */
     public static final MobEffectList[][] a = new MobEffectList[][] {{MobEffectList.FASTER_MOVEMENT, MobEffectList.FASTER_DIG}, {MobEffectList.RESISTANCE, MobEffectList.JUMP}, {MobEffectList.INCREASE_DAMAGE}, {MobEffectList.REGENERATION}};
+    @SideOnly(Side.CLIENT)
+    private long b;
+    @SideOnly(Side.CLIENT)
+    private float c;
     private boolean field_82135_d;
 
     /** Level of this beacon's pyramid. */
@@ -120,6 +126,39 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public float v_()
+    {
+        if (!this.field_82135_d)
+        {
+            return 0.0F;
+        }
+        else
+        {
+            int var1 = (int)(this.world.getTime() - this.b);
+            this.b = this.world.getTime();
+
+            if (var1 > 1)
+            {
+                this.c -= (float)var1 / 40.0F;
+
+                if (this.c < 0.0F)
+                {
+                    this.c = 0.0F;
+                }
+            }
+
+            this.c += 0.025F;
+
+            if (this.c > 1.0F)
+            {
+                this.c = 1.0F;
+            }
+
+            return this.c;
+        }
+    }
+
     /**
      * Return the primary potion effect given by this beacon.
      */
@@ -144,6 +183,12 @@
         return this.e;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void c(int var1)
+    {
+        this.e = var1;
+    }
+
     public void func_82128_d(int var1)
     {
         this.f = 0;
@@ -201,6 +246,12 @@
         return new Packet132TileEntityData(this.x, this.y, this.z, 3, var1);
     }
 
+    @SideOnly(Side.CLIENT)
+    public double m()
+    {
+        return 65536.0D;
+    }
+
     /**
      * Reads a tile entity from NBT.
      */
Index: TileEntityBrewingStand.java
===================================================================
--- TileEntityBrewingStand.java	(revision 3)
+++ TileEntityBrewingStand.java	(working copy)
@@ -1,8 +1,12 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.List;
+import net.minecraftforge.common.ForgeDirection;
+import net.minecraftforge.common.ISidedInventory;
 
-public class TileEntityBrewingStand extends TileEntity implements IInventory
+public class TileEntityBrewingStand extends TileEntity implements IInventory, ISidedInventory
 {
     /** The itemstacks currently placed in the slots of the brewing stand */
     private ItemStack[] items = new ItemStack[4];
@@ -156,7 +160,7 @@
 
             if (Item.byId[var1.id].s())
             {
-                this.items[3] = new ItemStack(Item.byId[var1.id].r());
+                this.items[3] = Item.byId[var1.id].getContainerItemStack(this.items[3]);
             }
             else
             {
@@ -300,6 +304,12 @@
 
     public void f() {}
 
+    @SideOnly(Side.CLIENT)
+    public void c(int var1)
+    {
+        this.brewTime = var1;
+    }
+
     /**
      * returns an integer with each bit specifying wether that slot of the stand contains a potion
      */
@@ -317,4 +327,14 @@
 
         return var1;
     }
+
+    public int getStartInventorySide(ForgeDirection var1)
+    {
+        return var1 == ForgeDirection.UP ? 3 : 0;
 }
+
+    public int getSizeInventorySide(ForgeDirection var1)
+    {
+        return var1 == ForgeDirection.UP ? 1 : 3;
+    }
+}
Index: TileEntityFurnace.java
===================================================================
--- TileEntityFurnace.java	(revision 3)
+++ TileEntityFurnace.java	(working copy)
@@ -1,6 +1,12 @@
 package net.minecraft.server;
 
-public class TileEntityFurnace extends TileEntity implements IInventory
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import cpw.mods.fml.common.registry.GameRegistry;
+import net.minecraftforge.common.ForgeDirection;
+import net.minecraftforge.common.ISidedInventory;
+
+public class TileEntityFurnace extends TileEntity implements IInventory, ISidedInventory
 {
     /**
      * The ItemStacks that hold the items currently being used in the furnace
@@ -165,6 +171,23 @@
         return 64;
     }
 
+    @SideOnly(Side.CLIENT)
+    public int c(int var1)
+    {
+        return this.cookTime * var1 / 200;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public int d(int var1)
+    {
+        if (this.ticksForCurrentFuel == 0)
+        {
+            this.ticksForCurrentFuel = 200;
+        }
+
+        return this.burnTime * var1 / this.ticksForCurrentFuel;
+    }
+
     /**
      * Returns true if the furnace is currently burning
      */
@@ -203,8 +226,7 @@
 
                         if (this.items[1].count == 0)
                         {
-                            Item var3 = this.items[1].getItem().r();
-                            this.items[1] = var3 != null ? new ItemStack(var3) : null;
+                            this.items[1] = this.items[1].getItem().getContainerItemStack(this.items[1]);
                         }
                     }
                 }
@@ -250,10 +272,27 @@
         }
         else
         {
-            ItemStack var1 = RecipesFurnace.getInstance().getResult(this.items[0].getItem().id);
-            return var1 == null ? false : (this.items[2] == null ? true : (!this.items[2].doMaterialsMatch(var1) ? false : (this.items[2].count < this.getMaxStackSize() && this.items[2].count < this.items[2].getMaxStackSize() ? true : this.items[2].count < var1.getMaxStackSize())));
+            ItemStack var1 = RecipesFurnace.getInstance().getSmeltingResult(this.items[0]);
+
+            if (var1 == null)
+            {
+                return false;
         }
+            else if (this.items[2] == null)
+            {
+                return true;
     }
+            else if (!this.items[2].doMaterialsMatch(var1))
+            {
+                return false;
+            }
+            else
+            {
+                int var2 = this.items[2].count + var1.count;
+                return var2 <= this.getMaxStackSize() && var2 <= var1.getMaxStackSize();
+            }
+        }
+    }
 
     /**
      * Turn one item from the furnace source stack into the appropriate smelted item in the furnace result stack
@@ -262,15 +301,15 @@
     {
         if (this.canBurn())
         {
-            ItemStack var1 = RecipesFurnace.getInstance().getResult(this.items[0].getItem().id);
+            ItemStack var1 = RecipesFurnace.getInstance().getSmeltingResult(this.items[0]);
 
             if (this.items[2] == null)
             {
                 this.items[2] = var1.cloneItemStack();
             }
-            else if (this.items[2].id == var1.id)
+            else if (this.items[2].doMaterialsMatch(var1))
             {
-                ++this.items[2].count;
+                this.items[2].count += var1.count;
             }
 
             --this.items[0].count;
@@ -297,7 +336,7 @@
             int var1 = var0.getItem().id;
             Item var2 = var0.getItem();
 
-            if (var1 < 256 && Block.byId[var1] != null)
+            if (var0.getItem() instanceof ItemBlock && Block.byId[var1] != null)
             {
                 Block var3 = Block.byId[var1];
 
@@ -312,7 +351,7 @@
                 }
             }
 
-            return var2 instanceof ItemTool && ((ItemTool)var2).g().equals("WOOD") ? 200 : (var2 instanceof ItemSword && ((ItemSword)var2).func_77825_f().equals("WOOD") ? 200 : (var2 instanceof ItemHoe && ((ItemHoe)var2).func_77842_f().equals("WOOD") ? 200 : (var1 == Item.STICK.id ? 100 : (var1 == Item.COAL.id ? 1600 : (var1 == Item.LAVA_BUCKET.id ? 20000 : (var1 == Block.SAPLING.id ? 100 : (var1 == Item.BLAZE_ROD.id ? 2400 : 0)))))));
+            return var2 instanceof ItemTool && ((ItemTool)var2).g().equals("WOOD") ? 200 : (var2 instanceof ItemSword && ((ItemSword)var2).func_77825_f().equals("WOOD") ? 200 : (var2 instanceof ItemHoe && ((ItemHoe)var2).func_77842_f().equals("WOOD") ? 200 : (var1 == Item.STICK.id ? 100 : (var1 == Item.COAL.id ? 1600 : (var1 == Item.LAVA_BUCKET.id ? 20000 : (var1 == Block.SAPLING.id ? 100 : (var1 == Item.BLAZE_ROD.id ? 2400 : GameRegistry.getFuelValue(var0))))))));
         }
     }
 
@@ -335,4 +374,14 @@
     public void startOpen() {}
 
     public void f() {}
+
+    public int getStartInventorySide(ForgeDirection var1)
+    {
+        return var1 == ForgeDirection.DOWN ? 1 : (var1 == ForgeDirection.UP ? 0 : 2);
 }
+
+    public int getSizeInventorySide(ForgeDirection var1)
+    {
+        return 1;
+    }
+}
Index: World.java
===================================================================
--- World.java	(revision 3)
+++ World.java	(working copy)
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import com.google.common.collect.ImmutableSetMultimap;
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Collection;
@@ -8,9 +11,19 @@
 import java.util.List;
 import java.util.Random;
 import java.util.Set;
+import net.minecraftforge.common.ForgeChunkManager;
+import net.minecraftforge.common.ForgeDirection;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.common.WorldSpecificSaveHandler;
+import net.minecraftforge.event.entity.EntityEvent$CanUpdate;
+import net.minecraftforge.event.entity.EntityJoinWorldEvent;
+import net.minecraftforge.event.entity.PlaySoundAtEntityEvent;
 
 public abstract class World implements IBlockAccess
 {
+    public static double MAX_ENTITY_RADIUS = 2.0D;
+    public final WorldMapCollection perWorldStorage;
+
     /**
      * boolean; if true updates scheduled by scheduleBlockUpdate happen immediately
      */
@@ -92,7 +105,7 @@
      */
     public boolean isLoading;
     public WorldMapCollection worldMaps;
-    public final VillageCollection villages;
+    public VillageCollection villages;
     protected final VillageSiege siegeManager = new VillageSiege(this);
     public final MethodProfiler methodProfiler;
     private final Vec3DPool field_82741_K = new Vec3DPool(300, 2000);
@@ -107,7 +120,7 @@
     protected boolean allowAnimals = true;
 
     /** populated by chunks that are within 9 chunks of any player */
-    protected Set chunkTickList = new HashSet();
+    public Set chunkTickList = new HashSet();
 
     /** number of ticks until the next random ambients play */
     private int O;
@@ -130,12 +143,19 @@
      * This is set to true when you are a client connected to a multiplayer world, false otherwise.
      */
     public boolean isStatic;
+    private static WorldMapCollection s_mapStorage;
+    private static IDataManager s_savehandler;
 
     /**
      * Gets the biome for a given set of x/z coordinates
      */
     public BiomeBase getBiome(int var1, int var2)
     {
+        return this.worldProvider.getBiomeGenForCoords(var1, var2);
+    }
+
+    public BiomeBase getBiomeGenForCoordsBody(int var1, int var2)
+    {
         if (this.isLoaded(var1, 0, var2))
         {
             Chunk var3 = this.getChunkAtWorldCoords(var1, var2);
@@ -154,6 +174,42 @@
         return this.worldProvider.d;
     }
 
+    @SideOnly(Side.CLIENT)
+    public World(IDataManager var1, String var2, WorldProvider var3, WorldSettings var4, MethodProfiler var5)
+    {
+        this.O = this.random.nextInt(12000);
+        this.I = new int[32768];
+        this.P = new ArrayList();
+        this.isStatic = false;
+        this.dataManager = var1;
+        this.methodProfiler = var5;
+        this.worldData = new WorldData(var4, var2);
+        this.worldProvider = var3;
+        this.perWorldStorage = new WorldMapCollection((IDataManager)null);
+    }
+
+    @SideOnly(Side.CLIENT)
+    protected void finishSetup()
+    {
+        VillageCollection var1 = (VillageCollection)this.worldMaps.get(VillageCollection.class, "villages");
+
+        if (var1 == null)
+        {
+            this.villages = new VillageCollection(this);
+            this.worldMaps.a("villages", this.villages);
+        }
+        else
+        {
+            this.villages = var1;
+            this.villages.func_82566_a(this);
+        }
+
+        this.worldProvider.a(this);
+        this.chunkProvider = this.j();
+        this.w();
+        this.a();
+    }
+
     public World(IDataManager var1, String var2, WorldSettings var3, WorldProvider var4, MethodProfiler var5)
     {
         this.O = this.random.nextInt(12000);
@@ -162,7 +218,7 @@
         this.isStatic = false;
         this.dataManager = var1;
         this.methodProfiler = var5;
-        this.worldMaps = new WorldMapCollection(var1);
+        this.worldMaps = this.getMapStorage(var1);
         this.worldData = var1.getWorldData();
 
         if (var4 != null)
@@ -196,12 +252,13 @@
             this.worldData.d(true);
         }
 
-        VillageCollection var6 = (VillageCollection)this.worldMaps.get(VillageCollection.class, "villages");
+        this.perWorldStorage = new WorldMapCollection(new WorldSpecificSaveHandler((WorldServer)this, var1));
+        VillageCollection var6 = (VillageCollection)this.perWorldStorage.get(VillageCollection.class, "villages");
 
         if (var6 == null)
         {
             this.villages = new VillageCollection(this);
-            this.worldMaps.a("villages", this.villages);
+            this.perWorldStorage.a("villages", this.villages);
         }
         else
         {
@@ -213,6 +270,17 @@
         this.a();
     }
 
+    private WorldMapCollection getMapStorage(IDataManager var1)
+    {
+        if (s_savehandler != var1 || s_mapStorage == null)
+        {
+            s_mapStorage = new WorldMapCollection(var1);
+            s_savehandler = var1;
+        }
+
+        return s_mapStorage;
+    }
+
     /**
      * Creates the chunk provider for this world. Called in the constructor. Retrieves provider from worldProvider?
      */
@@ -223,6 +291,12 @@
         this.worldData.d(true);
     }
 
+    @SideOnly(Side.CLIENT)
+    public void f()
+    {
+        this.A(8, 64, 8);
+    }
+
     /**
      * Returns the block ID of the first block at this (x,z) location with air above it, searching from sea level
      * upwards.
@@ -257,7 +331,8 @@
      */
     public boolean isEmpty(int var1, int var2, int var3)
     {
-        return this.getTypeId(var1, var2, var3) == 0;
+        int var4 = this.getTypeId(var1, var2, var3);
+        return var4 == 0 || Block.byId[var4] == null || Block.byId[var4].isAirBlock(this, var1, var2, var3);
     }
 
     /**
@@ -266,7 +341,8 @@
     public boolean isTileEntity(int var1, int var2, int var3)
     {
         int var4 = this.getTypeId(var1, var2, var3);
-        return Block.byId[var4] != null && Block.byId[var4].u();
+        int var5 = this.getData(var1, var2, var3);
+        return Block.byId[var4] != null && Block.byId[var4].hasTileEntity(var5);
     }
 
     /**
@@ -788,6 +864,76 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public int a(EnumSkyBlock var1, int var2, int var3, int var4)
+    {
+        if (this.worldProvider.f && var1 == EnumSkyBlock.Sky)
+        {
+            return 0;
+        }
+        else
+        {
+            if (var3 < 0)
+            {
+                var3 = 0;
+            }
+
+            if (var3 >= 256)
+            {
+                return var1.c;
+            }
+            else if (var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000)
+            {
+                int var5 = var2 >> 4;
+                int var6 = var4 >> 4;
+
+                if (!this.isChunkLoaded(var5, var6))
+                {
+                    return var1.c;
+                }
+                else if (Block.v[this.getTypeId(var2, var3, var4)])
+                {
+                    int var12 = this.b(var1, var2, var3 + 1, var4);
+                    int var8 = this.b(var1, var2 + 1, var3, var4);
+                    int var9 = this.b(var1, var2 - 1, var3, var4);
+                    int var10 = this.b(var1, var2, var3, var4 + 1);
+                    int var11 = this.b(var1, var2, var3, var4 - 1);
+
+                    if (var8 > var12)
+                    {
+                        var12 = var8;
+                    }
+
+                    if (var9 > var12)
+                    {
+                        var12 = var9;
+                    }
+
+                    if (var10 > var12)
+                    {
+                        var12 = var10;
+                    }
+
+                    if (var11 > var12)
+                    {
+                        var12 = var11;
+                    }
+
+                    return var12;
+                }
+                else
+                {
+                    Chunk var7 = this.getChunkAt(var5, var6);
+                    return var7.getBrightness(var1, var2 & 15, var3, var4 & 15);
+                }
+            }
+            else
+            {
+                return var1.c;
+            }
+        }
+    }
+
     /**
      * Returns saved light value without taking into account the time of day.  Either looks in the sky light map or
      * block light map based on the enumSkyBlock arg.
@@ -831,14 +977,8 @@
      */
     public void b(EnumSkyBlock var1, int var2, int var3, int var4, int var5)
     {
-        if (var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000)
+        if (var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000 && var3 >= 0 && var3 < 256 && this.isChunkLoaded(var2 >> 4, var4 >> 4))
         {
-            if (var3 >= 0)
-            {
-                if (var3 < 256)
-                {
-                    if (this.isChunkLoaded(var2 >> 4, var4 >> 4))
-                    {
                         Chunk var6 = this.getChunkAt(var2 >> 4, var4 >> 4);
                         var6.a(var1, var2 & 15, var3, var4 & 15, var5);
                         Iterator var7 = this.w.iterator();
@@ -850,9 +990,6 @@
                         }
                     }
                 }
-            }
-        }
-    }
 
     public void func_72902_n(int var1, int var2, int var3)
     {
@@ -865,6 +1002,33 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public int i(int var1, int var2, int var3, int var4)
+    {
+        int var5 = this.a(EnumSkyBlock.Sky, var1, var2, var3);
+        int var6 = this.a(EnumSkyBlock.Block, var1, var2, var3);
+
+        if (var6 < var4)
+        {
+            var6 = var4;
+        }
+
+        return var5 << 20 | var6 << 4;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public float j(int var1, int var2, int var3, int var4)
+    {
+        int var5 = this.getLightLevel(var1, var2, var3);
+
+        if (var5 < var4)
+        {
+            var5 = var4;
+        }
+
+        return this.worldProvider.g[var5];
+    }
+
     /**
      * Returns how bright the block is shown as which is the block's light value looked up in a lookup table (light
      * values aren't linear for brightness). Args: x, y, z
@@ -879,7 +1043,7 @@
      */
     public boolean t()
     {
-        return this.j < 4;
+        return this.worldProvider.isDaytime();
     }
 
     /**
@@ -911,7 +1075,7 @@
                 int var12 = this.getData(var8, var9, var10);
                 Block var13 = Block.byId[var11];
 
-                if ((!var4 || var13 == null || var13.e(this, var8, var9, var10) != null) && var11 > 0 && var13.a(var12, var3))
+                if (var13 != null && (!var4 || var13 == null || var13.e(this, var8, var9, var10) != null) && var11 > 0 && var13.a(var12, var3))
                 {
                     MovingObjectPosition var14 = var13.a(this, var8, var9, var10, var1, var2);
 
@@ -935,159 +1099,159 @@
                         return null;
                     }
 
-                    boolean var39 = true;
-                    boolean var40 = true;
-                    boolean var41 = true;
-                    double var15 = 999.0D;
+                    boolean var42 = true;
+                    boolean var15 = true;
+                    boolean var16 = true;
                     double var17 = 999.0D;
                     double var19 = 999.0D;
+                    double var21 = 999.0D;
 
                     if (var5 > var8)
                     {
-                        var15 = (double)var8 + 1.0D;
+                        var17 = (double)var8 + 1.0D;
                     }
                     else if (var5 < var8)
                     {
-                        var15 = (double)var8 + 0.0D;
+                        var17 = (double)var8 + 0.0D;
                     }
                     else
                     {
-                        var39 = false;
+                        var42 = false;
                     }
 
                     if (var6 > var9)
                     {
-                        var17 = (double)var9 + 1.0D;
+                        var19 = (double)var9 + 1.0D;
                     }
                     else if (var6 < var9)
                     {
-                        var17 = (double)var9 + 0.0D;
+                        var19 = (double)var9 + 0.0D;
                     }
                     else
                     {
-                        var40 = false;
+                        var15 = false;
                     }
 
                     if (var7 > var10)
                     {
-                        var19 = (double)var10 + 1.0D;
+                        var21 = (double)var10 + 1.0D;
                     }
                     else if (var7 < var10)
                     {
-                        var19 = (double)var10 + 0.0D;
+                        var21 = (double)var10 + 0.0D;
                     }
                     else
                     {
-                        var41 = false;
+                        var16 = false;
                     }
 
-                    double var21 = 999.0D;
                     double var23 = 999.0D;
                     double var25 = 999.0D;
-                    double var27 = var2.c - var1.c;
-                    double var29 = var2.d - var1.d;
-                    double var31 = var2.e - var1.e;
+                    double var27 = 999.0D;
+                    double var29 = var2.c - var1.c;
+                    double var31 = var2.d - var1.d;
+                    double var33 = var2.e - var1.e;
 
-                    if (var39)
+                    if (var42)
                     {
-                        var21 = (var15 - var1.c) / var27;
+                        var23 = (var17 - var1.c) / var29;
                     }
 
-                    if (var40)
+                    if (var15)
                     {
-                        var23 = (var17 - var1.d) / var29;
+                        var25 = (var19 - var1.d) / var31;
                     }
 
-                    if (var41)
+                    if (var16)
                     {
-                        var25 = (var19 - var1.e) / var31;
+                        var27 = (var21 - var1.e) / var33;
                     }
 
-                    boolean var33 = false;
-                    byte var42;
+                    boolean var35 = false;
+                    byte var36;
 
-                    if (var21 < var23 && var21 < var25)
+                    if (var23 < var25 && var23 < var27)
                     {
                         if (var5 > var8)
                         {
-                            var42 = 4;
+                            var36 = 4;
                         }
                         else
                         {
-                            var42 = 5;
+                            var36 = 5;
                         }
 
-                        var1.c = var15;
-                        var1.d += var29 * var21;
-                        var1.e += var31 * var21;
+                        var1.c = var17;
+                        var1.d += var31 * var23;
+                        var1.e += var33 * var23;
                     }
-                    else if (var23 < var25)
+                    else if (var25 < var27)
                     {
                         if (var6 > var9)
                         {
-                            var42 = 0;
+                            var36 = 0;
                         }
                         else
                         {
-                            var42 = 1;
+                            var36 = 1;
                         }
 
-                        var1.c += var27 * var23;
-                        var1.d = var17;
-                        var1.e += var31 * var23;
+                        var1.c += var29 * var25;
+                        var1.d = var19;
+                        var1.e += var33 * var25;
                     }
                     else
                     {
                         if (var7 > var10)
                         {
-                            var42 = 2;
+                            var36 = 2;
                         }
                         else
                         {
-                            var42 = 3;
+                            var36 = 3;
                         }
 
-                        var1.c += var27 * var25;
-                        var1.d += var29 * var25;
-                        var1.e = var19;
+                        var1.c += var29 * var27;
+                        var1.d += var31 * var27;
+                        var1.e = var21;
                     }
 
-                    Vec3D var34 = this.getVec3DPool().create(var1.c, var1.d, var1.e);
-                    var8 = (int)(var34.c = (double)MathHelper.floor(var1.c));
+                    Vec3D var37 = this.getVec3DPool().create(var1.c, var1.d, var1.e);
+                    var8 = (int)(var37.c = (double)MathHelper.floor(var1.c));
 
-                    if (var42 == 5)
+                    if (var36 == 5)
                     {
                         --var8;
-                        ++var34.c;
+                        ++var37.c;
                     }
 
-                    var9 = (int)(var34.d = (double)MathHelper.floor(var1.d));
+                    var9 = (int)(var37.d = (double)MathHelper.floor(var1.d));
 
-                    if (var42 == 1)
+                    if (var36 == 1)
                     {
                         --var9;
-                        ++var34.d;
+                        ++var37.d;
                     }
 
-                    var10 = (int)(var34.e = (double)MathHelper.floor(var1.e));
+                    var10 = (int)(var37.e = (double)MathHelper.floor(var1.e));
 
-                    if (var42 == 3)
+                    if (var36 == 3)
                     {
                         --var10;
-                        ++var34.e;
+                        ++var37.e;
                     }
 
-                    int var35 = this.getTypeId(var8, var9, var10);
-                    int var36 = this.getData(var8, var9, var10);
-                    Block var37 = Block.byId[var35];
+                    int var38 = this.getTypeId(var8, var9, var10);
+                    int var39 = this.getData(var8, var9, var10);
+                    Block var40 = Block.byId[var38];
 
-                    if ((!var4 || var37 == null || var37.e(this, var8, var9, var10) != null) && var35 > 0 && var37.a(var36, var3))
+                    if ((!var4 || var40 == null || var40.e(this, var8, var9, var10) != null) && var38 > 0 && var40.a(var39, var3))
                     {
-                        MovingObjectPosition var38 = var37.a(this, var8, var9, var10, var1, var2);
+                        MovingObjectPosition var41 = var40.a(this, var8, var9, var10, var1, var2);
 
-                        if (var38 != null)
+                        if (var41 != null)
                         {
-                            return var38;
+                            return var41;
                         }
                     }
                 }
@@ -1111,17 +1275,24 @@
      */
     public void makeSound(Entity var1, String var2, float var3, float var4)
     {
+        PlaySoundAtEntityEvent var5 = new PlaySoundAtEntityEvent(var1, var2, var3, var4);
+
+        if (!MinecraftForge.EVENT_BUS.post(var5))
+        {
+            var2 = var5.name;
+
         if (var1 != null && var2 != null)
         {
-            Iterator var5 = this.w.iterator();
+                Iterator var6 = this.w.iterator();
 
-            while (var5.hasNext())
+                while (var6.hasNext())
             {
-                IWorldAccess var6 = (IWorldAccess)var5.next();
-                var6.a(var2, var1.locX, var1.locY - (double)var1.height, var1.locZ, var3, var4);
+                    IWorldAccess var7 = (IWorldAccess)var6.next();
+                    var7.a(var2, var1.locX, var1.locY - (double)var1.height, var1.locZ, var3, var4);
             }
         }
     }
+    }
 
     /**
      * Play a sound effect. Many many parameters for this function. Not sure what they do, but a classic call is :
@@ -1208,12 +1379,19 @@
                 this.everyoneSleeping();
             }
 
+            if (!var4 && MinecraftForge.EVENT_BUS.post(new EntityJoinWorldEvent(var1, this)))
+            {
+                return false;
+            }
+            else
+            {
             this.getChunkAt(var2, var3).a(var1);
             this.entityList.add(var1);
             this.a(var1);
             return true;
         }
     }
+    }
 
     /**
      * Start the skin for this entity downloading, if necessary, and increment its reference counter
@@ -1419,6 +1597,109 @@
         return (int)(var3 * 11.0F);
     }
 
+    @SideOnly(Side.CLIENT)
+    public void b(IWorldAccess var1)
+    {
+        this.w.remove(var1);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public float b(float var1)
+    {
+        float var2 = this.c(var1);
+        float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.2F);
+
+        if (var3 < 0.0F)
+        {
+            var3 = 0.0F;
+        }
+
+        if (var3 > 1.0F)
+        {
+            var3 = 1.0F;
+        }
+
+        var3 = 1.0F - var3;
+        var3 = (float)((double)var3 * (1.0D - (double)(this.j(var1) * 5.0F) / 16.0D));
+        var3 = (float)((double)var3 * (1.0D - (double)(this.i(var1) * 5.0F) / 16.0D));
+        return var3 * 0.8F + 0.2F;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public Vec3D a(Entity var1, float var2)
+    {
+        return this.worldProvider.getSkyColor(var1, var2);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public Vec3D getSkyColorBody(Entity var1, float var2)
+    {
+        float var3 = this.c(var2);
+        float var4 = MathHelper.cos(var3 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
+
+        if (var4 < 0.0F)
+        {
+            var4 = 0.0F;
+        }
+
+        if (var4 > 1.0F)
+        {
+            var4 = 1.0F;
+        }
+
+        int var5 = MathHelper.floor(var1.locX);
+        int var6 = MathHelper.floor(var1.locZ);
+        BiomeBase var7 = this.getBiome(var5, var6);
+        float var8 = var7.j();
+        int var9 = var7.a(var8);
+        float var10 = (float)(var9 >> 16 & 255) / 255.0F;
+        float var11 = (float)(var9 >> 8 & 255) / 255.0F;
+        float var12 = (float)(var9 & 255) / 255.0F;
+        var10 *= var4;
+        var11 *= var4;
+        var12 *= var4;
+        float var13 = this.j(var2);
+        float var14;
+        float var15;
+
+        if (var13 > 0.0F)
+        {
+            var14 = (var10 * 0.3F + var11 * 0.59F + var12 * 0.11F) * 0.6F;
+            var15 = 1.0F - var13 * 0.75F;
+            var10 = var10 * var15 + var14 * (1.0F - var15);
+            var11 = var11 * var15 + var14 * (1.0F - var15);
+            var12 = var12 * var15 + var14 * (1.0F - var15);
+        }
+
+        var14 = this.i(var2);
+
+        if (var14 > 0.0F)
+        {
+            var15 = (var10 * 0.3F + var11 * 0.59F + var12 * 0.11F) * 0.2F;
+            float var16 = 1.0F - var14 * 0.75F;
+            var10 = var10 * var16 + var15 * (1.0F - var16);
+            var11 = var11 * var16 + var15 * (1.0F - var16);
+            var12 = var12 * var16 + var15 * (1.0F - var16);
+        }
+
+        if (this.r > 0)
+        {
+            var15 = (float)this.r - var2;
+
+            if (var15 > 1.0F)
+            {
+                var15 = 1.0F;
+            }
+
+            var15 *= 0.45F;
+            var10 = var10 * (1.0F - var15) + 0.8F * var15;
+            var11 = var11 * (1.0F - var15) + 0.8F * var15;
+            var12 = var12 * (1.0F - var15) + 1.0F * var15;
+        }
+
+        return this.getVec3DPool().create((double)var10, (double)var11, (double)var12);
+    }
+
     /**
      * calls calculateCelestialAngle
      */
@@ -1427,6 +1708,81 @@
         return this.worldProvider.a(this.worldData.g(), var1);
     }
 
+    @SideOnly(Side.CLIENT)
+    public int d(float var1)
+    {
+        return this.worldProvider.b(this.worldData.g(), var1);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public float e(float var1)
+    {
+        float var2 = this.c(var1);
+        return var2 * (float)Math.PI * 2.0F;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public Vec3D f(float var1)
+    {
+        return this.worldProvider.drawClouds(var1);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public Vec3D drawCloudsBody(float var1)
+    {
+        float var2 = this.c(var1);
+        float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
+
+        if (var3 < 0.0F)
+        {
+            var3 = 0.0F;
+        }
+
+        if (var3 > 1.0F)
+        {
+            var3 = 1.0F;
+        }
+
+        float var4 = (float)(this.c >> 16 & 255L) / 255.0F;
+        float var5 = (float)(this.c >> 8 & 255L) / 255.0F;
+        float var6 = (float)(this.c & 255L) / 255.0F;
+        float var7 = this.j(var1);
+        float var8;
+        float var9;
+
+        if (var7 > 0.0F)
+        {
+            var8 = (var4 * 0.3F + var5 * 0.59F + var6 * 0.11F) * 0.6F;
+            var9 = 1.0F - var7 * 0.95F;
+            var4 = var4 * var9 + var8 * (1.0F - var9);
+            var5 = var5 * var9 + var8 * (1.0F - var9);
+            var6 = var6 * var9 + var8 * (1.0F - var9);
+        }
+
+        var4 *= var3 * 0.9F + 0.1F;
+        var5 *= var3 * 0.9F + 0.1F;
+        var6 *= var3 * 0.85F + 0.15F;
+        var8 = this.i(var1);
+
+        if (var8 > 0.0F)
+        {
+            var9 = (var4 * 0.3F + var5 * 0.59F + var6 * 0.11F) * 0.2F;
+            float var10 = 1.0F - var8 * 0.95F;
+            var4 = var4 * var10 + var9 * (1.0F - var10);
+            var5 = var5 * var10 + var9 * (1.0F - var10);
+            var6 = var6 * var10 + var9 * (1.0F - var10);
+        }
+
+        return this.getVec3DPool().create((double)var4, (double)var5, (double)var6);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public Vec3D g(float var1)
+    {
+        float var2 = this.c(var1);
+        return this.worldProvider.b(var2, var1);
+    }
+
     /**
      * Gets the height to which rain/snow will fall. Calculates it if not already stored.
      */
@@ -1448,7 +1804,7 @@
         {
             int var5 = var3.getTypeId(var1, var4, var2);
 
-            if (var5 != 0 && Block.byId[var5].material.isSolid() && Block.byId[var5].material != Material.LEAVES)
+            if (var5 != 0 && Block.byId[var5].material.isSolid() && Block.byId[var5].material != Material.LEAVES && !Block.byId[var5].isBlockFoliage(this, var1, var4, var2))
             {
                 return var4 + 1;
             }
@@ -1457,6 +1813,31 @@
         return -1;
     }
 
+    @SideOnly(Side.CLIENT)
+    public float h(float var1)
+    {
+        return this.worldProvider.getStarBrightness(var1);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public float getStarBrightnessBody(float var1)
+    {
+        float var2 = this.c(var1);
+        float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.25F);
+
+        if (var3 < 0.0F)
+        {
+            var3 = 0.0F;
+        }
+
+        if (var3 > 1.0F)
+        {
+            var3 = 1.0F;
+        }
+
+        return var3 * var3 * 0.5F;
+    }
+
     /**
      * Used to schedule a call to the updateTick method on the specified block.
      */
@@ -1492,27 +1873,27 @@
 
         this.methodProfiler.c("remove");
         this.entityList.removeAll(this.f);
-        Iterator var5 = this.f.iterator();
-        int var3;
+        Iterator var3 = this.f.iterator();
         int var4;
+        int var5;
 
-        while (var5.hasNext())
+        while (var3.hasNext())
         {
-            var2 = (Entity)var5.next();
-            var3 = var2.ai;
-            var4 = var2.ak;
+            var2 = (Entity)var3.next();
+            var4 = var2.ai;
+            var5 = var2.ak;
 
-            if (var2.ah && this.isChunkLoaded(var3, var4))
+            if (var2.ah && this.isChunkLoaded(var4, var5))
             {
-                this.getChunkAt(var3, var4).b(var2);
+                this.getChunkAt(var4, var5).b(var2);
             }
         }
 
-        var5 = this.f.iterator();
+        var3 = this.f.iterator();
 
-        while (var5.hasNext())
+        while (var3.hasNext())
         {
-            var2 = (Entity)var5.next();
+            var2 = (Entity)var3.next();
             this.b(var2);
         }
 
@@ -1546,12 +1927,12 @@
 
             if (var2.dead)
             {
-                var3 = var2.ai;
-                var4 = var2.ak;
+                var4 = var2.ai;
+                var5 = var2.ak;
 
-                if (var2.ah && this.isChunkLoaded(var3, var4))
+                if (var2.ah && this.isChunkLoaded(var4, var5))
                 {
-                    this.getChunkAt(var3, var4).b(var2);
+                    this.getChunkAt(var4, var5).b(var2);
                 }
 
                 this.entityList.remove(var1--);
@@ -1563,11 +1944,11 @@
 
         this.methodProfiler.c("tileEntities");
         this.N = true;
-        var5 = this.tileEntityList.iterator();
+        var3 = this.tileEntityList.iterator();
 
-        while (var5.hasNext())
+        while (var3.hasNext())
         {
-            TileEntity var6 = (TileEntity)var5.next();
+            TileEntity var6 = (TileEntity)var3.next();
 
             if (!var6.r() && var6.func_70309_m() && this.isLoaded(var6.x, var6.y, var6.z))
             {
@@ -1576,24 +1957,33 @@
 
             if (var6.r())
             {
-                var5.remove();
+                var3.remove();
 
                 if (this.isChunkLoaded(var6.x >> 4, var6.z >> 4))
                 {
-                    Chunk var8 = this.getChunkAt(var6.x >> 4, var6.z >> 4);
+                    Chunk var7 = this.getChunkAt(var6.x >> 4, var6.z >> 4);
 
-                    if (var8 != null)
+                    if (var7 != null)
                     {
-                        var8.f(var6.x & 15, var6.y, var6.z & 15);
+                        var7.cleanChunkBlockTileEntity(var6.x & 15, var6.y, var6.z & 15);
                     }
                 }
             }
         }
 
         this.N = false;
+        Iterator var9;
 
         if (!this.b.isEmpty())
         {
+            var9 = this.b.iterator();
+
+            while (var9.hasNext())
+            {
+                Object var10 = var9.next();
+                ((TileEntity)var10).onChunkUnload();
+            }
+
             this.tileEntityList.removeAll(this.b);
             this.b.clear();
         }
@@ -1602,32 +1992,29 @@
 
         if (!this.a.isEmpty())
         {
-            Iterator var7 = this.a.iterator();
+            var9 = this.a.iterator();
 
-            while (var7.hasNext())
+            while (var9.hasNext())
             {
-                TileEntity var9 = (TileEntity)var7.next();
+                TileEntity var11 = (TileEntity)var9.next();
 
-                if (!var9.r())
+                if (!var11.r())
                 {
-                    if (!this.tileEntityList.contains(var9))
+                    if (!this.tileEntityList.contains(var11))
                     {
-                        this.tileEntityList.add(var9);
+                        this.tileEntityList.add(var11);
                     }
-
-                    if (this.isChunkLoaded(var9.x >> 4, var9.z >> 4))
+                }
+                else if (this.isChunkLoaded(var11.x >> 4, var11.z >> 4))
                     {
-                        Chunk var10 = this.getChunkAt(var9.x >> 4, var9.z >> 4);
+                    Chunk var8 = this.getChunkAt(var11.x >> 4, var11.z >> 4);
 
-                        if (var10 != null)
+                    if (var8 != null)
                         {
-                            var10.a(var9.x & 15, var9.y, var9.z & 15, var9);
+                        var8.a(var11.x & 15, var11.y, var11.z & 15, var11);
                         }
                     }
-
-                    this.notify(var9.x, var9.y, var9.z);
                 }
-            }
 
             this.a.clear();
         }
@@ -1638,15 +2025,19 @@
 
     public void a(Collection var1)
     {
-        if (this.N)
+        List var2 = this.N ? this.a : this.tileEntityList;
+        Iterator var3 = var1.iterator();
+
+        while (var3.hasNext())
         {
-            this.a.addAll(var1);
-        }
-        else
+            Object var4 = var3.next();
+
+            if (((TileEntity)var4).canUpdate())
         {
-            this.tileEntityList.addAll(var1);
+                var2.add(var4);
         }
     }
+    }
 
     /**
      * Will update the entity in the world if the chunk the entity is in is currently loaded. Args: entity
@@ -1664,10 +2055,19 @@
     {
         int var3 = MathHelper.floor(var1.locX);
         int var4 = MathHelper.floor(var1.locZ);
-        byte var5 = 32;
+        boolean var5 = this.getPersistentChunks().containsKey(new ChunkCoordIntPair(var3 >> 4, var4 >> 4));
+        int var6 = var5 ? 0 : 32;
+        boolean var7 = !var2 || this.d(var3 - var6, 0, var4 - var6, var3 + var6, 0, var4 + var6);
 
-        if (!var2 || this.d(var3 - var5, 0, var4 - var5, var3 + var5, 0, var4 + var5))
+        if (!var7)
         {
+            EntityEvent$CanUpdate var8 = new EntityEvent$CanUpdate(var1);
+            MinecraftForge.EVENT_BUS.post(var8);
+            var7 = var8.canUpdate;
+        }
+
+        if (var7)
+        {
             var1.T = var1.locX;
             var1.U = var1.locY;
             var1.V = var1.locZ;
@@ -1713,21 +2113,21 @@
                 var1.yaw = var1.lastYaw;
             }
 
-            int var6 = MathHelper.floor(var1.locX / 16.0D);
-            int var7 = MathHelper.floor(var1.locY / 16.0D);
-            int var8 = MathHelper.floor(var1.locZ / 16.0D);
+            int var11 = MathHelper.floor(var1.locX / 16.0D);
+            int var9 = MathHelper.floor(var1.locY / 16.0D);
+            int var10 = MathHelper.floor(var1.locZ / 16.0D);
 
-            if (!var1.ah || var1.ai != var6 || var1.aj != var7 || var1.ak != var8)
+            if (!var1.ah || var1.ai != var11 || var1.aj != var9 || var1.ak != var10)
             {
                 if (var1.ah && this.isChunkLoaded(var1.ai, var1.ak))
                 {
                     this.getChunkAt(var1.ai, var1.ak).a(var1, var1.aj);
                 }
 
-                if (this.isChunkLoaded(var6, var8))
+                if (this.isChunkLoaded(var11, var10))
                 {
                     var1.ah = true;
-                    this.getChunkAt(var6, var8).a(var1);
+                    this.getChunkAt(var11, var10).a(var1);
                 }
                 else
                 {
@@ -1901,10 +2301,17 @@
                         {
                             return true;
                         }
+
+                        Block var12 = Block.byId[var11];
+
+                        if (var12 != null && var12.isBlockBurning(this, var8, var9, var10))
+                        {
+                            return true;
                     }
                 }
             }
         }
+        }
 
         return false;
     }
@@ -2141,6 +2548,18 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public String u()
+    {
+        return "All: " + this.entityList.size();
+    }
+
+    @SideOnly(Side.CLIENT)
+    public String v()
+    {
+        return this.chunkProvider.getName();
+    }
+
     /**
      * Returns the TileEntity associated with a given block in X,Y,Z coordinates, or null if no TileEntity exists
      */
@@ -2190,54 +2609,33 @@
     {
         if (var4 != null && !var4.r())
         {
-            if (this.N)
+            if (var4.canUpdate())
             {
-                var4.x = var1;
-                var4.y = var2;
-                var4.z = var3;
-                this.a.add(var4);
+                List var5 = this.N ? this.a : this.tileEntityList;
+                var5.add(var4);
             }
-            else
-            {
-                this.tileEntityList.add(var4);
-                Chunk var5 = this.getChunkAt(var1 >> 4, var3 >> 4);
 
-                if (var5 != null)
+            Chunk var6 = this.getChunkAt(var1 >> 4, var3 >> 4);
+
+            if (var6 != null)
                 {
-                    var5.a(var1 & 15, var2, var3 & 15, var4);
+                var6.a(var1 & 15, var2, var3 & 15, var4);
                 }
             }
         }
-    }
 
     /**
      * Removes the TileEntity for a given block in X,Y,Z coordinates
      */
     public void q(int var1, int var2, int var3)
     {
-        TileEntity var4 = this.getTileEntity(var1, var2, var3);
+        Chunk var4 = this.getChunkAt(var1 >> 4, var3 >> 4);
 
-        if (var4 != null && this.N)
-        {
-            var4.w_();
-            this.a.remove(var4);
-        }
-        else
-        {
             if (var4 != null)
             {
-                this.a.remove(var4);
-                this.tileEntityList.remove(var4);
+            var4.f(var1 & 15, var2, var3 & 15);
             }
-
-            Chunk var5 = this.getChunkAt(var1 >> 4, var3 >> 4);
-
-            if (var5 != null)
-            {
-                var5.f(var1 & 15, var2, var3 & 15);
             }
-        }
-    }
 
     /**
      * Adds TileEntity to despawn list
@@ -2261,7 +2659,8 @@
      */
     public boolean s(int var1, int var2, int var3)
     {
-        return Block.i(this.getTypeId(var1, var2, var3));
+        Block var4 = Block.byId[this.getTypeId(var1, var2, var3)];
+        return var4 != null && var4.isBlockNormalCube(this, var1, var2, var3);
     }
 
     /**
@@ -2269,8 +2668,7 @@
      */
     public boolean t(int var1, int var2, int var3)
     {
-        Block var4 = Block.byId[this.getTypeId(var1, var2, var3)];
-        return var4 == null ? false : (var4.material.k() && var4.b() ? true : (var4 instanceof BlockStairs ? (this.getData(var1, var2, var3) & 4) == 4 : (var4 instanceof BlockStepAbstract ? (this.getData(var1, var2, var3) & 8) == 8 : false)));
+        return this.isBlockSolidOnSide(var1, var2, var3, ForgeDirection.UP);
     }
 
     /**
@@ -2286,7 +2684,7 @@
             if (var5 != null && !var5.isEmpty())
             {
                 Block var6 = Block.byId[this.getTypeId(var1, var2, var3)];
-                return var6 == null ? false : var6.material.k() && var6.b();
+                return var6 == null ? false : this.s(var1, var2, var3);
             }
             else
             {
@@ -2317,8 +2715,7 @@
      */
     public void setSpawnFlags(boolean var1, boolean var2)
     {
-        this.allowMonsters = var1;
-        this.allowAnimals = var2;
+        this.worldProvider.setAllowedSpawnTypes(var1, var2);
     }
 
     /**
@@ -2334,6 +2731,11 @@
      */
     private void a()
     {
+        this.worldProvider.calculateInitialWeather();
+    }
+
+    public void calculateInitialWeatherBody()
+    {
         if (this.worldData.hasStorm())
         {
             this.n = 1.0F;
@@ -2350,6 +2752,11 @@
      */
     protected void n()
     {
+        this.worldProvider.updateWeather();
+    }
+
+    public void updateWeatherBody()
+    {
         if (!this.worldProvider.f)
         {
             if (this.q > 0)
@@ -2454,12 +2861,13 @@
      */
     public void x()
     {
-        this.worldData.setWeatherDuration(1);
+        this.worldProvider.toggleRain();
     }
 
     protected void y()
     {
         this.chunkTickList.clear();
+        this.chunkTickList.addAll(this.getPersistentChunks().keySet());
         this.methodProfiler.a("buildList");
         int var1;
         EntityHuman var2;
@@ -2566,6 +2974,11 @@
      */
     public boolean c(int var1, int var2, int var3, boolean var4)
     {
+        return this.worldProvider.canBlockFreeze(var1, var2, var3, var4);
+    }
+
+    public boolean canBlockFreezeBody(int var1, int var2, int var3, boolean var4)
+    {
         BiomeBase var5 = this.getBiome(var1, var3);
         float var6 = var5.j();
 
@@ -2624,6 +3037,11 @@
      */
     public boolean w(int var1, int var2, int var3)
     {
+        return this.worldProvider.canSnowAt(var1, var2, var3);
+    }
+
+    public boolean canSnowAtBody(int var1, int var2, int var3)
+    {
         BiomeBase var4 = this.getBiome(var1, var3);
         float var5 = var4.j();
 
@@ -2716,7 +3134,7 @@
 
     private int g(int var1, int var2, int var3, int var4, int var5, int var6)
     {
-        int var7 = Block.lightEmission[var5];
+        int var7 = var5 != 0 && Block.byId[var5] != null ? Block.byId[var5].getLightValue(this, var2, var3, var4) : 0;
         int var8 = this.b(EnumSkyBlock.Block, var2 - 1, var3, var4) - var6;
         int var9 = this.b(EnumSkyBlock.Block, var2 + 1, var3, var4) - var6;
         int var10 = this.b(EnumSkyBlock.Block, var2, var3 - 1, var4) - var6;
@@ -2775,18 +3193,17 @@
             }
 
             boolean var11 = false;
-            int var24;
+            int var12;
 
             if (var1 == EnumSkyBlock.Sky)
             {
-                var24 = this.b(var7, var2, var3, var4, var9, var10);
+                var12 = this.b(var7, var2, var3, var4, var9, var10);
             }
             else
             {
-                var24 = this.g(var7, var2, var3, var4, var9, var10);
+                var12 = this.g(var7, var2, var3, var4, var9, var10);
             }
 
-            int var12;
             int var13;
             int var14;
             int var15;
@@ -2794,12 +3211,13 @@
             int var16;
             int var19;
             int var18;
+            int var20;
 
-            if (var24 > var7)
+            if (var12 > var7)
             {
                 this.I[var6++] = 133152;
             }
-            else if (var24 < var7)
+            else if (var12 < var7)
             {
                 if (var1 != EnumSkyBlock.Block)
                 {
@@ -2812,29 +3230,29 @@
                 {
                     var9 = this.I[var5++];
                     var10 = (var9 & 63) - 32 + var2;
-                    var24 = (var9 >> 6 & 63) - 32 + var3;
-                    var12 = (var9 >> 12 & 63) - 32 + var4;
-                    var13 = var9 >> 18 & 15;
-                    var14 = this.b(var1, var10, var24, var12);
+                    var12 = (var9 >> 6 & 63) - 32 + var3;
+                    var13 = (var9 >> 12 & 63) - 32 + var4;
+                    var14 = var9 >> 18 & 15;
+                    var15 = this.b(var1, var10, var12, var13);
 
-                    if (var14 == var13)
+                    if (var15 == var14)
                     {
-                        this.b(var1, var10, var24, var12, 0);
+                        this.b(var1, var10, var12, var13, 0);
 
-                        if (var13 > 0)
+                        if (var14 > 0)
                         {
-                            var15 = var10 - var2;
-                            var16 = var24 - var3;
-                            var17 = var12 - var4;
+                            var16 = var10 - var2;
+                            var18 = var12 - var3;
+                            var17 = var13 - var4;
 
-                            if (var15 < 0)
+                            if (var16 < 0)
                             {
-                                var15 = -var15;
+                                var16 = -var16;
                             }
 
-                            if (var16 < 0)
+                            if (var18 < 0)
                             {
-                                var16 = -var16;
+                                var18 = -var18;
                             }
 
                             if (var17 < 0)
@@ -2842,25 +3260,25 @@
                                 var17 = -var17;
                             }
 
-                            if (var15 + var16 + var17 < 17)
+                            if (var16 + var18 + var17 < 17)
                             {
-                                for (var18 = 0; var18 < 6; ++var18)
+                                for (var20 = 0; var20 < 6; ++var20)
                                 {
-                                    var19 = var18 % 2 * 2 - 1;
-                                    int var20 = var10 + var18 / 2 % 3 / 2 * var19;
-                                    int var21 = var24 + (var18 / 2 + 1) % 3 / 2 * var19;
-                                    int var22 = var12 + (var18 / 2 + 2) % 3 / 2 * var19;
-                                    var14 = this.b(var1, var20, var21, var22);
-                                    int var23 = Block.lightBlock[this.getTypeId(var20, var21, var22)];
+                                    var19 = var20 % 2 * 2 - 1;
+                                    int var21 = var10 + var20 / 2 % 3 / 2 * var19;
+                                    int var22 = var12 + (var20 / 2 + 1) % 3 / 2 * var19;
+                                    int var23 = var13 + (var20 / 2 + 2) % 3 / 2 * var19;
+                                    var15 = this.b(var1, var21, var22, var23);
+                                    int var24 = this.b(var21, var22, var23);
 
-                                    if (var23 == 0)
+                                    if (var24 == 0)
                                     {
-                                        var23 = 1;
+                                        var24 = 1;
                                     }
 
-                                    if (var14 == var13 - var23 && var6 < this.I.length)
+                                    if (var15 == var14 - var24 && var6 < this.I.length)
                                     {
-                                        this.I[var6++] = var20 - var2 + 32 + (var21 - var3 + 32 << 6) + (var22 - var4 + 32 << 12) + (var13 - var23 << 18);
+                                        this.I[var6++] = var21 - var2 + 32 + (var22 - var3 + 32 << 6) + (var23 - var4 + 32 << 12) + (var14 - var24 << 18);
                                     }
                                 }
                             }
@@ -2878,46 +3296,46 @@
             {
                 var9 = this.I[var5++];
                 var10 = (var9 & 63) - 32 + var2;
-                var24 = (var9 >> 6 & 63) - 32 + var3;
-                var12 = (var9 >> 12 & 63) - 32 + var4;
-                var13 = this.b(var1, var10, var24, var12);
-                var14 = this.getTypeId(var10, var24, var12);
-                var15 = Block.lightBlock[var14];
+                var12 = (var9 >> 6 & 63) - 32 + var3;
+                var13 = (var9 >> 12 & 63) - 32 + var4;
+                var14 = this.b(var1, var10, var12, var13);
+                var15 = this.getTypeId(var10, var12, var13);
+                var16 = this.b(var10, var12, var13);
 
-                if (var15 == 0)
+                if (var16 == 0)
                 {
-                    var15 = 1;
+                    var16 = 1;
                 }
 
                 boolean var25 = false;
 
                 if (var1 == EnumSkyBlock.Sky)
                 {
-                    var16 = this.b(var13, var10, var24, var12, var14, var15);
+                    var18 = this.b(var14, var10, var12, var13, var15, var16);
                 }
                 else
                 {
-                    var16 = this.g(var13, var10, var24, var12, var14, var15);
+                    var18 = this.g(var14, var10, var12, var13, var15, var16);
                 }
 
-                if (var16 != var13)
+                if (var18 != var14)
                 {
-                    this.b(var1, var10, var24, var12, var16);
+                    this.b(var1, var10, var12, var13, var18);
 
-                    if (var16 > var13)
+                    if (var18 > var14)
                     {
                         var17 = var10 - var2;
-                        var18 = var24 - var3;
-                        var19 = var12 - var4;
+                        var20 = var12 - var3;
+                        var19 = var13 - var4;
 
                         if (var17 < 0)
                         {
                             var17 = -var17;
                         }
 
-                        if (var18 < 0)
+                        if (var20 < 0)
                         {
-                            var18 = -var18;
+                            var20 = -var20;
                         }
 
                         if (var19 < 0)
@@ -2925,36 +3343,36 @@
                             var19 = -var19;
                         }
 
-                        if (var17 + var18 + var19 < 17 && var6 < this.I.length - 6)
+                        if (var17 + var20 + var19 < 17 && var6 < this.I.length - 6)
                         {
-                            if (this.b(var1, var10 - 1, var24, var12) < var16)
+                            if (this.b(var1, var10 - 1, var12, var13) < var18)
                             {
-                                this.I[var6++] = var10 - 1 - var2 + 32 + (var24 - var3 + 32 << 6) + (var12 - var4 + 32 << 12);
+                                this.I[var6++] = var10 - 1 - var2 + 32 + (var12 - var3 + 32 << 6) + (var13 - var4 + 32 << 12);
                             }
 
-                            if (this.b(var1, var10 + 1, var24, var12) < var16)
+                            if (this.b(var1, var10 + 1, var12, var13) < var18)
                             {
-                                this.I[var6++] = var10 + 1 - var2 + 32 + (var24 - var3 + 32 << 6) + (var12 - var4 + 32 << 12);
+                                this.I[var6++] = var10 + 1 - var2 + 32 + (var12 - var3 + 32 << 6) + (var13 - var4 + 32 << 12);
                             }
 
-                            if (this.b(var1, var10, var24 - 1, var12) < var16)
+                            if (this.b(var1, var10, var12 - 1, var13) < var18)
                             {
-                                this.I[var6++] = var10 - var2 + 32 + (var24 - 1 - var3 + 32 << 6) + (var12 - var4 + 32 << 12);
+                                this.I[var6++] = var10 - var2 + 32 + (var12 - 1 - var3 + 32 << 6) + (var13 - var4 + 32 << 12);
                             }
 
-                            if (this.b(var1, var10, var24 + 1, var12) < var16)
+                            if (this.b(var1, var10, var12 + 1, var13) < var18)
                             {
-                                this.I[var6++] = var10 - var2 + 32 + (var24 + 1 - var3 + 32 << 6) + (var12 - var4 + 32 << 12);
+                                this.I[var6++] = var10 - var2 + 32 + (var12 + 1 - var3 + 32 << 6) + (var13 - var4 + 32 << 12);
                             }
 
-                            if (this.b(var1, var10, var24, var12 - 1) < var16)
+                            if (this.b(var1, var10, var12, var13 - 1) < var18)
                             {
-                                this.I[var6++] = var10 - var2 + 32 + (var24 - var3 + 32 << 6) + (var12 - 1 - var4 + 32 << 12);
+                                this.I[var6++] = var10 - var2 + 32 + (var12 - var3 + 32 << 6) + (var13 - 1 - var4 + 32 << 12);
                             }
 
-                            if (this.b(var1, var10, var24, var12 + 1) < var16)
+                            if (this.b(var1, var10, var12, var13 + 1) < var18)
                             {
-                                this.I[var6++] = var10 - var2 + 32 + (var24 - var3 + 32 << 6) + (var12 + 1 - var4 + 32 << 12);
+                                this.I[var6++] = var10 - var2 + 32 + (var12 - var3 + 32 << 6) + (var13 + 1 - var4 + 32 << 12);
                             }
                         }
                     }
@@ -2984,10 +3402,10 @@
     public List getEntities(Entity var1, AxisAlignedBB var2)
     {
         this.P.clear();
-        int var3 = MathHelper.floor((var2.a - 2.0D) / 16.0D);
-        int var4 = MathHelper.floor((var2.d + 2.0D) / 16.0D);
-        int var5 = MathHelper.floor((var2.c - 2.0D) / 16.0D);
-        int var6 = MathHelper.floor((var2.f + 2.0D) / 16.0D);
+        int var3 = MathHelper.floor((var2.a - MAX_ENTITY_RADIUS) / 16.0D);
+        int var4 = MathHelper.floor((var2.d + MAX_ENTITY_RADIUS) / 16.0D);
+        int var5 = MathHelper.floor((var2.c - MAX_ENTITY_RADIUS) / 16.0D);
+        int var6 = MathHelper.floor((var2.f + MAX_ENTITY_RADIUS) / 16.0D);
 
         for (int var7 = var3; var7 <= var4; ++var7)
         {
@@ -3013,10 +3431,10 @@
 
     public List func_82733_a(Class var1, AxisAlignedBB var2, IEntitySelector var3)
     {
-        int var4 = MathHelper.floor((var2.a - 2.0D) / 16.0D);
-        int var5 = MathHelper.floor((var2.d + 2.0D) / 16.0D);
-        int var6 = MathHelper.floor((var2.c - 2.0D) / 16.0D);
-        int var7 = MathHelper.floor((var2.f + 2.0D) / 16.0D);
+        int var4 = MathHelper.floor((var2.a - MAX_ENTITY_RADIUS) / 16.0D);
+        int var5 = MathHelper.floor((var2.d + MAX_ENTITY_RADIUS) / 16.0D);
+        int var6 = MathHelper.floor((var2.c - MAX_ENTITY_RADIUS) / 16.0D);
+        int var7 = MathHelper.floor((var2.f + MAX_ENTITY_RADIUS) / 16.0D);
         ArrayList var8 = new ArrayList();
 
         for (int var9 = var4; var9 <= var5; ++var9)
@@ -3064,6 +3482,12 @@
      */
     public abstract Entity getEntity(int var1);
 
+    @SideOnly(Side.CLIENT)
+    public List z()
+    {
+        return this.entityList;
+    }
+
     /**
      * marks the chunk that contains this tilentity as modified and then calls worldAccesses.doNothingWithTileEntity
      */
@@ -3100,13 +3524,17 @@
      */
     public void a(List var1)
     {
-        this.entityList.addAll(var1);
-
         for (int var2 = 0; var2 < var1.size(); ++var2)
         {
-            this.a((Entity)var1.get(var2));
+            Entity var3 = (Entity)var1.get(var2);
+
+            if (!MinecraftForge.EVENT_BUS.post(new EntityJoinWorldEvent(var3, this)))
+            {
+                this.entityList.add(var3);
+                this.a(var3);
         }
     }
+    }
 
     /**
      * adds entities to the list of unloaded entities
@@ -3142,6 +3570,11 @@
                 var9 = null;
             }
 
+            if (var9 != null && var9.isBlockReplaceable(this, var2, var3, var4))
+            {
+                var9 = null;
+            }
+
             return var9 != null && var9.material == Material.ORIENTABLE && var10 == Block.ANVIL ? true : var1 > 0 && var9 == null && var10.canPlace(this, var2, var3, var4, var6);
         }
     }
@@ -3329,20 +3762,29 @@
         return null;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void B() {}
+
     /**
      * Checks whether the session lock file was modified by another process
      */
-    public void C()
+    public void C() throws ExceptionWorldConflict
     {
         this.dataManager.checkSession();
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a(long var1)
+    {
+        this.worldData.func_82572_b(var1);
+    }
+
     /**
      * gets the random world seed
      */
     public long getSeed()
     {
-        return this.worldData.getSeed();
+        return this.worldProvider.getSeed();
     }
 
     public long getTime()
@@ -3352,7 +3794,7 @@
 
     public long F()
     {
-        return this.worldData.g();
+        return this.worldProvider.getWorldTime();
     }
 
     /**
@@ -3360,7 +3802,7 @@
      */
     public void setTime(long var1)
     {
-        this.worldData.c(var1);
+        this.worldProvider.setWorldTime(var1);
     }
 
     /**
@@ -3368,14 +3810,46 @@
      */
     public ChunkCoordinates getSpawn()
     {
-        return new ChunkCoordinates(this.worldData.c(), this.worldData.d(), this.worldData.e());
+        return this.worldProvider.getSpawnPoint();
     }
 
+    @SideOnly(Side.CLIENT)
+    public void A(int var1, int var2, int var3)
+    {
+        this.worldProvider.setSpawnPoint(var1, var2, var3);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public void h(Entity var1)
+    {
+        int var2 = MathHelper.floor(var1.locX / 16.0D);
+        int var3 = MathHelper.floor(var1.locZ / 16.0D);
+        byte var4 = 2;
+
+        for (int var5 = var2 - var4; var5 <= var2 + var4; ++var5)
+        {
+            for (int var6 = var3 - var4; var6 <= var3 + var4; ++var6)
+            {
+                this.getChunkAt(var5, var6);
+            }
+        }
+
+        if (!this.entityList.contains(var1) && !MinecraftForge.EVENT_BUS.post(new EntityJoinWorldEvent(var1, this)))
+        {
+            this.entityList.add(var1);
+        }
+    }
+
     /**
      * Called when checking if a certain block can be mined or not. The 'spawn safe zone' check is located here.
      */
     public boolean a(EntityHuman var1, int var2, int var3, int var4)
     {
+        return this.worldProvider.canMineBlock(var1, var2, var3, var4);
+    }
+
+    public boolean canMineBlockBody(EntityHuman var1, int var2, int var3, int var4)
+    {
         return true;
     }
 
@@ -3446,6 +3920,13 @@
         return this.m + (this.n - this.m) * var1;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void k(float var1)
+    {
+        this.m = var1;
+        this.n = var1;
+    }
+
     /**
      * Returns true if the current thunder strength (weighted with the rain strength) is greater than 0.9
      */
@@ -3488,8 +3969,7 @@
      */
     public boolean C(int var1, int var2, int var3)
     {
-        BiomeBase var4 = this.getBiome(var1, var3);
-        return var4.e();
+        return this.worldProvider.isBlockHighHumidity(var1, var2, var3);
     }
 
     /**
@@ -3552,7 +4032,7 @@
      */
     public int getHeight()
     {
-        return 256;
+        return this.worldProvider.getHeight();
     }
 
     /**
@@ -3560,7 +4040,7 @@
      */
     public int O()
     {
-        return this.worldProvider.f ? 128 : 256;
+        return this.worldProvider.getActualHeight();
     }
 
     public IUpdatePlayerListBox func_82735_a(EntityMinecart var1)
@@ -3586,6 +4066,18 @@
         return this.H().findNearestMapFeature(this, var1, var2, var3, var4);
     }
 
+    @SideOnly(Side.CLIENT)
+    public boolean P()
+    {
+        return false;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public double Q()
+    {
+        return this.worldProvider.getHorizon();
+    }
+
     /**
      * Adds some basic stats of the world to the given crash report.
      */
@@ -3628,4 +4120,46 @@
         this.L.setTimeInMillis(System.currentTimeMillis());
         return this.L;
     }
+
+    public void addTileEntity(TileEntity var1)
+    {
+        List var2 = this.N ? this.a : this.tileEntityList;
+
+        if (var1.canUpdate())
+        {
+            var2.add(var1);
 }
+    }
+
+    public boolean isBlockSolidOnSide(int var1, int var2, int var3, ForgeDirection var4)
+    {
+        return this.isBlockSolidOnSide(var1, var2, var3, var4, false);
+    }
+
+    public boolean isBlockSolidOnSide(int var1, int var2, int var3, ForgeDirection var4, boolean var5)
+    {
+        if (var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000)
+        {
+            Chunk var6 = this.chunkProvider.getOrCreateChunk(var1 >> 4, var3 >> 4);
+
+            if (var6 != null && !var6.isEmpty())
+            {
+                Block var7 = Block.byId[this.getTypeId(var1, var2, var3)];
+                return var7 == null ? false : var7.isBlockSolidOnSide(this, var1, var2, var3, var4);
+            }
+            else
+            {
+                return var5;
+            }
+        }
+        else
+        {
+            return var5;
+        }
+    }
+
+    public ImmutableSetMultimap getPersistentChunks()
+    {
+        return ForgeChunkManager.getPersistentChunksFor(this);
+    }
+}
Index: WorldData.java
===================================================================
--- WorldData.java	(revision 3)
+++ WorldData.java	(working copy)
@@ -1,5 +1,9 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import java.util.Map;
+
 public class WorldData
 {
     /** Holds the seed of the currently world. */
@@ -61,6 +65,7 @@
     private boolean allowCommands;
     private boolean initialized;
     private GameRules gameRules;
+    private Map additionalProperties;
 
     protected WorldData()
     {
@@ -312,6 +317,12 @@
         return this.dayTime;
     }
 
+    @SideOnly(Side.CLIENT)
+    public long h()
+    {
+        return this.sizeOnDisk;
+    }
+
     /**
      * Returns the player's NBTTagCompound to be loaded
      */
@@ -325,11 +336,29 @@
         return this.dimension;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a(int var1)
+    {
+        this.spawnX = var1;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public void b(int var1)
+    {
+        this.spawnY = var1;
+    }
+
     public void func_82572_b(long var1)
     {
         this.time = var1;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void c(int var1)
+    {
+        this.spawnZ = var1;
+    }
+
     /**
      * Set current world time
      */
@@ -377,6 +406,12 @@
         this.version = var1;
     }
 
+    @SideOnly(Side.CLIENT)
+    public long m()
+    {
+        return this.lastPlayed;
+    }
+
     /**
      * Returns true if it is thundering, false otherwise.
      */
@@ -519,4 +554,17 @@
     {
         return this.gameRules;
     }
+
+    public void setAdditionalProperties(Map var1)
+    {
+        if (this.additionalProperties == null)
+        {
+            this.additionalProperties = var1;
 }
+    }
+
+    public NBTBase getAdditionalProperty(String var1)
+    {
+        return this.additionalProperties != null ? (NBTBase)this.additionalProperties.get(var1) : null;
+    }
+}
Index: WorldGenForest.java
===================================================================
--- WorldGenForest.java	(revision 3)
+++ WorldGenForest.java	(working copy)
@@ -17,33 +17,35 @@
         if (var4 >= 1 && var4 + var6 + 1 <= 256)
         {
             int var8;
+            int var9;
             int var10;
             int var11;
-            int var12;
+            Block var13;
 
             for (var8 = var4; var8 <= var4 + 1 + var6; ++var8)
             {
-                byte var9 = 1;
+                byte var12 = 1;
 
                 if (var8 == var4)
                 {
-                    var9 = 0;
+                    var12 = 0;
                 }
 
                 if (var8 >= var4 + 1 + var6 - 2)
                 {
-                    var9 = 2;
+                    var12 = 2;
                 }
 
-                for (var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10)
+                for (var9 = var3 - var12; var9 <= var3 + var12 && var7; ++var9)
                 {
-                    for (var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11)
+                    for (var10 = var5 - var12; var10 <= var5 + var12 && var7; ++var10)
                     {
                         if (var8 >= 0 && var8 < 256)
                         {
-                            var12 = var1.getTypeId(var10, var8, var11);
+                            var11 = var1.getTypeId(var9, var8, var10);
+                            var13 = Block.byId[var11];
 
-                            if (var12 != 0 && var12 != Block.LEAVES.id)
+                            if (var11 != 0 && var13 != null && !var13.isLeaves(var1, var9, var8, var10))
                             {
                                 var7 = false;
                             }
@@ -67,36 +69,38 @@
                 if ((var8 == Block.GRASS.id || var8 == Block.DIRT.id) && var4 < 256 - var6 - 1)
                 {
                     this.setType(var1, var3, var4 - 1, var5, Block.DIRT.id);
-                    int var16;
+                    int var17;
 
-                    for (var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16)
+                    for (var17 = var4 - 3 + var6; var17 <= var4 + var6; ++var17)
                     {
-                        var10 = var16 - (var4 + var6);
-                        var11 = 1 - var10 / 2;
+                        var9 = var17 - (var4 + var6);
+                        var10 = 1 - var9 / 2;
 
-                        for (var12 = var3 - var11; var12 <= var3 + var11; ++var12)
+                        for (var11 = var3 - var10; var11 <= var3 + var10; ++var11)
                         {
-                            int var13 = var12 - var3;
+                            int var18 = var11 - var3;
 
-                            for (int var14 = var5 - var11; var14 <= var5 + var11; ++var14)
+                            for (int var14 = var5 - var10; var14 <= var5 + var10; ++var14)
                             {
                                 int var15 = var14 - var5;
+                                Block var16 = Block.byId[var1.getTypeId(var11, var17, var14)];
 
-                                if ((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.q[var1.getTypeId(var12, var16, var14)])
+                                if ((Math.abs(var18) != var10 || Math.abs(var15) != var10 || var2.nextInt(2) != 0 && var9 != 0) && (var16 == null || var16.canBeReplacedByLeaves(var1, var11, var17, var14)))
                                 {
-                                    this.setTypeAndData(var1, var12, var16, var14, Block.LEAVES.id, 2);
+                                    this.setTypeAndData(var1, var11, var17, var14, Block.LEAVES.id, 2);
                                 }
                             }
                         }
                     }
 
-                    for (var16 = 0; var16 < var6; ++var16)
+                    for (var17 = 0; var17 < var6; ++var17)
                     {
-                        var10 = var1.getTypeId(var3, var4 + var16, var5);
+                        var9 = var1.getTypeId(var3, var4 + var17, var5);
+                        var13 = Block.byId[var9];
 
-                        if (var10 == 0 || var10 == Block.LEAVES.id)
+                        if (var9 == 0 || var13 == null || var13.isLeaves(var1, var3, var4 + var17, var5))
                         {
-                            this.setTypeAndData(var1, var3, var4 + var16, var5, Block.LOG.id, 2);
+                            this.setTypeAndData(var1, var3, var4 + var17, var5, Block.LOG.id, 2);
                         }
                     }
 
Index: WorldGenGroundBush.java
===================================================================
--- WorldGenGroundBush.java	(revision 3)
+++ WorldGenGroundBush.java	(working copy)
@@ -15,36 +15,45 @@
 
     public boolean a(World var1, Random var2, int var3, int var4, int var5)
     {
-        int var15;
+        Block var7 = null;
 
-        for (boolean var6 = false; ((var15 = var1.getTypeId(var3, var4, var5)) == 0 || var15 == Block.LEAVES.id) && var4 > 0; --var4)
+        do
         {
-            ;
+            var7 = Block.byId[var1.getTypeId(var3, var4, var5)];
+
+            if (var7 != null && !var7.isLeaves(var1, var3, var4, var5))
+            {
+                break;
         }
 
-        int var7 = var1.getTypeId(var3, var4, var5);
+            --var4;
+        }
+        while (var4 > 0);
 
-        if (var7 == Block.DIRT.id || var7 == Block.GRASS.id)
+        int var8 = var1.getTypeId(var3, var4, var5);
+
+        if (var8 == Block.DIRT.id || var8 == Block.GRASS.id)
         {
             ++var4;
             this.setTypeAndData(var1, var3, var4, var5, Block.LOG.id, this.field_76526_b);
 
-            for (int var8 = var4; var8 <= var4 + 2; ++var8)
+            for (int var9 = var4; var9 <= var4 + 2; ++var9)
             {
-                int var9 = var8 - var4;
-                int var10 = 2 - var9;
+                int var10 = var9 - var4;
+                int var11 = 2 - var10;
 
-                for (int var11 = var3 - var10; var11 <= var3 + var10; ++var11)
+                for (int var12 = var3 - var11; var12 <= var3 + var11; ++var12)
                 {
-                    int var12 = var11 - var3;
+                    int var13 = var12 - var3;
 
-                    for (int var13 = var5 - var10; var13 <= var5 + var10; ++var13)
+                    for (int var14 = var5 - var11; var14 <= var5 + var11; ++var14)
                     {
-                        int var14 = var13 - var5;
+                        int var15 = var14 - var5;
+                        var7 = Block.byId[var1.getTypeId(var12, var9, var14)];
 
-                        if ((Math.abs(var12) != var10 || Math.abs(var14) != var10 || var2.nextInt(2) != 0) && !Block.q[var1.getTypeId(var11, var8, var13)])
+                        if ((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0) && (var7 == null || var7.canBeReplacedByLeaves(var1, var12, var9, var14)))
                         {
-                            this.setTypeAndData(var1, var11, var8, var13, Block.LEAVES.id, this.field_76527_a);
+                            this.setTypeAndData(var1, var12, var9, var14, Block.LEAVES.id, this.field_76527_a);
                         }
                     }
                 }
Index: WorldGenHugeMushroom.java
===================================================================
--- WorldGenHugeMushroom.java	(revision 3)
+++ WorldGenHugeMushroom.java	(working copy)
@@ -33,28 +33,30 @@
         if (var4 >= 1 && var4 + var7 + 1 < 256)
         {
             int var9;
+            int var10;
             int var11;
             int var12;
-            int var13;
+            Block var14;
 
             for (var9 = var4; var9 <= var4 + 1 + var7; ++var9)
             {
-                byte var10 = 3;
+                byte var13 = 3;
 
                 if (var9 <= var4 + 3)
                 {
-                    var10 = 0;
+                    var13 = 0;
                 }
 
-                for (var11 = var3 - var10; var11 <= var3 + var10 && var8; ++var11)
+                for (var10 = var3 - var13; var10 <= var3 + var13 && var8; ++var10)
                 {
-                    for (var12 = var5 - var10; var12 <= var5 + var10 && var8; ++var12)
+                    for (var11 = var5 - var13; var11 <= var5 + var13 && var8; ++var11)
                     {
                         if (var9 >= 0 && var9 < 256)
                         {
-                            var13 = var1.getTypeId(var11, var9, var12);
+                            var12 = var1.getTypeId(var10, var9, var11);
+                            var14 = Block.byId[var12];
 
-                            if (var13 != 0 && var13 != Block.LEAVES.id)
+                            if (var12 != 0 && var14 != null && !var14.isLeaves(var1, var10, var9, var11))
                             {
                                 var8 = false;
                             }
@@ -81,121 +83,124 @@
                 }
                 else
                 {
-                    int var16 = var4 + var7;
+                    int var17 = var4 + var7;
 
                     if (var6 == 1)
                     {
-                        var16 = var4 + var7 - 3;
+                        var17 = var4 + var7 - 3;
                     }
 
-                    for (var11 = var16; var11 <= var4 + var7; ++var11)
+                    for (var10 = var17; var10 <= var4 + var7; ++var10)
                     {
-                        var12 = 1;
+                        var11 = 1;
 
-                        if (var11 < var4 + var7)
+                        if (var10 < var4 + var7)
                         {
-                            ++var12;
+                            ++var11;
                         }
 
                         if (var6 == 0)
                         {
-                            var12 = 3;
+                            var11 = 3;
                         }
 
-                        for (var13 = var3 - var12; var13 <= var3 + var12; ++var13)
+                        for (var12 = var3 - var11; var12 <= var3 + var11; ++var12)
                         {
-                            for (int var14 = var5 - var12; var14 <= var5 + var12; ++var14)
+                            for (int var18 = var5 - var11; var18 <= var5 + var11; ++var18)
                             {
                                 int var15 = 5;
 
-                                if (var13 == var3 - var12)
+                                if (var12 == var3 - var11)
                                 {
                                     --var15;
                                 }
 
-                                if (var13 == var3 + var12)
+                                if (var12 == var3 + var11)
                                 {
                                     ++var15;
                                 }
 
-                                if (var14 == var5 - var12)
+                                if (var18 == var5 - var11)
                                 {
                                     var15 -= 3;
                                 }
 
-                                if (var14 == var5 + var12)
+                                if (var18 == var5 + var11)
                                 {
                                     var15 += 3;
                                 }
 
-                                if (var6 == 0 || var11 < var4 + var7)
+                                if (var6 == 0 || var10 < var4 + var7)
                                 {
-                                    if ((var13 == var3 - var12 || var13 == var3 + var12) && (var14 == var5 - var12 || var14 == var5 + var12))
+                                    if ((var12 == var3 - var11 || var12 == var3 + var11) && (var18 == var5 - var11 || var18 == var5 + var11))
                                     {
                                         continue;
                                     }
 
-                                    if (var13 == var3 - (var12 - 1) && var14 == var5 - var12)
+                                    if (var12 == var3 - (var11 - 1) && var18 == var5 - var11)
                                     {
                                         var15 = 1;
                                     }
 
-                                    if (var13 == var3 - var12 && var14 == var5 - (var12 - 1))
+                                    if (var12 == var3 - var11 && var18 == var5 - (var11 - 1))
                                     {
                                         var15 = 1;
                                     }
 
-                                    if (var13 == var3 + (var12 - 1) && var14 == var5 - var12)
+                                    if (var12 == var3 + (var11 - 1) && var18 == var5 - var11)
                                     {
                                         var15 = 3;
                                     }
 
-                                    if (var13 == var3 + var12 && var14 == var5 - (var12 - 1))
+                                    if (var12 == var3 + var11 && var18 == var5 - (var11 - 1))
                                     {
                                         var15 = 3;
                                     }
 
-                                    if (var13 == var3 - (var12 - 1) && var14 == var5 + var12)
+                                    if (var12 == var3 - (var11 - 1) && var18 == var5 + var11)
                                     {
                                         var15 = 7;
                                     }
 
-                                    if (var13 == var3 - var12 && var14 == var5 + (var12 - 1))
+                                    if (var12 == var3 - var11 && var18 == var5 + (var11 - 1))
                                     {
                                         var15 = 7;
                                     }
 
-                                    if (var13 == var3 + (var12 - 1) && var14 == var5 + var12)
+                                    if (var12 == var3 + (var11 - 1) && var18 == var5 + var11)
                                     {
                                         var15 = 9;
                                     }
 
-                                    if (var13 == var3 + var12 && var14 == var5 + (var12 - 1))
+                                    if (var12 == var3 + var11 && var18 == var5 + (var11 - 1))
                                     {
                                         var15 = 9;
                                     }
                                 }
 
-                                if (var15 == 5 && var11 < var4 + var7)
+                                if (var15 == 5 && var10 < var4 + var7)
                                 {
                                     var15 = 0;
                                 }
 
-                                if ((var15 != 0 || var4 >= var4 + var7 - 1) && !Block.q[var1.getTypeId(var13, var11, var14)])
+                                Block var16 = Block.byId[var1.getTypeId(var12, var10, var18)];
+
+                                if ((var15 != 0 || var4 >= var4 + var7 - 1) && (var16 == null || var16.canBeReplacedByLeaves(var1, var12, var10, var18)))
                                 {
-                                    this.setTypeAndData(var1, var13, var11, var14, Block.BIG_MUSHROOM_1.id + var6, var15);
+                                    this.setTypeAndData(var1, var12, var10, var18, Block.BIG_MUSHROOM_1.id + var6, var15);
                                 }
                             }
                         }
                     }
 
-                    for (var11 = 0; var11 < var7; ++var11)
+                    for (var10 = 0; var10 < var7; ++var10)
                     {
-                        var12 = var1.getTypeId(var3, var4 + var11, var5);
+                        var11 = var1.getTypeId(var3, var4 + var10, var5);
+                        var14 = Block.byId[var11];
 
-                        if (!Block.q[var12])
+                        if (var14 == null || var14.canBeReplacedByLeaves(var1, var3, var4 + var10, var5))
                         {
-                            this.setTypeAndData(var1, var3, var4 + var11, var5, Block.BIG_MUSHROOM_1.id + var6, 10);
+                            this.setTypeAndData(var1, var3, var4 + var10, var5, Block.BIG_MUSHROOM_1.id + var6, 10);
                         }
                     }
 
Index: WorldGenMegaTree.java
===================================================================
--- WorldGenMegaTree.java	(revision 3)
+++ WorldGenMegaTree.java	(working copy)
@@ -29,33 +29,33 @@
         if (var4 >= 1 && var4 + var6 + 1 <= 256)
         {
             int var8;
+            int var9;
             int var10;
             int var11;
-            int var12;
 
             for (var8 = var4; var8 <= var4 + 1 + var6; ++var8)
             {
-                byte var9 = 2;
+                byte var12 = 2;
 
                 if (var8 == var4)
                 {
-                    var9 = 1;
+                    var12 = 1;
                 }
 
                 if (var8 >= var4 + 1 + var6 - 2)
                 {
-                    var9 = 2;
+                    var12 = 2;
                 }
 
-                for (var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10)
+                for (var9 = var3 - var12; var9 <= var3 + var12 && var7; ++var9)
                 {
-                    for (var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11)
+                    for (var10 = var5 - var12; var10 <= var5 + var12 && var7; ++var10)
                     {
                         if (var8 >= 0 && var8 < 256)
                         {
-                            var12 = var1.getTypeId(var10, var8, var11);
+                            var11 = var1.getTypeId(var9, var8, var10);
 
-                            if (var12 != 0 && var12 != Block.LEAVES.id && var12 != Block.GRASS.id && var12 != Block.DIRT.id && var12 != Block.LOG.id && var12 != Block.SAPLING.id)
+                            if (var11 != 0 && Block.byId[var11] != null && !Block.byId[var11].isLeaves(var1, var9, var8, var10) && var11 != Block.GRASS.id && var11 != Block.DIRT.id && Block.byId[var11] != null && !Block.byId[var11].isWood(var1, var9, var8, var10) && var11 != Block.SAPLING.id)
                             {
                                 var7 = false;
                             }
@@ -84,101 +84,101 @@
                     var1.setRawTypeId(var3 + 1, var4 - 1, var5 + 1, Block.DIRT.id);
                     this.a(var1, var3, var5, var4 + var6, 2, var2);
 
-                    for (int var14 = var4 + var6 - 2 - var2.nextInt(4); var14 > var4 + var6 / 2; var14 -= 2 + var2.nextInt(4))
+                    for (int var15 = var4 + var6 - 2 - var2.nextInt(4); var15 > var4 + var6 / 2; var15 -= 2 + var2.nextInt(4))
                     {
-                        float var15 = var2.nextFloat() * (float)Math.PI * 2.0F;
-                        var11 = var3 + (int)(0.5F + MathHelper.cos(var15) * 4.0F);
-                        var12 = var5 + (int)(0.5F + MathHelper.sin(var15) * 4.0F);
-                        this.a(var1, var11, var12, var14, 0, var2);
+                        float var13 = var2.nextFloat() * (float)Math.PI * 2.0F;
+                        var10 = var3 + (int)(0.5F + MathHelper.cos(var13) * 4.0F);
+                        var11 = var5 + (int)(0.5F + MathHelper.sin(var13) * 4.0F);
+                        this.a(var1, var10, var11, var15, 0, var2);
 
-                        for (int var13 = 0; var13 < 5; ++var13)
+                        for (int var14 = 0; var14 < 5; ++var14)
                         {
-                            var11 = var3 + (int)(1.5F + MathHelper.cos(var15) * (float)var13);
-                            var12 = var5 + (int)(1.5F + MathHelper.sin(var15) * (float)var13);
-                            this.setTypeAndData(var1, var11, var14 - 3 + var13 / 2, var12, Block.LOG.id, this.b);
+                            var10 = var3 + (int)(1.5F + MathHelper.cos(var13) * (float)var14);
+                            var11 = var5 + (int)(1.5F + MathHelper.sin(var13) * (float)var14);
+                            this.setTypeAndData(var1, var10, var15 - 3 + var14 / 2, var11, Block.LOG.id, this.b);
                         }
                     }
 
-                    for (var10 = 0; var10 < var6; ++var10)
+                    for (var9 = 0; var9 < var6; ++var9)
                     {
-                        var11 = var1.getTypeId(var3, var4 + var10, var5);
+                        var10 = var1.getTypeId(var3, var4 + var9, var5);
 
-                        if (var11 == 0 || var11 == Block.LEAVES.id)
+                        if (var10 == 0 || Block.byId[var10] == null || Block.byId[var10].isLeaves(var1, var3, var4 + var9, var5))
                         {
-                            this.setTypeAndData(var1, var3, var4 + var10, var5, Block.LOG.id, this.b);
+                            this.setTypeAndData(var1, var3, var4 + var9, var5, Block.LOG.id, this.b);
 
-                            if (var10 > 0)
+                            if (var9 > 0)
                             {
-                                if (var2.nextInt(3) > 0 && var1.isEmpty(var3 - 1, var4 + var10, var5))
+                                if (var2.nextInt(3) > 0 && var1.isEmpty(var3 - 1, var4 + var9, var5))
                                 {
-                                    this.setTypeAndData(var1, var3 - 1, var4 + var10, var5, Block.VINE.id, 8);
+                                    this.setTypeAndData(var1, var3 - 1, var4 + var9, var5, Block.VINE.id, 8);
                                 }
 
-                                if (var2.nextInt(3) > 0 && var1.isEmpty(var3, var4 + var10, var5 - 1))
+                                if (var2.nextInt(3) > 0 && var1.isEmpty(var3, var4 + var9, var5 - 1))
                                 {
-                                    this.setTypeAndData(var1, var3, var4 + var10, var5 - 1, Block.VINE.id, 1);
+                                    this.setTypeAndData(var1, var3, var4 + var9, var5 - 1, Block.VINE.id, 1);
                                 }
                             }
                         }
 
-                        if (var10 < var6 - 1)
+                        if (var9 < var6 - 1)
                         {
-                            var11 = var1.getTypeId(var3 + 1, var4 + var10, var5);
+                            var10 = var1.getTypeId(var3 + 1, var4 + var9, var5);
 
-                            if (var11 == 0 || var11 == Block.LEAVES.id)
+                            if (var10 == 0 || Block.byId[var10] == null || Block.byId[var10].isLeaves(var1, var3 + 1, var4 + var9, var5))
                             {
-                                this.setTypeAndData(var1, var3 + 1, var4 + var10, var5, Block.LOG.id, this.b);
+                                this.setTypeAndData(var1, var3 + 1, var4 + var9, var5, Block.LOG.id, this.b);
 
-                                if (var10 > 0)
+                                if (var9 > 0)
                                 {
-                                    if (var2.nextInt(3) > 0 && var1.isEmpty(var3 + 2, var4 + var10, var5))
+                                    if (var2.nextInt(3) > 0 && var1.isEmpty(var3 + 2, var4 + var9, var5))
                                     {
-                                        this.setTypeAndData(var1, var3 + 2, var4 + var10, var5, Block.VINE.id, 2);
+                                        this.setTypeAndData(var1, var3 + 2, var4 + var9, var5, Block.VINE.id, 2);
                                     }
 
-                                    if (var2.nextInt(3) > 0 && var1.isEmpty(var3 + 1, var4 + var10, var5 - 1))
+                                    if (var2.nextInt(3) > 0 && var1.isEmpty(var3 + 1, var4 + var9, var5 - 1))
                                     {
-                                        this.setTypeAndData(var1, var3 + 1, var4 + var10, var5 - 1, Block.VINE.id, 1);
+                                        this.setTypeAndData(var1, var3 + 1, var4 + var9, var5 - 1, Block.VINE.id, 1);
                                     }
                                 }
                             }
 
-                            var11 = var1.getTypeId(var3 + 1, var4 + var10, var5 + 1);
+                            var10 = var1.getTypeId(var3 + 1, var4 + var9, var5 + 1);
 
-                            if (var11 == 0 || var11 == Block.LEAVES.id)
+                            if (var10 == 0 || Block.byId[var10] == null || Block.byId[var10].isLeaves(var1, var3 + 1, var4 + var9, var5 + 1))
                             {
-                                this.setTypeAndData(var1, var3 + 1, var4 + var10, var5 + 1, Block.LOG.id, this.b);
+                                this.setTypeAndData(var1, var3 + 1, var4 + var9, var5 + 1, Block.LOG.id, this.b);
 
-                                if (var10 > 0)
+                                if (var9 > 0)
                                 {
-                                    if (var2.nextInt(3) > 0 && var1.isEmpty(var3 + 2, var4 + var10, var5 + 1))
+                                    if (var2.nextInt(3) > 0 && var1.isEmpty(var3 + 2, var4 + var9, var5 + 1))
                                     {
-                                        this.setTypeAndData(var1, var3 + 2, var4 + var10, var5 + 1, Block.VINE.id, 2);
+                                        this.setTypeAndData(var1, var3 + 2, var4 + var9, var5 + 1, Block.VINE.id, 2);
                                     }
 
-                                    if (var2.nextInt(3) > 0 && var1.isEmpty(var3 + 1, var4 + var10, var5 + 2))
+                                    if (var2.nextInt(3) > 0 && var1.isEmpty(var3 + 1, var4 + var9, var5 + 2))
                                     {
-                                        this.setTypeAndData(var1, var3 + 1, var4 + var10, var5 + 2, Block.VINE.id, 4);
+                                        this.setTypeAndData(var1, var3 + 1, var4 + var9, var5 + 2, Block.VINE.id, 4);
                                     }
                                 }
                             }
 
-                            var11 = var1.getTypeId(var3, var4 + var10, var5 + 1);
+                            var10 = var1.getTypeId(var3, var4 + var9, var5 + 1);
 
-                            if (var11 == 0 || var11 == Block.LEAVES.id)
+                            if (var10 == 0 || Block.byId[var10] == null || Block.byId[var10].isLeaves(var1, var3, var4 + var9, var5 + 1))
                             {
-                                this.setTypeAndData(var1, var3, var4 + var10, var5 + 1, Block.LOG.id, this.b);
+                                this.setTypeAndData(var1, var3, var4 + var9, var5 + 1, Block.LOG.id, this.b);
 
-                                if (var10 > 0)
+                                if (var9 > 0)
                                 {
-                                    if (var2.nextInt(3) > 0 && var1.isEmpty(var3 - 1, var4 + var10, var5 + 1))
+                                    if (var2.nextInt(3) > 0 && var1.isEmpty(var3 - 1, var4 + var9, var5 + 1))
                                     {
-                                        this.setTypeAndData(var1, var3 - 1, var4 + var10, var5 + 1, Block.VINE.id, 8);
+                                        this.setTypeAndData(var1, var3 - 1, var4 + var9, var5 + 1, Block.VINE.id, 8);
                                     }
 
-                                    if (var2.nextInt(3) > 0 && var1.isEmpty(var3, var4 + var10, var5 + 2))
+                                    if (var2.nextInt(3) > 0 && var1.isEmpty(var3, var4 + var9, var5 + 2))
                                     {
-                                        this.setTypeAndData(var1, var3, var4 + var10, var5 + 2, Block.VINE.id, 4);
+                                        this.setTypeAndData(var1, var3, var4 + var9, var5 + 2, Block.VINE.id, 4);
                                     }
                                 }
                             }
@@ -215,8 +215,9 @@
                 for (int var13 = var3 - var10; var13 <= var3 + var10 + 1; ++var13)
                 {
                     int var14 = var13 - var3;
+                    Block var15 = Block.byId[var1.getTypeId(var11, var8, var13)];
 
-                    if ((var12 >= 0 || var14 >= 0 || var12 * var12 + var14 * var14 <= var10 * var10) && (var12 <= 0 && var14 <= 0 || var12 * var12 + var14 * var14 <= (var10 + 1) * (var10 + 1)) && (var6.nextInt(4) != 0 || var12 * var12 + var14 * var14 <= (var10 - 1) * (var10 - 1)) && !Block.q[var1.getTypeId(var11, var8, var13)])
+                    if ((var12 >= 0 || var14 >= 0 || var12 * var12 + var14 * var14 <= var10 * var10) && (var12 <= 0 && var14 <= 0 || var12 * var12 + var14 * var14 <= (var10 + 1) * (var10 + 1)) && (var6.nextInt(4) != 0 || var12 * var12 + var14 * var14 <= (var10 - 1) * (var10 - 1)) && (var15 == null || var15.canBeReplacedByLeaves(var1, var11, var8, var13)))
                     {
                         this.setTypeAndData(var1, var11, var8, var13, Block.LEAVES.id, this.c);
                     }
Index: WorldGenSwampTree.java
===================================================================
--- WorldGenSwampTree.java	(revision 3)
+++ WorldGenSwampTree.java	(working copy)
@@ -18,35 +18,35 @@
         if (var4 >= 1 && var4 + var6 + 1 <= 128)
         {
             int var8;
+            int var9;
             int var10;
             int var11;
-            int var12;
 
             for (var8 = var4; var8 <= var4 + 1 + var6; ++var8)
             {
-                byte var9 = 1;
+                byte var12 = 1;
 
                 if (var8 == var4)
                 {
-                    var9 = 0;
+                    var12 = 0;
                 }
 
                 if (var8 >= var4 + 1 + var6 - 2)
                 {
-                    var9 = 3;
+                    var12 = 3;
                 }
 
-                for (var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10)
+                for (var9 = var3 - var12; var9 <= var3 + var12 && var7; ++var9)
                 {
-                    for (var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11)
+                    for (var10 = var5 - var12; var10 <= var5 + var12 && var7; ++var10)
                     {
                         if (var8 >= 0 && var8 < 128)
                         {
-                            var12 = var1.getTypeId(var10, var8, var11);
+                            var11 = var1.getTypeId(var9, var8, var10);
 
-                            if (var12 != 0 && var12 != Block.LEAVES.id)
+                            if (var11 != 0 && Block.byId[var11] != null && !Block.byId[var11].isLeaves(var1, var9, var8, var10))
                             {
-                                if (var12 != Block.STATIONARY_WATER.id && var12 != Block.WATER.id)
+                                if (var11 != Block.STATIONARY_WATER.id && var11 != Block.WATER.id)
                                 {
                                     var7 = false;
                                 }
@@ -76,68 +76,74 @@
                 {
                     this.setType(var1, var3, var4 - 1, var5, Block.DIRT.id);
                     int var13;
-                    int var16;
+                    int var17;
 
-                    for (var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16)
+                    for (var13 = var4 - 3 + var6; var13 <= var4 + var6; ++var13)
                     {
-                        var10 = var16 - (var4 + var6);
-                        var11 = 2 - var10 / 2;
+                        var9 = var13 - (var4 + var6);
+                        var10 = 2 - var9 / 2;
 
-                        for (var12 = var3 - var11; var12 <= var3 + var11; ++var12)
+                        for (var11 = var3 - var10; var11 <= var3 + var10; ++var11)
                         {
-                            var13 = var12 - var3;
+                            var17 = var11 - var3;
 
-                            for (int var14 = var5 - var11; var14 <= var5 + var11; ++var14)
+                            for (int var14 = var5 - var10; var14 <= var5 + var10; ++var14)
                             {
                                 int var15 = var14 - var5;
+                                Block var16 = Block.byId[var1.getTypeId(var11, var13, var14)];
 
-                                if ((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.q[var1.getTypeId(var12, var16, var14)])
+                                if ((Math.abs(var17) != var10 || Math.abs(var15) != var10 || var2.nextInt(2) != 0 && var9 != 0) && (var16 == null || var16.canBeReplacedByLeaves(var1, var11, var13, var14)))
                                 {
-                                    this.setType(var1, var12, var16, var14, Block.LEAVES.id);
+                                    this.setType(var1, var11, var13, var14, Block.LEAVES.id);
                                 }
                             }
                         }
                     }
 
-                    for (var16 = 0; var16 < var6; ++var16)
+                    Block var18;
+
+                    for (var13 = 0; var13 < var6; ++var13)
                     {
-                        var10 = var1.getTypeId(var3, var4 + var16, var5);
+                        var9 = var1.getTypeId(var3, var4 + var13, var5);
+                        var18 = Block.byId[var9];
 
-                        if (var10 == 0 || var10 == Block.LEAVES.id || var10 == Block.WATER.id || var10 == Block.STATIONARY_WATER.id)
+                        if (var9 == 0 || var18 != null && var18.isLeaves(var1, var3, var4 + var13, var5) || var9 == Block.WATER.id || var9 == Block.STATIONARY_WATER.id)
                         {
-                            this.setType(var1, var3, var4 + var16, var5, Block.LOG.id);
+                            this.setType(var1, var3, var4 + var13, var5, Block.LOG.id);
                         }
                     }
 
-                    for (var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16)
+                    for (var13 = var4 - 3 + var6; var13 <= var4 + var6; ++var13)
                     {
-                        var10 = var16 - (var4 + var6);
-                        var11 = 2 - var10 / 2;
+                        var9 = var13 - (var4 + var6);
+                        var10 = 2 - var9 / 2;
 
-                        for (var12 = var3 - var11; var12 <= var3 + var11; ++var12)
+                        for (var11 = var3 - var10; var11 <= var3 + var10; ++var11)
                         {
-                            for (var13 = var5 - var11; var13 <= var5 + var11; ++var13)
+                            for (var17 = var5 - var10; var17 <= var5 + var10; ++var17)
                             {
-                                if (var1.getTypeId(var12, var16, var13) == Block.LEAVES.id)
+                                var18 = Block.byId[var1.getTypeId(var11, var13, var17)];
+
+                                if (var18 != null && var18.isLeaves(var1, var11, var13, var17))
                                 {
-                                    if (var2.nextInt(4) == 0 && var1.getTypeId(var12 - 1, var16, var13) == 0)
+                                    if (var2.nextInt(4) == 0 && var1.getTypeId(var11 - 1, var13, var17) == 0)
                                     {
-                                        this.b(var1, var12 - 1, var16, var13, 8);
+                                        this.b(var1, var11 - 1, var13, var17, 8);
                                     }
 
-                                    if (var2.nextInt(4) == 0 && var1.getTypeId(var12 + 1, var16, var13) == 0)
+                                    if (var2.nextInt(4) == 0 && var1.getTypeId(var11 + 1, var13, var17) == 0)
                                     {
-                                        this.b(var1, var12 + 1, var16, var13, 2);
+                                        this.b(var1, var11 + 1, var13, var17, 2);
                                     }
 
-                                    if (var2.nextInt(4) == 0 && var1.getTypeId(var12, var16, var13 - 1) == 0)
+                                    if (var2.nextInt(4) == 0 && var1.getTypeId(var11, var13, var17 - 1) == 0)
                                     {
-                                        this.b(var1, var12, var16, var13 - 1, 1);
+                                        this.b(var1, var11, var13, var17 - 1, 1);
                                     }
 
-                                    if (var2.nextInt(4) == 0 && var1.getTypeId(var12, var16, var13 + 1) == 0)
+                                    if (var2.nextInt(4) == 0 && var1.getTypeId(var11, var13, var17 + 1) == 0)
                                     {
-                                        this.b(var1, var12, var16, var13 + 1, 4);
+                                        this.b(var1, var11, var13, var17 + 1, 4);
                                     }
                                 }
                             }
Index: WorldGenTaiga1.java
===================================================================
--- WorldGenTaiga1.java	(revision 3)
+++ WorldGenTaiga1.java	(working copy)
@@ -15,33 +15,34 @@
         if (var4 >= 1 && var4 + var6 + 1 <= 128)
         {
             int var11;
+            int var12;
             int var13;
             int var14;
             int var15;
-            int var18;
 
             for (var11 = var4; var11 <= var4 + 1 + var6 && var10; ++var11)
             {
-                boolean var12 = true;
+                boolean var16 = true;
 
                 if (var11 - var4 < var7)
                 {
-                    var18 = 0;
+                    var15 = 0;
                 }
                 else
                 {
-                    var18 = var9;
+                    var15 = var9;
                 }
 
-                for (var13 = var3 - var18; var13 <= var3 + var18 && var10; ++var13)
+                for (var12 = var3 - var15; var12 <= var3 + var15 && var10; ++var12)
                 {
-                    for (var14 = var5 - var18; var14 <= var5 + var18 && var10; ++var14)
+                    for (var13 = var5 - var15; var13 <= var5 + var15 && var10; ++var13)
                     {
                         if (var11 >= 0 && var11 < 128)
                         {
-                            var15 = var1.getTypeId(var13, var11, var14);
+                            var14 = var1.getTypeId(var12, var11, var13);
+                            Block var17 = Block.byId[var14];
 
-                            if (var15 != 0 && var15 != Block.LEAVES.id)
+                            if (var14 != 0 && (var17 == null || !var17.isLeaves(var1, var12, var11, var13)))
                             {
                                 var10 = false;
                             }
@@ -65,42 +66,44 @@
                 if ((var11 == Block.GRASS.id || var11 == Block.DIRT.id) && var4 < 128 - var6 - 1)
                 {
                     this.setType(var1, var3, var4 - 1, var5, Block.DIRT.id);
-                    var18 = 0;
+                    var15 = 0;
 
-                    for (var13 = var4 + var6; var13 >= var4 + var7; --var13)
+                    for (var12 = var4 + var6; var12 >= var4 + var7; --var12)
                     {
-                        for (var14 = var3 - var18; var14 <= var3 + var18; ++var14)
+                        for (var13 = var3 - var15; var13 <= var3 + var15; ++var13)
                         {
-                            var15 = var14 - var3;
+                            var14 = var13 - var3;
 
-                            for (int var16 = var5 - var18; var16 <= var5 + var18; ++var16)
+                            for (int var19 = var5 - var15; var19 <= var5 + var15; ++var19)
                             {
-                                int var17 = var16 - var5;
+                                int var20 = var19 - var5;
+                                Block var18 = Block.byId[var1.getTypeId(var13, var12, var19)];
 
-                                if ((Math.abs(var15) != var18 || Math.abs(var17) != var18 || var18 <= 0) && !Block.q[var1.getTypeId(var14, var13, var16)])
+                                if ((Math.abs(var14) != var15 || Math.abs(var20) != var15 || var15 <= 0) && (var18 == null || var18.canBeReplacedByLeaves(var1, var13, var12, var19)))
                                 {
-                                    this.setTypeAndData(var1, var14, var13, var16, Block.LEAVES.id, 1);
+                                    this.setTypeAndData(var1, var13, var12, var19, Block.LEAVES.id, 1);
                                 }
                             }
                         }
 
-                        if (var18 >= 1 && var13 == var4 + var7 + 1)
+                        if (var15 >= 1 && var12 == var4 + var7 + 1)
                         {
-                            --var18;
+                            --var15;
                         }
-                        else if (var18 < var9)
+                        else if (var15 < var9)
                         {
-                            ++var18;
+                            ++var15;
                         }
                     }
 
-                    for (var13 = 0; var13 < var6 - 1; ++var13)
+                    for (var12 = 0; var12 < var6 - 1; ++var12)
                     {
-                        var14 = var1.getTypeId(var3, var4 + var13, var5);
+                        var13 = var1.getTypeId(var3, var4 + var12, var5);
+                        Block var21 = Block.byId[var13];
 
-                        if (var14 == 0 || var14 == Block.LEAVES.id)
+                        if (var13 == 0 || var21 == null || var21.isLeaves(var1, var3, var4 + var12, var5))
                         {
-                            this.setTypeAndData(var1, var3, var4 + var13, var5, Block.LOG.id, 1);
+                            this.setTypeAndData(var1, var3, var4 + var12, var5, Block.LOG.id, 1);
                         }
                     }
 
Index: WorldGenTaiga2.java
===================================================================
--- WorldGenTaiga2.java	(revision 3)
+++ WorldGenTaiga2.java	(working copy)
@@ -20,32 +20,34 @@
         if (var4 >= 1 && var4 + var6 + 1 <= 256)
         {
             int var11;
+            int var12;
             int var13;
-            int var15;
-            int var21;
+            int var14;
+            int var16;
 
             for (var11 = var4; var11 <= var4 + 1 + var6 && var10; ++var11)
             {
-                boolean var12 = true;
+                boolean var15 = true;
 
                 if (var11 - var4 < var7)
                 {
-                    var21 = 0;
+                    var14 = 0;
                 }
                 else
                 {
-                    var21 = var9;
+                    var14 = var9;
                 }
 
-                for (var13 = var3 - var21; var13 <= var3 + var21 && var10; ++var13)
+                for (var12 = var3 - var14; var12 <= var3 + var14 && var10; ++var12)
                 {
-                    for (int var14 = var5 - var21; var14 <= var5 + var21 && var10; ++var14)
+                    for (var16 = var5 - var14; var16 <= var5 + var14 && var10; ++var16)
                     {
                         if (var11 >= 0 && var11 < 256)
                         {
-                            var15 = var1.getTypeId(var13, var11, var14);
+                            var13 = var1.getTypeId(var12, var11, var16);
+                            Block var17 = Block.byId[var13];
 
-                            if (var15 != 0 && var15 != Block.LEAVES.id)
+                            if (var13 != 0 && var17 != null && !var17.isLeaves(var1, var12, var11, var16))
                             {
                                 var10 = false;
                             }
@@ -69,57 +71,58 @@
                 if ((var11 == Block.GRASS.id || var11 == Block.DIRT.id) && var4 < 256 - var6 - 1)
                 {
                     this.setType(var1, var3, var4 - 1, var5, Block.DIRT.id);
-                    var21 = var2.nextInt(2);
-                    var13 = 1;
+                    var14 = var2.nextInt(2);
+                    var12 = 1;
                     byte var22 = 0;
-                    int var17;
-                    int var16;
+                    int var23;
 
-                    for (var15 = 0; var15 <= var8; ++var15)
+                    for (var13 = 0; var13 <= var8; ++var13)
                     {
-                        var16 = var4 + var6 - var15;
+                        var23 = var4 + var6 - var13;
 
-                        for (var17 = var3 - var21; var17 <= var3 + var21; ++var17)
+                        for (var16 = var3 - var14; var16 <= var3 + var14; ++var16)
                         {
-                            int var18 = var17 - var3;
+                            int var18 = var16 - var3;
 
-                            for (int var19 = var5 - var21; var19 <= var5 + var21; ++var19)
+                            for (int var19 = var5 - var14; var19 <= var5 + var14; ++var19)
                             {
                                 int var20 = var19 - var5;
+                                Block var21 = Block.byId[var1.getTypeId(var16, var23, var19)];
 
-                                if ((Math.abs(var18) != var21 || Math.abs(var20) != var21 || var21 <= 0) && !Block.q[var1.getTypeId(var17, var16, var19)])
+                                if ((Math.abs(var18) != var14 || Math.abs(var20) != var14 || var14 <= 0) && (var21 == null || var21.canBeReplacedByLeaves(var1, var16, var23, var19)))
                                 {
-                                    this.setTypeAndData(var1, var17, var16, var19, Block.LEAVES.id, 1);
+                                    this.setTypeAndData(var1, var16, var23, var19, Block.LEAVES.id, 1);
                                 }
                             }
                         }
 
-                        if (var21 >= var13)
+                        if (var14 >= var12)
                         {
-                            var21 = var22;
+                            var14 = var22;
                             var22 = 1;
-                            ++var13;
+                            ++var12;
 
-                            if (var13 > var9)
+                            if (var12 > var9)
                             {
-                                var13 = var9;
+                                var12 = var9;
                             }
                         }
                         else
                         {
-                            ++var21;
+                            ++var14;
                         }
                     }
 
-                    var15 = var2.nextInt(3);
+                    var13 = var2.nextInt(3);
 
-                    for (var16 = 0; var16 < var6 - var15; ++var16)
+                    for (var23 = 0; var23 < var6 - var13; ++var23)
                     {
-                        var17 = var1.getTypeId(var3, var4 + var16, var5);
+                        var16 = var1.getTypeId(var3, var4 + var23, var5);
+                        Block var24 = Block.byId[var16];
 
-                        if (var17 == 0 || var17 == Block.LEAVES.id)
+                        if (var16 == 0 || var24 == null || var24.isLeaves(var1, var3, var4 + var23, var5))
                         {
-                            this.setTypeAndData(var1, var3, var4 + var16, var5, Block.LOG.id, 1);
+                            this.setTypeAndData(var1, var3, var4 + var23, var5, Block.LOG.id, 1);
                         }
                     }
 
Index: WorldGenTrees.java
===================================================================
--- WorldGenTrees.java	(revision 3)
+++ WorldGenTrees.java	(working copy)
@@ -39,8 +39,8 @@
         {
             int var8;
             byte var9;
+            int var10;
             int var11;
-            int var12;
 
             for (var8 = var4; var8 <= var4 + 1 + var6; ++var8)
             {
@@ -56,15 +56,16 @@
                     var9 = 2;
                 }
 
-                for (int var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10)
+                for (int var12 = var3 - var9; var12 <= var3 + var9 && var7; ++var12)
                 {
-                    for (var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11)
+                    for (var10 = var5 - var9; var10 <= var5 + var9 && var7; ++var10)
                     {
                         if (var8 >= 0 && var8 < 256)
                         {
-                            var12 = var1.getTypeId(var10, var8, var11);
+                            var11 = var1.getTypeId(var12, var8, var10);
+                            Block var13 = Block.byId[var11];
 
-                            if (var12 != 0 && var12 != Block.LEAVES.id && var12 != Block.GRASS.id && var12 != Block.DIRT.id && var12 != Block.LOG.id)
+                            if (var11 != 0 && !var13.isLeaves(var1, var12, var8, var10) && var11 != Block.GRASS.id && var11 != Block.DIRT.id && !var13.isWood(var1, var12, var8, var10))
                             {
                                 var7 = false;
                             }
@@ -89,60 +90,64 @@
                 {
                     this.setType(var1, var3, var4 - 1, var5, Block.DIRT.id);
                     var9 = 3;
-                    byte var18 = 0;
-                    int var13;
+                    byte var19 = 0;
                     int var14;
                     int var15;
+                    int var20;
 
-                    for (var11 = var4 - var9 + var6; var11 <= var4 + var6; ++var11)
+                    for (var10 = var4 - var9 + var6; var10 <= var4 + var6; ++var10)
                     {
-                        var12 = var11 - (var4 + var6);
-                        var13 = var18 + 1 - var12 / 2;
+                        var11 = var10 - (var4 + var6);
+                        var20 = var19 + 1 - var11 / 2;
 
-                        for (var14 = var3 - var13; var14 <= var3 + var13; ++var14)
+                        for (var14 = var3 - var20; var14 <= var3 + var20; ++var14)
                         {
                             var15 = var14 - var3;
 
-                            for (int var16 = var5 - var13; var16 <= var5 + var13; ++var16)
+                            for (int var16 = var5 - var20; var16 <= var5 + var20; ++var16)
                             {
                                 int var17 = var16 - var5;
+                                Block var18 = Block.byId[var1.getTypeId(var14, var10, var16)];
 
-                                if ((Math.abs(var15) != var13 || Math.abs(var17) != var13 || var2.nextInt(2) != 0 && var12 != 0) && !Block.q[var1.getTypeId(var14, var11, var16)])
+                                if ((Math.abs(var15) != var20 || Math.abs(var17) != var20 || var2.nextInt(2) != 0 && var11 != 0) && (var18 == null || var18.canBeReplacedByLeaves(var1, var14, var10, var16)))
                                 {
-                                    this.setTypeAndData(var1, var14, var11, var16, Block.LEAVES.id, this.d);
+                                    this.setTypeAndData(var1, var14, var10, var16, Block.LEAVES.id, this.d);
                                 }
                             }
                         }
                     }
 
-                    for (var11 = 0; var11 < var6; ++var11)
+                    Block var21;
+
+                    for (var10 = 0; var10 < var6; ++var10)
                     {
-                        var12 = var1.getTypeId(var3, var4 + var11, var5);
+                        var11 = var1.getTypeId(var3, var4 + var10, var5);
+                        var21 = Block.byId[var11];
 
-                        if (var12 == 0 || var12 == Block.LEAVES.id)
+                        if (var11 == 0 || var21 == null || var21.isLeaves(var1, var3, var4 + var10, var5))
                         {
-                            this.setTypeAndData(var1, var3, var4 + var11, var5, Block.LOG.id, this.c);
+                            this.setTypeAndData(var1, var3, var4 + var10, var5, Block.LOG.id, this.c);
 
-                            if (this.b && var11 > 0)
+                            if (this.b && var10 > 0)
                             {
-                                if (var2.nextInt(3) > 0 && var1.isEmpty(var3 - 1, var4 + var11, var5))
+                                if (var2.nextInt(3) > 0 && var1.isEmpty(var3 - 1, var4 + var10, var5))
                                 {
-                                    this.setTypeAndData(var1, var3 - 1, var4 + var11, var5, Block.VINE.id, 8);
+                                    this.setTypeAndData(var1, var3 - 1, var4 + var10, var5, Block.VINE.id, 8);
                                 }
 
-                                if (var2.nextInt(3) > 0 && var1.isEmpty(var3 + 1, var4 + var11, var5))
+                                if (var2.nextInt(3) > 0 && var1.isEmpty(var3 + 1, var4 + var10, var5))
                                 {
-                                    this.setTypeAndData(var1, var3 + 1, var4 + var11, var5, Block.VINE.id, 2);
+                                    this.setTypeAndData(var1, var3 + 1, var4 + var10, var5, Block.VINE.id, 2);
                                 }
 
-                                if (var2.nextInt(3) > 0 && var1.isEmpty(var3, var4 + var11, var5 - 1))
+                                if (var2.nextInt(3) > 0 && var1.isEmpty(var3, var4 + var10, var5 - 1))
                                 {
-                                    this.setTypeAndData(var1, var3, var4 + var11, var5 - 1, Block.VINE.id, 1);
+                                    this.setTypeAndData(var1, var3, var4 + var10, var5 - 1, Block.VINE.id, 1);
                                 }
 
-                                if (var2.nextInt(3) > 0 && var1.isEmpty(var3, var4 + var11, var5 + 1))
+                                if (var2.nextInt(3) > 0 && var1.isEmpty(var3, var4 + var10, var5 + 1))
                                 {
-                                    this.setTypeAndData(var1, var3, var4 + var11, var5 + 1, Block.VINE.id, 4);
+                                    this.setTypeAndData(var1, var3, var4 + var10, var5 + 1, Block.VINE.id, 4);
                                 }
                             }
                         }
@@ -150,35 +155,37 @@
 
                     if (this.b)
                     {
-                        for (var11 = var4 - 3 + var6; var11 <= var4 + var6; ++var11)
+                        for (var10 = var4 - 3 + var6; var10 <= var4 + var6; ++var10)
                         {
-                            var12 = var11 - (var4 + var6);
-                            var13 = 2 - var12 / 2;
+                            var11 = var10 - (var4 + var6);
+                            var20 = 2 - var11 / 2;
 
-                            for (var14 = var3 - var13; var14 <= var3 + var13; ++var14)
+                            for (var14 = var3 - var20; var14 <= var3 + var20; ++var14)
                             {
-                                for (var15 = var5 - var13; var15 <= var5 + var13; ++var15)
+                                for (var15 = var5 - var20; var15 <= var5 + var20; ++var15)
                                 {
-                                    if (var1.getTypeId(var14, var11, var15) == Block.LEAVES.id)
+                                    var21 = Block.byId[var1.getTypeId(var14, var10, var15)];
+
+                                    if (var21 != null && var21.isLeaves(var1, var14, var10, var15))
                                     {
-                                        if (var2.nextInt(4) == 0 && var1.getTypeId(var14 - 1, var11, var15) == 0)
+                                        if (var2.nextInt(4) == 0 && var1.getTypeId(var14 - 1, var10, var15) == 0)
                                         {
-                                            this.b(var1, var14 - 1, var11, var15, 8);
+                                            this.b(var1, var14 - 1, var10, var15, 8);
                                         }
 
-                                        if (var2.nextInt(4) == 0 && var1.getTypeId(var14 + 1, var11, var15) == 0)
+                                        if (var2.nextInt(4) == 0 && var1.getTypeId(var14 + 1, var10, var15) == 0)
                                         {
-                                            this.b(var1, var14 + 1, var11, var15, 2);
+                                            this.b(var1, var14 + 1, var10, var15, 2);
                                         }
 
-                                        if (var2.nextInt(4) == 0 && var1.getTypeId(var14, var11, var15 - 1) == 0)
+                                        if (var2.nextInt(4) == 0 && var1.getTypeId(var14, var10, var15 - 1) == 0)
                                         {
-                                            this.b(var1, var14, var11, var15 - 1, 1);
+                                            this.b(var1, var14, var10, var15 - 1, 1);
                                         }
 
-                                        if (var2.nextInt(4) == 0 && var1.getTypeId(var14, var11, var15 + 1) == 0)
+                                        if (var2.nextInt(4) == 0 && var1.getTypeId(var14, var10, var15 + 1) == 0)
                                         {
-                                            this.b(var1, var14, var11, var15 + 1, 4);
+                                            this.b(var1, var14, var10, var15 + 1, 4);
                                         }
                                     }
                                 }
@@ -187,14 +194,14 @@
 
                         if (var2.nextInt(5) == 0 && var6 > 5)
                         {
-                            for (var11 = 0; var11 < 2; ++var11)
+                            for (var10 = 0; var10 < 2; ++var10)
                             {
-                                for (var12 = 0; var12 < 4; ++var12)
+                                for (var11 = 0; var11 < 4; ++var11)
                                 {
-                                    if (var2.nextInt(4 - var11) == 0)
+                                    if (var2.nextInt(4 - var10) == 0)
                                     {
-                                        var13 = var2.nextInt(3);
-                                        this.setTypeAndData(var1, var3 + Direction.a[Direction.f[var12]], var4 + var6 - 5 + var11, var5 + Direction.b[Direction.f[var12]], Block.COCOA.id, var13 << 2 | var12);
+                                        var20 = var2.nextInt(3);
+                                        this.setTypeAndData(var1, var3 + Direction.a[Direction.f[var11]], var4 + var6 - 5 + var10, var5 + Direction.b[Direction.f[var11]], Block.COCOA.id, var20 << 2 | var11);
                                     }
                                 }
                             }
Index: WorldMap.java
===================================================================
--- WorldMap.java	(revision 3)
+++ WorldMap.java	(working copy)
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
@@ -10,7 +12,7 @@
 {
     public int centerX;
     public int centerZ;
-    public byte map;
+    public int map;
     public byte scale;
 
     /** colours */
@@ -37,7 +39,17 @@
      */
     public void a(NBTTagCompound var1)
     {
-        this.map = var1.getByte("dimension");
+        NBTBase var2 = var1.get("dimension");
+
+        if (var2 instanceof NBTTagByte)
+        {
+            this.map = ((NBTTagByte)var2).data;
+        }
+        else
+        {
+            this.map = ((NBTTagInt)var2).data;
+        }
+
         this.centerX = var1.getInt("xCenter");
         this.centerZ = var1.getInt("zCenter");
         this.scale = var1.getByte("scale");
@@ -52,33 +64,33 @@
             this.scale = 4;
         }
 
-        short var2 = var1.getShort("width");
-        short var3 = var1.getShort("height");
+        short var3 = var1.getShort("width");
+        short var4 = var1.getShort("height");
 
-        if (var2 == 128 && var3 == 128)
+        if (var3 == 128 && var4 == 128)
         {
             this.colors = var1.getByteArray("colors");
         }
         else
         {
-            byte[] var4 = var1.getByteArray("colors");
+            byte[] var5 = var1.getByteArray("colors");
             this.colors = new byte[16384];
-            int var5 = (128 - var2) / 2;
             int var6 = (128 - var3) / 2;
+            int var7 = (128 - var4) / 2;
 
-            for (int var7 = 0; var7 < var3; ++var7)
+            for (int var8 = 0; var8 < var4; ++var8)
             {
-                int var8 = var7 + var6;
+                int var9 = var8 + var7;
 
-                if (var8 >= 0 || var8 < 128)
+                if (var9 >= 0 || var9 < 128)
                 {
-                    for (int var9 = 0; var9 < var2; ++var9)
+                    for (int var10 = 0; var10 < var3; ++var10)
                     {
-                        int var10 = var9 + var5;
+                        int var11 = var10 + var6;
 
-                        if (var10 >= 0 || var10 < 128)
+                        if (var11 >= 0 || var11 < 128)
                         {
-                            this.colors[var10 + var8 * 128] = var4[var9 + var7 * var2];
+                            this.colors[var11 + var9 * 128] = var5[var10 + var8 * var3];
                         }
                     }
                 }
@@ -91,7 +103,7 @@
      */
     public void b(NBTTagCompound var1)
     {
-        var1.setByte("dimension", this.map);
+        var1.setInt("dimension", this.map);
         var1.setInt("xCenter", this.centerX);
         var1.setInt("zCenter", this.centerZ);
         var1.setByte("scale", this.scale);
@@ -148,18 +160,18 @@
         float var12 = (float)(var6 - (double)this.centerZ) / (float)var10;
         byte var13 = (byte)((int)((double)(var11 * 2.0F) + 0.5D));
         byte var14 = (byte)((int)((double)(var12 * 2.0F) + 0.5D));
-        byte var16 = 63;
-        byte var15;
+        byte var15 = 63;
+        byte var16;
 
-        if (var11 >= (float)(-var16) && var12 >= (float)(-var16) && var11 <= (float)var16 && var12 <= (float)var16)
+        if (var11 >= (float)(-var15) && var12 >= (float)(-var15) && var11 <= (float)var15 && var12 <= (float)var15)
         {
             var8 += var8 < 0.0D ? -8.0D : 8.0D;
-            var15 = (byte)((int)(var8 * 16.0D / 360.0D));
+            var16 = (byte)((int)(var8 * 16.0D / 360.0D));
 
             if (this.map < 0)
             {
                 int var17 = (int)(var2.getWorldData().g() / 10L);
-                var15 = (byte)(var17 * var17 * 34187121 + var17 * 121 >> 15 & 15);
+                var16 = (byte)(var17 * var17 * 34187121 + var17 * 121 >> 15 & 15);
             }
         }
         else
@@ -171,30 +183,30 @@
             }
 
             var1 = 6;
-            var15 = 0;
+            var16 = 0;
 
-            if (var11 <= (float)(-var16))
+            if (var11 <= (float)(-var15))
             {
-                var13 = (byte)((int)((double)(var16 * 2) + 2.5D));
+                var13 = (byte)((int)((double)(var15 * 2) + 2.5D));
             }
 
-            if (var12 <= (float)(-var16))
+            if (var12 <= (float)(-var15))
             {
-                var14 = (byte)((int)((double)(var16 * 2) + 2.5D));
+                var14 = (byte)((int)((double)(var15 * 2) + 2.5D));
             }
 
-            if (var11 >= (float)var16)
+            if (var11 >= (float)var15)
             {
-                var13 = (byte)(var16 * 2 + 1);
+                var13 = (byte)(var15 * 2 + 1);
             }
 
-            if (var12 >= (float)var16)
+            if (var12 >= (float)var15)
             {
-                var14 = (byte)(var16 * 2 + 1);
+                var14 = (byte)(var15 * 2 + 1);
             }
         }
 
-        this.g.put(var3, new WorldMapDecoration(this, (byte)var1, var13, var14, var15));
+        this.g.put(var3, new WorldMapDecoration(this, (byte)var1, var13, var14, var16));
     }
 
     public byte[] func_76193_a(ItemStack var1, World var2, EntityHuman var3)
@@ -223,6 +235,42 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public void a(byte[] var1)
+    {
+        int var2;
+
+        if (var1[0] == 0)
+        {
+            var2 = var1[1] & 255;
+            int var3 = var1[2] & 255;
+
+            for (int var4 = 0; var4 < var1.length - 3; ++var4)
+            {
+                this.colors[(var4 + var3) * 128 + var2] = var1[var4 + 3];
+            }
+
+            this.c();
+        }
+        else if (var1[0] == 1)
+        {
+            this.g.clear();
+
+            for (var2 = 0; var2 < (var1.length - 1) / 3; ++var2)
+            {
+                byte var7 = (byte)(var1[var2 * 3 + 1] >> 4);
+                byte var8 = var1[var2 * 3 + 2];
+                byte var5 = var1[var2 * 3 + 3];
+                byte var6 = (byte)(var1[var2 * 3 + 1] & 15);
+                this.g.put("icon-" + var2, new WorldMapDecoration(this, var7, var8, var5, var6));
+            }
+        }
+        else if (var1[0] == 2)
+        {
+            this.scale = var1[1];
+        }
+    }
+
     public WorldMapHumanTracker func_82568_a(EntityHuman var1)
     {
         WorldMapHumanTracker var2 = (WorldMapHumanTracker)this.i.get(var1);
Index: WorldNBTStorage.java
===================================================================
--- WorldNBTStorage.java	(revision 3)
+++ WorldNBTStorage.java	(working copy)
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.FMLCommonHandler;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
@@ -82,7 +83,7 @@
     /**
      * Checks the session lock to prevent save collisions
      */
-    public void checkSession()
+    public void checkSession() throws ExceptionWorldConflict
     {
         try
         {
@@ -121,6 +122,7 @@
     public WorldData getWorldData()
     {
         File var1 = new File(this.baseDir, "level.dat");
+        WorldData var4 = null;
         NBTTagCompound var2;
         NBTTagCompound var3;
 
@@ -130,11 +132,13 @@
             {
                 var2 = NBTCompressedStreamTools.a(new FileInputStream(var1));
                 var3 = var2.getCompound("Data");
-                return new WorldData(var3);
+                var4 = new WorldData(var3);
+                FMLCommonHandler.instance().handleWorldDataLoad(this, var4, var2);
+                return var4;
             }
-            catch (Exception var5)
+            catch (Exception var7)
             {
-                var5.printStackTrace();
+                var7.printStackTrace();
             }
         }
 
@@ -146,11 +150,13 @@
             {
                 var2 = NBTCompressedStreamTools.a(new FileInputStream(var1));
                 var3 = var2.getCompound("Data");
-                return new WorldData(var3);
+                var4 = new WorldData(var3);
+                FMLCommonHandler.instance().handleWorldDataLoad(this, var4, var2);
+                return var4;
             }
-            catch (Exception var4)
+            catch (Exception var6)
             {
-                var4.printStackTrace();
+                var6.printStackTrace();
             }
         }
 
@@ -165,6 +171,7 @@
         NBTTagCompound var3 = var1.a(var2);
         NBTTagCompound var4 = new NBTTagCompound();
         var4.set("Data", var3);
+        FMLCommonHandler.instance().handleWorldDataSave(this, var1, var4);
 
         try
         {
@@ -206,6 +213,7 @@
         NBTTagCompound var2 = var1.a();
         NBTTagCompound var3 = new NBTTagCompound();
         var3.set("Data", var2);
+        FMLCommonHandler.instance().handleWorldDataSave(this, var1, var3);
 
         try
         {
Index: WorldServer.java
===================================================================
--- WorldServer.java	(revision 3)
+++ WorldServer.java	(working copy)
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
+import java.io.File;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -7,6 +10,10 @@
 import java.util.Random;
 import java.util.Set;
 import java.util.TreeSet;
+import net.minecraftforge.common.ChestGenHooks;
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.WorldEvent$Save;
 
 public class WorldServer extends World
 {
@@ -36,10 +43,11 @@
      * applied locally and send to clients.
      */
     private int R = 0;
-    private static final StructurePieceTreasure[] S = new StructurePieceTreasure[] {new StructurePieceTreasure(Item.STICK.id, 0, 1, 3, 10), new StructurePieceTreasure(Block.WOOD.id, 0, 1, 3, 10), new StructurePieceTreasure(Block.LOG.id, 0, 1, 3, 10), new StructurePieceTreasure(Item.STONE_AXE.id, 0, 1, 1, 3), new StructurePieceTreasure(Item.WOOD_AXE.id, 0, 1, 1, 5), new StructurePieceTreasure(Item.STONE_PICKAXE.id, 0, 1, 1, 3), new StructurePieceTreasure(Item.WOOD_PICKAXE.id, 0, 1, 1, 5), new StructurePieceTreasure(Item.APPLE.id, 0, 2, 3, 5), new StructurePieceTreasure(Item.BREAD.id, 0, 2, 3, 3)};
+    public static final StructurePieceTreasure[] S = new StructurePieceTreasure[] {new StructurePieceTreasure(Item.STICK.id, 0, 1, 3, 10), new StructurePieceTreasure(Block.WOOD.id, 0, 1, 3, 10), new StructurePieceTreasure(Block.LOG.id, 0, 1, 3, 10), new StructurePieceTreasure(Item.STONE_AXE.id, 0, 1, 1, 3), new StructurePieceTreasure(Item.WOOD_AXE.id, 0, 1, 1, 5), new StructurePieceTreasure(Item.STONE_PICKAXE.id, 0, 1, 1, 3), new StructurePieceTreasure(Item.WOOD_PICKAXE.id, 0, 1, 1, 5), new StructurePieceTreasure(Item.APPLE.id, 0, 2, 3, 5), new StructurePieceTreasure(Item.BREAD.id, 0, 2, 3, 3)};
 
     /** An IntHashMap of entity IDs (integers) to their Entity objects. */
     private IntHashMap entitiesById;
+    protected Set doneChunks = new HashSet();
 
     public WorldServer(MinecraftServer var1, IDataManager var2, String var3, int var4, WorldSettings var5, MethodProfiler var6)
     {
@@ -62,6 +70,8 @@
         {
             this.N = new TreeSet();
         }
+
+        DimensionManager.setWorld(var4, this);
     }
 
     /**
@@ -176,10 +186,7 @@
 
     private void T()
     {
-        this.worldData.setWeatherDuration(0);
-        this.worldData.setStorm(false);
-        this.worldData.setThunderDuration(0);
-        this.worldData.setThundering(false);
+        this.worldProvider.resetRainAndThunder();
     }
 
     public boolean everyoneDeeplySleeping()
@@ -187,20 +194,18 @@
         if (this.O && !this.isStatic)
         {
             Iterator var1 = this.players.iterator();
-            EntityHuman var2;
 
-            do
+            while (var1.hasNext())
             {
-                if (!var1.hasNext())
+                EntityHuman var2 = (EntityHuman)var1.next();
+
+                if (!var2.isDeeplySleeping())
                 {
-                    return true;
+                    return false;
                 }
-
-                var2 = (EntityHuman)var1.next();
             }
-            while (var2.isDeeplySleeping());
 
-            return false;
+            return true;
         }
         else
         {
@@ -208,6 +213,34 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public void f()
+    {
+        if (this.worldData.d() <= 0)
+        {
+            this.worldData.b(64);
+        }
+
+        int var1 = this.worldData.c();
+        int var2 = this.worldData.e();
+        int var3 = 0;
+
+        while (this.b(var1, var2) == 0)
+        {
+            var1 += this.random.nextInt(8) - this.random.nextInt(8);
+            var2 += this.random.nextInt(8) - this.random.nextInt(8);
+            ++var3;
+
+            if (var3 == 10000)
+            {
+                break;
+            }
+        }
+
+        this.worldData.a(var1);
+        this.worldData.c(var2);
+    }
+
     /**
      * plays random cave ambient sounds and runs updateTick on random blocks within each chunk in the vacinity of a
      * player
@@ -218,100 +251,113 @@
         int var1 = 0;
         int var2 = 0;
         Iterator var3 = this.chunkTickList.iterator();
+        this.doneChunks.retainAll(this.chunkTickList);
 
+        if (this.doneChunks.size() == this.chunkTickList.size())
+        {
+            this.doneChunks.clear();
+        }
+
+        long var4 = -System.currentTimeMillis();
+
         while (var3.hasNext())
         {
-            ChunkCoordIntPair var4 = (ChunkCoordIntPair)var3.next();
-            int var5 = var4.x * 16;
-            int var6 = var4.z * 16;
+            ChunkCoordIntPair var6 = (ChunkCoordIntPair)var3.next();
+            int var7 = var6.x * 16;
+            int var8 = var6.z * 16;
             this.methodProfiler.a("getChunk");
-            Chunk var7 = this.getChunkAt(var4.x, var4.z);
-            this.a(var5, var6, var7);
+            Chunk var9 = this.getChunkAt(var6.x, var6.z);
+            this.a(var7, var8, var9);
             this.methodProfiler.c("tickChunk");
-            var7.k();
+
+            if (System.currentTimeMillis() + var4 <= 4L && this.doneChunks.add(var6))
+            {
+                var9.k();
+            }
+
             this.methodProfiler.c("thunder");
-            int var8;
-            int var9;
             int var10;
             int var11;
+            int var12;
+            int var13;
 
-            if (this.random.nextInt(100000) == 0 && this.M() && this.L())
+            if (this.worldProvider.canDoLightning(var9) && this.random.nextInt(100000) == 0 && this.M() && this.L())
             {
                 this.k = this.k * 3 + 1013904223;
-                var8 = this.k >> 2;
-                var9 = var5 + (var8 & 15);
-                var10 = var6 + (var8 >> 8 & 15);
-                var11 = this.h(var9, var10);
+                var10 = this.k >> 2;
+                var11 = var7 + (var10 & 15);
+                var12 = var8 + (var10 >> 8 & 15);
+                var13 = this.h(var11, var12);
 
-                if (this.B(var9, var11, var10))
+                if (this.B(var11, var13, var12))
                 {
-                    this.strikeLightning(new EntityLightning(this, (double)var9, (double)var11, (double)var10));
+                    this.strikeLightning(new EntityLightning(this, (double)var11, (double)var13, (double)var12));
                     this.q = 2;
                 }
             }
 
             this.methodProfiler.c("iceandsnow");
-            int var13;
+            int var14;
 
-            if (this.random.nextInt(16) == 0)
+            if (this.worldProvider.canDoRainSnowIce(var9) && this.random.nextInt(16) == 0)
             {
                 this.k = this.k * 3 + 1013904223;
-                var8 = this.k >> 2;
-                var9 = var8 & 15;
-                var10 = var8 >> 8 & 15;
-                var11 = this.h(var9 + var5, var10 + var6);
+                var10 = this.k >> 2;
+                var11 = var10 & 15;
+                var12 = var10 >> 8 & 15;
+                var13 = this.h(var11 + var7, var12 + var8);
 
-                if (this.v(var9 + var5, var11 - 1, var10 + var6))
+                if (this.v(var11 + var7, var13 - 1, var12 + var8))
                 {
-                    this.setTypeId(var9 + var5, var11 - 1, var10 + var6, Block.ICE.id);
+                    this.setTypeId(var11 + var7, var13 - 1, var12 + var8, Block.ICE.id);
                 }
 
-                if (this.M() && this.w(var9 + var5, var11, var10 + var6))
+                if (this.M() && this.w(var11 + var7, var13, var12 + var8))
                 {
-                    this.setTypeId(var9 + var5, var11, var10 + var6, Block.SNOW.id);
+                    this.setTypeId(var11 + var7, var13, var12 + var8, Block.SNOW.id);
                 }
 
                 if (this.M())
                 {
-                    BiomeBase var12 = this.getBiome(var9 + var5, var10 + var6);
+                    BiomeBase var15 = this.getBiome(var11 + var7, var12 + var8);
 
-                    if (var12.d())
+                    if (var15.d())
                     {
-                        var13 = this.getTypeId(var9 + var5, var11 - 1, var10 + var6);
+                        var14 = this.getTypeId(var11 + var7, var13 - 1, var12 + var8);
 
-                        if (var13 != 0)
+                        if (var14 != 0)
                         {
-                            Block.byId[var13].f(this, var9 + var5, var11 - 1, var10 + var6);
+                            Block.byId[var14].f(this, var11 + var7, var13 - 1, var12 + var8);
                         }
                     }
                 }
             }
 
             this.methodProfiler.c("tickTiles");
-            ChunkSection[] var19 = var7.i();
-            var9 = var19.length;
+            ChunkSection[] var23 = var9.i();
+            var11 = var23.length;
 
-            for (var10 = 0; var10 < var9; ++var10)
+            for (var12 = 0; var12 < var11; ++var12)
             {
-                ChunkSection var21 = var19[var10];
+                ChunkSection var16 = var23[var12];
 
-                if (var21 != null && var21.b())
+                if (var16 != null && var16.b())
                 {
-                    for (int var20 = 0; var20 < 3; ++var20)
+                    for (int var17 = 0; var17 < 3; ++var17)
                     {
                         this.k = this.k * 3 + 1013904223;
-                        var13 = this.k >> 2;
-                        int var14 = var13 & 15;
-                        int var15 = var13 >> 8 & 15;
-                        int var16 = var13 >> 16 & 15;
-                        int var17 = var21.a(var14, var16, var15);
+                        var14 = this.k >> 2;
+                        int var18 = var14 & 15;
+                        int var19 = var14 >> 8 & 15;
+                        int var20 = var14 >> 16 & 15;
+                        int var21 = var16.a(var18, var20, var19);
                         ++var2;
-                        Block var18 = Block.byId[var17];
+                        Block var22 = Block.byId[var21];
 
-                        if (var18 != null && var18.isTicking())
+                        if (var22 != null && var22.isTicking())
                         {
                             ++var1;
-                            var18.b(this, var14 + var5, var16 + var21.d(), var15 + var6, this.random);
+                            var22.b(this, var18 + var7, var20 + var16.d(), var19 + var8, this.random);
                         }
                     }
                 }
@@ -332,19 +378,20 @@
     public void func_82740_a(int var1, int var2, int var3, int var4, int var5, int var6)
     {
         NextTickListEntry var7 = new NextTickListEntry(var1, var2, var3, var4);
-        byte var8 = 8;
+        boolean var8 = this.getPersistentChunks().containsKey(new ChunkCoordIntPair(var7.a >> 4, var7.c >> 4));
+        int var9 = var8 ? 0 : 8;
 
         if (this.d && var4 > 0)
         {
             if (Block.byId[var4].func_82506_l())
             {
-                if (this.d(var7.a - var8, var7.b - var8, var7.c - var8, var7.a + var8, var7.b + var8, var7.c + var8))
+                if (this.d(var7.a - var9, var7.b - var9, var7.c - var9, var7.a + var9, var7.b + var9, var7.c + var9))
                 {
-                    int var9 = this.getTypeId(var7.a, var7.b, var7.c);
+                    int var10 = this.getTypeId(var7.a, var7.b, var7.c);
 
-                    if (var9 == var7.d && var9 > 0)
+                    if (var10 == var7.d && var10 > 0)
                     {
-                        Block.byId[var9].b(this, var7.a, var7.b, var7.c, this.random);
+                        Block.byId[var10].b(this, var7.a, var7.b, var7.c, this.random);
                     }
                 }
 
@@ -354,7 +401,7 @@
             var5 = 1;
         }
 
-        if (this.d(var1 - var8, var2 - var8, var3 - var8, var1 + var8, var2 + var8, var3 + var8))
+        if (this.d(var1 - var9, var2 - var9, var3 - var9, var1 + var9, var2 + var9, var3 + var9))
         {
             if (var4 > 0)
             {
@@ -394,7 +441,7 @@
      */
     public void tickEntities()
     {
-        if (this.players.isEmpty())
+        if (this.players.isEmpty() && this.getPersistentChunks().isEmpty())
         {
             if (this.field_80004_Q++ >= 1200)
             {
@@ -443,15 +490,16 @@
 
                 this.N.remove(var4);
                 this.field_73064_N.remove(var4);
-                byte var5 = 8;
+                boolean var5 = this.getPersistentChunks().containsKey(new ChunkCoordIntPair(var4.a >> 4, var4.c >> 4));
+                int var6 = var5 ? 0 : 8;
 
-                if (this.d(var4.a - var5, var4.b - var5, var4.c - var5, var4.a + var5, var4.b + var5, var4.c + var5))
+                if (this.d(var4.a - var6, var4.b - var6, var4.c - var6, var4.a + var6, var4.b + var6, var4.c + var6))
                 {
-                    int var6 = this.getTypeId(var4.a, var4.b, var4.c);
+                    int var7 = this.getTypeId(var4.a, var4.b, var4.c);
 
-                    if (var6 == var4.d && var6 > 0)
+                    if (var7 == var4.d && var7 > 0)
                     {
-                        Block.byId[var6].b(this, var4.a, var4.b, var4.c, this.random);
+                        Block.byId[var7].b(this, var4.a, var4.b, var4.c, this.random);
                     }
                 }
             }
@@ -540,17 +588,30 @@
     public List getTileEntities(int var1, int var2, int var3, int var4, int var5, int var6)
     {
         ArrayList var7 = new ArrayList();
-        Iterator var8 = this.tileEntityList.iterator();
 
-        while (var8.hasNext())
+        for (int var8 = var1 >> 4; var8 <= var4 >> 4; ++var8)
         {
-            TileEntity var9 = (TileEntity)var8.next();
+            for (int var9 = var3 >> 4; var9 <= var6 >> 4; ++var9)
+            {
+                Chunk var10 = this.getChunkAt(var8, var9);
 
-            if (var9.x >= var1 && var9.y >= var2 && var9.z >= var3 && var9.x < var4 && var9.y < var5 && var9.z < var6)
+                if (var10 != null)
             {
-                var7.add(var9);
+                    Iterator var11 = var10.tileEntities.values().iterator();
+
+                    while (var11.hasNext())
+                    {
+                        Object var12 = var11.next();
+                        TileEntity var13 = (TileEntity)var12;
+
+                        if (!var13.r() && var13.x >= var1 && var13.y >= var2 && var13.z >= var3 && var13.x <= var4 && var13.y <= var5 && var13.z <= var6)
+                        {
+                            var7.add(var13);
             }
         }
+                }
+            }
+        }
 
         return var7;
     }
@@ -560,6 +621,11 @@
      */
     public boolean a(EntityHuman var1, int var2, int var3, int var4)
     {
+        return super.a(var1, var2, var3, var4);
+    }
+
+    public boolean canMineBlockBody(EntityHuman var1, int var2, int var3, int var4)
+    {
         int var5 = MathHelper.a(var2 - this.worldData.c());
         int var6 = MathHelper.a(var4 - this.worldData.e());
 
@@ -568,7 +634,7 @@
             var6 = var5;
         }
 
-        return var6 > 16 || this.server.getServerConfigurationManager().isOp(var1.name) || this.server.I();
+        return var6 > this.server.getSpawnProtection() || this.server.getServerConfigurationManager().isOp(var1.name) || this.server.I();
     }
 
     protected void a(WorldSettings var1)
@@ -651,7 +717,7 @@
      */
     protected void k()
     {
-        WorldGenBonusChest var1 = new WorldGenBonusChest(S, 10);
+        WorldGenBonusChest var1 = new WorldGenBonusChest(ChestGenHooks.getItems("bonusChest"), ChestGenHooks.getCount("bonusChest", this.random));
 
         for (int var2 = 0; var2 < 10; ++var2)
         {
@@ -677,7 +743,7 @@
     /**
      * Saves all chunks to disk while updating progress bar.
      */
-    public void save(boolean var1, IProgressUpdate var2)
+    public void save(boolean var1, IProgressUpdate var2) throws ExceptionWorldConflict
     {
         if (this.chunkProvider.canSave())
         {
@@ -694,17 +760,19 @@
             }
 
             this.chunkProvider.saveChunks(var1, var2);
+            MinecraftForge.EVENT_BUS.post(new WorldEvent$Save(this));
         }
     }
 
     /**
      * Saves the chunks to disk.
      */
-    protected void a()
+    protected void a() throws ExceptionWorldConflict
     {
         this.C();
         this.dataManager.saveWorldData(this.worldData, this.server.getServerConfigurationManager().q());
         this.worldMaps.a();
+        this.perWorldStorage.a();
     }
 
     /**
@@ -823,20 +891,19 @@
     {
         NoteBlockData var7 = new NoteBlockData(var1, var2, var3, var4, var5, var6);
         Iterator var8 = this.Q[this.R].iterator();
-        NoteBlockData var9;
 
-        do
+        while (var8.hasNext())
         {
-            if (!var8.hasNext())
+            NoteBlockData var9 = (NoteBlockData)var8.next();
+
+            if (var9.equals(var7))
             {
-                this.Q[this.R].add(var7);
                 return;
             }
+        }
 
-            var9 = (NoteBlockData)var8.next();
+        this.Q[this.R].add(var7);
         }
-        while (!var9.equals(var7));
-    }
 
     /**
      * Send and apply locally all pending BlockEvents to each player with 64m radius of the event.
@@ -930,4 +997,9 @@
     {
         return this.manager;
     }
+
+    public File getChunkSaveLocation()
+    {
+        return ((ChunkRegionLoader)this.chunkProviderServer.e).d;
 }
+}
